[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d FlashMind"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T14-3/main[image:https://travis-ci.org/AY1920S1-CS2103-T14-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-T14-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-T14-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "image::images/Ui.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "// tag::description[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Need to cram for an upcoming test? Interested in learning a new language? FlashMind is here for you."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "This flashcard program helps you memorise more efficiently, reducing study time and increasing the amount of content you can learn"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* This application will help anyone looking to remember things faster and for longer, it can help users to:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Revise for a test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Learn general trivia"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Pick up a new language"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** And much more!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* FlashMind has a GUI with an easy to use commandline interface(CLI) which is more"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "intuitive than searching through multiple menus for a command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* Highly customizable: Add as many flashcards as you want to the program and edit them anytime"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* Flexible: Easily create flashcard sets from any combination of your existing flashcards"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* Multiple modes: Normal flashcard mode for memorizing or a quiz mode to test yourself"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "// end::description[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* https://github.com/AY1920S1-CS2103-T14-3/main[View on Github]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* This product is based on the source code from AddressBook-Level 3 project created by https://se-education.org[SE-EDU] initiative"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 7,
      "lzw12345": 13,
      "-": 20
    }
  },
  {
    "path": "app/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 2,
      "-": 209
    }
  },
  {
    "path": "app/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Person person \u003d new Person(name, phone, email, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 3,
      "-": 54
    }
  },
  {
    "path": "app/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 1,
      "-": 77
    }
  },
  {
    "path": "app/src/main/java/seedu/address/model/person/Person.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 3,
      "-": 109
    }
  },
  {
    "path": "app/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 2,
      "-": 94
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "mainClassName \u003d \u0027seedu.flashcard.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    archiveName \u003d \u0027flashcard.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "lzw12345": 1,
      "-": 153
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashMind was developed by the https://github.com/AY1920S1-CS2103-T14-3[AY1920S1-CS2103-T14-3] team based on Address Book - 3. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d He Songchi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "image::akimatsu98.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "{empty}[https://github.com/Akimatsu98[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "{empty}[https://ay1920s1-cs2103-t14-3.github.io./main/team/akimatsu98.html[Personal Portfolio Page]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Responsibilities: User Interface, Help command, add command, delete command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Jolyn Tan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "image::jolynnn8d.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "{empty}[https://github.com/jolynnn8D[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "{empty}[https://ay1920s1-cs2103-t14-3.github.io./main/team/jolynnn8d.html[Personal Portfolio Page]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Responsibilities: List command, edit command, flip command, Quiz command, Quiztag command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Liang Boyuan"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "image::oscar-b-liang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "{empty}[https://github.com/Oscar-B-Liang[github]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "{empty}[https://ay1920s1-cs2103-t14-3.github.io./main/team/oscar-b-liang.html[Personal Portfolio Page]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Responsibilities: Edit Command, find command, Integration, general structure,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "updating docs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Ling Zhi Wei"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "image::lzw12345.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "{empty}[https://github.com/lzw12345[github]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "{empty}[https://ay1920s1-cs2103-t14-3.github.io./main/team/lzw12345.html[Personal Portfolio Page]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Responsibilities: Quiz command, stats command, user interface for progress graphs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 23,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T14-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* *Email us* : You can also reach our team members at:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Jolyn: `jolyn.tan.sq @ u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Zhi Wei: `e0031605 @ u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Songchi: `e0322951 @ u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Boyuan: `e0253688 @ u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "jolynnn8D": 9
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d FlashMind - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-3/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "By: `Team CS2103-T14-3`      Since: `Nov 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/flashcard/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/flashcard/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/flashcard/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `FlashcardListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/flashcard/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "// tag::logic[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "link:{repoURL}/src/main/java/seedu/flashcard/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ".  `Logic` uses the `FlashcardListParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a Flashcard)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "// end::logic[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "// tag::model[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/flashcard/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* stores the Flashcard List data."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFlashcard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* also exposes a statistics object to the ui to create the statistic charts ."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "// end::model[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/flashcard/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* can save the Flashcard data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Classes used by multiple components are in the `seedu.flashcard.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// tag::quizdiagram[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Quiz and Flip feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "In the flashcard system, quiz and flip is a special function that can help the user quiz themselves on the flashcards and see"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "there own improvements. The flip command, which is answering the quizzed flashcard, can only be used when a current flashcard is being quizzed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "The following sequence diagram shows how the quiz and flip diagram works."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ".Component interactions for quiz command on a single flashcard"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "image::QuizSequenceDiagram.png[]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Stats feature"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "After a series of quizzes, each flashcard can automatically record how many correct answers and wrong answers has the user did on this flashcard."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "The stats command helps the user to see their progress while doing the quizzes. Below is a sequence diagram of how this command"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "works."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ".Component interactions for stats command"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "image::StatsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// end::quizdiagram[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "// tag::quiztagfeature[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d\u003d Quiz Tag feature"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Alternatively, users can choose to quiz a series of tags instead of a single card."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "A list of flashcards will then be added to the list of quizable cards,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "which also triggers quiz mode, allowing users to use the flip command to answer flashcards consecutively."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "The following sequence diagram shows how the quiztag command works:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ".Component interactions for any quiztag command"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "image::QuizTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Calling a quiztag command triggers the quiz mode, which is stored as a boolean in the FlashcardListParser."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "This is done with the consideration that there are different functions that can start the quiz mode (i.e quiz, quiztag),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "and others that can end the quiz mode (i.e flip, end, exit)."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "During quiz mode, the flip command can be called consecutively for as long as there are flashcards left in the quiz, as shown below:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ".Flip command running and interact with the parser to toggle quiz mode"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "image::FlipSequenceDiagram.png[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "The flip command interacts with the model to check if there are any quizable flashcards."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "If there are none, the flip command toggles the quiz mode in FlashcardListParser off."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "// end::quiztagfeature[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d  Undo/Redo feature"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedFlashcardList`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "It extends `FlashcardList` with an undo/redo history, stored internally as an `flashcardListStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `VersionedFlashcardList#commit()` -- Saves the current flashcard list state in its history."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `VersionedFlashcardList#undo()` -- Restores the previous flashcard list state from its history."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `VersionedFlashcardList#redo()` -- Restores a previously undone flashcard list state from its history."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitFlashcardList()`, `Model#undoFlashcardList()` and `Model#redoFlashcardList()` respectively."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedFlashcardList` will be initialized with the initial flashcard list state, and the `currentStatePointer` pointing to that single flashcard list state."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th Flashcard in the flashcard list. The `delete` command calls `Model#commitFlashcardList()`, causing the modified state of the flashcard list after the `delete 5` command executes to be saved in the `flashcardListStateList`, and the `currentStatePointer` is shifted to the newly inserted flashcard list state."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Step 3. The user executes `add q/What is a machine ...` to add a new Flashcard. The `add` command also calls `Model#commitFlashcardList()`, causing another modified flashcard list state to be saved into the `flashcardListStateList`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "If a command fails its execution, it will not call `Model#commitFlashcardList()`, so the flashcard list state will not be saved into the `flashcardListStateList`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Step 4. The user now decides that adding the flashcard was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoFlashcardList()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous flashcard list state, and restores the flashcard list to that state."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial flashcard list state, then there are no previous flashcard list states to restore. The `undo` command uses `Model#canUndoFlashcardList()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoFlashcardList()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the flashcard list to that state."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "If the `currentStatePointer` is at index `flashcardListStateList.size() - 1`, pointing to the latest flashcard list state, then there are no undone flashcard list states to restore. The `redo` command uses `Model#canRedoFlashcardList()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the flashcard list, such as `list`, will usually not call `Model#commitFlashcardList()`, `Model#undoFlashcardList()` or `Model#redoFlashcardList()`. Thus, the `flashcardListStateList` remains unchanged."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire flashcard list."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the flashcard being deleted)."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct. There will be a lot coding involved and a higher chance of regression bugs."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of flashcard list states."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Pros: It has a very clear structure and is therefore easy for future developers to update."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Cons: It might be difficult to navigate between different elements in the list. However, that\u0027s not really a big issue as we only need to move to neighbouring states each time."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "// tag::quizmodedc[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Quiz Mode"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* **Alternative 1 (current choice):** A static boolean is stored in the FlashcardListParser to indicate whether the application"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "is currently in quiz mode. Being in quiz mode allows access to some commands and disables others."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Pros: It is easy to toggle Quiz mode on and off from the various commands as it is a static boolean and can be accessed easily."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Cons: It violates the Single Responsibility Principle as the parser now stores information vital to the logic of the application, besides parsing arguments."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* **Alternative 2:** Store the Quiz mode boolean inside Logic Manager."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Pros: It adheres better to software engineering principles as variables affect the logic of the programme should be stored in the logic manager."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Cons: As Quiz mode heavily affects the parsing of the commands, the boolean has to be passed to and fro several layers, making it harder for commands to toggle quiz mode on and off."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "// end::quizmodedc[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* needs to memorize a large amount of discrete knowledge like vocabulary"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* want to check his/her progress over a period of time"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*Value proposition*: manage short knowledge like vocabulary faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* * *` |user |add a new flashcard |"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* * *` |user |delete a flashcard |remove flashcards that I have already firmly memorized"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* * *` |user |find a flashcard by keywords in its question or answer |locate details of flashcards without having to go through the entire list"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* * *` |user |tag the flashcards |group them based on their fields"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* * *` |user |start a quiz |train myself on the flashcards"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* * *` |user |see my statistics over time | I know what parts I need to train more, what parts I am weak at"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* *` |user |edit a flashcard |do adjustment on the cards instead of typing the question and answer all over again"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* *` |user |import flashcards from other documents |add a lot of questions into the system without typing them one by one"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* *` |user |set time limit to each flashcard |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`* *` |user |set up a deadline to train on each set of flashcards |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`*` |user with many flashcards in the flashcard list |sort flashcards by name |locate a flashcard easily"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`*` |user |automatically judge my answer to my short answer question |I can know how well I am doing"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|`*` |user |automatically decide duplicate flashcard |I will add same flashcard into the system multiple times"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "(For all use cases below, the *System* is the `FlashcardList` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 - View all the flashcards"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1.  User requests to view all existing flashcards by using correct command line input."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2.  FlashMind shows a list of all existing flashcards."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* 1a. The flashcard list is empty."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 - Delete a flashcard"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1.  User [.underline]#views all flashcards (UC01)#."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2.  User locates the correct index of the flashcard he/she wants."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "3.  User request to delete the flashcard with the specific index number."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "4.  FlashMind deletes the flashcard."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** 2a1. FlashMind shows an error message."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Tag a flashcard"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1.  User [.underline]#views all existing flashcards (UC01)#."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2.  User identifies the index of the particular flashcard that he/she wants to tag."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "3.  User tags the flashcard with provided tag names."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "4.  FlashMind creates new tags with the given tag names and put the flashcard under these tags."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* 2a. The given tag already exist, but the target flashcard is not under this tag yet."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** 2a1. FlashMind puts the given flashcard under the existing tag instead of creating a new tag."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* 2b. The target flashcard is already under the given tag."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** 2b1. FlashMind shows an error message."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* 2c. The input flashcard index number is invalid."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** 2c1. FlashMind shows an error message."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "// tag::usecases[]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 - edit a flashcard"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1. User [.underline]#views all existing flashcards (UC01)#."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2. User identifies the index of the particular flashcard that he/she wants to edit."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "3. User request to edit the question, tag or answer of a flashcard."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "4. FlashMind updates the question, tag or answer on the specific flashcard."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* 2a. The requested question or answer is in wrong format"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** 2a1. FlashMind shows an error message including the constraints of the question and answer."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* 2b. The input flashcard index number is invalid"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** 2b1. FlashMind shows an error message."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d Use case: UC05 - find all flashcards with particular tags"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1. User request to list all the flashcard sets with the same tags by inputting these tags."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2. FlashMind shows a list of all current flashcards with the provided tags."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* 2a. The tag is empty or does not exist."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** 2a1. System displays an error message."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "user case ends."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "// end::usecases[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - delete a tag"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1. User requests to delete a particular tag by inputting the name of that tag."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2. FlashMind deletes the tag from all flashcards with this tag and delete it from the tag list. Also, all flashcards with that tag are not removed."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* 4a. The tag user wants to delete does not exist."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** 4a1. FlashMind shows an error message."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "+"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d Use case: UC07 - Start a quiz on a flashcard"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Precondition: The tag exists in the database"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1. User [.underline]#views all existing flashcards (UC01)#."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "2. User starts a quiz on a particular flashcard by providing its index."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "3. FlashMind displays the question on that flashcard."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "4. User carries out the quiz by providing an answer to that question."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "5. FlashMind displays result."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "6. User confirms the result."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "7. Quiz ends."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* 3a. User does not give an answer"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** 3a1. FlashMind waits for 15 seconds"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** 3a2. User still has no answer"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Flashcard will be skipped or marked as wrong."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* *a. At any time, User decides to end the quiz"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** *a1. FlashMind  requests to confirm the cancellation."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** *a2. User confirms the cancellation."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** use case ends"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d Use case: UC08 - Start a quiz on a set of flashcards with the same tag"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Precondition: The tag exists in the database"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1. User [.underline]#views all existing flashcards (UC01)#."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2. User identifies a particular tag that he/she wants to quiz on."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "3. User starts a quiz on that tag by providing the tag name."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "4. FlashMind shows the question of the first flashcard."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "5. User answers the question by providing a response."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "6. FlashMind displays result."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "7. User confirms the result."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* steps 2-5 are repeated until all the flashcard in the tag have been quizzed."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "8. Quiz ends."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* 3a. User does not give an answer"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** 3a1. FlashMind waits for 15 seconds."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** 3a2. User still has no answer"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Use case resumes from step 4 (flashcard is skipped or marked as wrong)"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* *a. At any time, User decides to quit the quiz"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** *a1. FlashMind  requests to confirm the cancellation."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** *a2. User confirms the cancellation."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** use case ends"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d Use case: UC09 - Undo/redo a flashcard list change"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Precondition: There is an actual change that happened to the flashcard list."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1. User inputs either undo or redo command to get back the previous or previous undone state of flashcard list."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2. FlashMind displays the undone/redone flashcard card list to the user."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* 1a. There is no undoable/redoable state available"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** 1a1. FlashMind displays error message."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d Use case: UC10 - View all the available commands"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "1.  User enters `help` to ask FlashMind for all the commands."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "2.  System responds by providing all the available commands."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "// tag::statsusecase[]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d\u003d Use case: UC11 - View the statistics of flashcards"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "1.  User enters `stats` to ask FlashMind to show stats of all cards"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "2.  System displays the statistics of the selected flashcards in a new window"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "+"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* 1a. User enters `stats [t/Tag]` to ask FlashMind to show stats of cards under specified tags."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "+"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* 2a. The tag is empty or does not exist."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "+"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** 2a1. System displays an error message."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "use case ends."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "// end::statsusecase[]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ".  Should be able to hold up to 1000 flashcards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ".  If the stored flashcard list is very long, all commands should still be executed at a fast speed, with minimal sluggishness."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ".  Should be able to minimize loss of stored flashcard information if the app closes due to unforeseen external circumstances."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ".  Command format should be easily understandable and intuitive to make it easier then using a GUI interface"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[[flashcard]] Flashcard::"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "A digital card that contains a short piece of information like an English word or a geography common knowledge. Normally used by people to facilitate the memorization process."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d\u003d Deleting a flashcard"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ". Deleting a flashcard  while all flashcards (in a tagged set/in the all-flashcard list) are listed"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ".. Prerequisites: List all flashcards using the `list` command. Multiple flashcards in the list."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "   Expected: First flashcard with ID 1 is deleted from the list."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "   Expected: No flashcard is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size or ID number is negative)"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ".. Manually make a Json file with invalid fields and see if FlashMind can identify these issues or not."
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 218,
      "lzw12345": 20,
      "Akimatsu98": 124,
      "-": 323,
      "jolynnn8D": 38
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d FlashMind - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "-": 122
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d FlashMind - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "By: `CS2103 T14-3`      Since: `Nov 2019`      License: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashMind helps students to use their time breaks to memorize things"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "like vocabulary and some general knowledges, especially those who prefer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "command line interface (CLI) over clicks. Everything is organized into"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "flashcards, each contain one question. Users can also tag the flashcards"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "to group them and see their progress over time through statistics."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ".  Download the latest `FlashMind.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your flashback."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* *`list`* : lists all flashcards"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* *`add q/How long is Mount Blanc Tunnel? a/11611m d/An amazing tunnel on the boarder of France and Italy`*: Add a flashcard about Mount Blanc Tunnel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* **`delete`**`3` : deletes the flashcard with index 3 on the listed flashcards."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add q/QUESTION`, `QUESTION` is a parameter which can be used as `add q/How long is Mount Blanc Tunnel?`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* All commands are case sensitive and should be in its lowercase."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Items in square brackets are optional e.g `q/QUESTION [t/TAG]` can be used as `q/How long is Mount Blanc Tunnel? t/geography` or as `q/How long is Mount Blanc Tunnel?`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/geography`, `t/geography t/civil engineering` etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `q/QUESTION a/ANSWER`, `a/ANSWER q/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* To view all the available commands that the user can use. Use help command +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// tag::basic[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Adding new flashcards"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Add a new flashcard and specify its question, definition, tags, choices and answer. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `add q/QUESTION d/DEFINITION [t/TAG]... [c/CHOICE]... a/ANSWER`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "****"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* QUESTION, DEFINITION and ANSWER must be provided while creating a flashcard, tags and choices are optional."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* If there are no choices specified in the flashcard, the system will generate a short answer flashcard. Otherwise,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  the system will generate an MCQ flashcard."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Note that during the quiz mode, to answer a short answer flashcard correctly, you must input an answer exactly match"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  answer you typed while this flashcard is created. Thus, be sure to provide enough information in QUESTION and DEFINITION"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  for you to figure out the exact correct answer."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Note that while creating an MCQ flashcard, the answer is the input for your correct choice, not just a number."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  If the answer you input does not match any of the choices, the system will tell you this flashcard is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  Please refer to the following examples for a better understanding."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "****"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `add q/What is the tallest mountain in the world? d/This mountain is on the boarder of China and Nepal. a/Mount Everest` :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  Creates a new short answer flashcard with the given question, definition and answer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* `add q/What is the tallest mountain in the world? d/This mountain is on the boarder of China and Nepal. c/Mountain Everest"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  c/Mount Blanc c/Shkhara c/Bukit Timah a/Mountain Everest` : Creates a new MCQ flashcard with the given question, definition choices and answer."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* `add q/What is the tallest mountain in the world? d/This mountain is on the boarder of China and Nepal. c/Mountain Everest"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  c/Mount Blanc c/Shkhara c/Bukit Timah a/Alps` : Since the answer you input does not match with any of the choices, the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  system will generate an error message."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Listing all flashcards"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Shows a list of all existing flashcards in the system. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Listing all flashcard by tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Shows a list of all flashcard under given tag names. If there are no flashcards under the input tag name, you should see"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "an empty flashcard list being displayed. Note you can list multiple tags at the same time. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `listbytag t/TAG...`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* At least on tag needs to be specified after keyword `listbytag`, otherwise the system will show an error message."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `listbytag t/mathematics` : List all flashcards under the tag mathematics."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `listbytag t/mathematics t/geography` : List all flashcards under the tag mathematics OR the tag geography."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Listing all tags"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Show the list of tags exists in the system. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `listtag`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Editing a flashcard"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Edits an existing flashcard in the address book. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `edit INDEX [q/QUESTION] [a/ANSWER] [d/DEFINITION] [t/TAG]... [c/CHOICE]...`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* INDEX is the index of this target flashcard in the displayed list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Note that while updating choices or tags, they are updated together. This means, assume you have 4 choices for"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  flashcard number 2, then you typed `edit 2 c/Mount Blanc`, then there will be only one choice left for flashcard number 2,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  which is Mount Blanc. The same applies when editing tags."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* While editing the answer for an MCQ flashcard, still ensure that the updated answer matches any one of the choices."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `edit 5 q/What is the tallest mountain?` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Edits the question of the card with index 5 to \"What is the tallest mountain?\"."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `edit 5 a/Mount Everest`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Edits the answer of the card with number 5 to \"Mount Everest\"."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// end::basic[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d\u003d Quiz mode"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Starts a quiz using a particular flashcard index or with a with an optional time limit with units in seconds. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `quiz INDEX [s/TIME_LIMIT]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Start a quiz using the flashcard with given index."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* User can answer the flashcard using the `flip` command (see 3.8)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* If the quiz is not answered within the time limit, FlashMind will skip the quiz and mark it as wrong."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* If the quiz time is not specified, the default time limit will be 15 seconds."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `quiz 8`: start a quiz on the flashcard number 8 with a default time limit of 15 seconds."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `quiz 8 t/10` : start a quiz on the flashcard number 8, given time limit 10 seconds."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "NOTE: Once a quiz starts, users will be unable to use other commands such as add, list or delete."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "To exit quiz mode, either answer the flashcard or use `end`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d\u003d Quiz Tag mode"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Starts a continuous quiz on a tag or a series of tags and an optional time limit with units in seconds. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `quiztag t/TAG... [s/TIME_LIMIT]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Starts a continuous quiz on all flashcards in the given tags"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Users can continuously use the `flip` command to answer the series of flashcards (see 3.8)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* If the quiz time is not specified, the default time limit will be 15 seconds."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `quiztag t/mathematics t/geography` : start a quiz on all the flashcards with tag `mathematics` and `geography`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `quiztag t/mathematics s/30` : start a quiz on all flashcards with tag `mathematics` with each quiz a time limit of 30 seconds."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d\u003d Flip a flashcard"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "NOTE: Only usable in quiz mode (i.e after a quiz or quiztag command)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Format: `flip ANSWER`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Short answer flashcards will accept any answer."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* MCQ flashcards will only accept numbers as an answer. The number must match an index of the choices."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Example 1: MCQ Flashcard"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "After `quiztag t/geography`, the flashcard below is shown:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "What is the tallest mountain in the world?"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Definitions: The answer is Mount Everest."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Tags: [geography]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Choices:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "1. Mount Fuji"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "2. Mount Everest"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "The user can type `flip 2` to answer the flashcard correctly."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Example 2: Short Answer Flashcard"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "What is the lowest playing register of the clarinet called?"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Definitions: Range of E3 to Bb4"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Tags: [music]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "The user will then type `flip Chalumeau` to answer the flashcard correctly."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "After using the `flip` command, users should receive feedback on whether they\u0027ve answered the flashcard correctly."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "If the answer was wrong, the correct answer will be provided. The scores of the flashcard will then be updated accordingly."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d\u003d End quiz mode"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "NOTE: Only usable in quiz mode(i.e after a quiz or quiztag command)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Format: `end`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* Used to end a quiz if the user wants to stop the quiz without answering the flashcard"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "// tag::stat[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d\u003d Skip Flashcards in Quiz"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "NOTE: Only usable in quiz mode (i.e after a quiz or quiztag command)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "Format: `skip`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "****"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "*Used to skip a flashcard during a quiz if the user does not know the answer or want to answer"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "****"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d\u003d Display current progress"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Shows the current progress of a set of flashcards. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `stats [t/TAG]...`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* Statistics shown include number of completed cards and accuracy"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* Multiple TAG\u0027s can be added to combine statistics of multiple sets"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* If no TAG is provided statistics of all the cards will be shown"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "****"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `stats t/biology` : Displays the progress of a the flashcards tagged with Biology."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "// end::stat[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// tag::basic2[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Delete a flashcard"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "Deletes the specified flashcard from the list of all flashcards. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Deletes the flashcard with the specified `INDEX`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "****"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `delete 5` : Removes the flashcard with index 5 in the list."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Finding a flashcard"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Find a flashcard based on the keyword in its question, definition or answer. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "****"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* The key word must not be empty."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "****"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* `find Blanc` : Find flashcards whose question or answer contains string \"Blanc\"."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// end::basic2[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Undo \u0026 Redo"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Suppose you delete, add or edit a flashcard with a mistake, you can use undo to bring yourself back to the previous stage."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "If you did an Undo command by mistake, you can also use Redo command to undo an Undo Command. Note that Undo and Redo can only take affect"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "for flashcard modifications, it cannot undo your quiz result."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `Undo`, `Redo`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// tag::basic3[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Exiting the program"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Format: `exit` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Special Notation: We strongly recommend you to exit FlashMind using `exit` command instead of directly closing the window."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "The reason is, if you directly close the window, you might lose some of the progress you made in this session. That is, some of the"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "quiz scores might not be saved. Through `exit` command, all of your quiz results will be saved properly."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Flashcards are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "There is no need to save manually. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "After the data is saved, do not modify any of the Json files manually. You might end up screwing up all the information stored in them."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "If unfortunately, you did manually change the Json file and found the FlashMind operating with any problem, the only suggestion we"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "can give you is to delete the file flashcardlist.json, so the system will start with default flashcard list again."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "// end::basic3[]"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 123,
      "lzw12345": 21,
      "-": 101,
      "jolynnn8D": 66,
      "Akimatsu98": 3
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteFlashcard(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveFlashcardList(FlashcardList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardList *-right-\u003e \"1\" UniqueFlashcardList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardList *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "UniqueTagList -[hidden]down- UniqueFlashcardList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "UniqueTagList -[hidden]down- UniqueFlashcardList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "UniqueFlashcardList o-right-\u003e Flashcard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Flashcard o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Flashcard *--\u003e Question"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Flashcard *--\u003e Definition"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Flashcard *--\u003e Answer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Flashcard *--\u003e Score"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 10,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "if () then ([command commits FlashcardList])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    :Save Flashcard to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    FlashcardStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \":FlashcardListParser\" as FlashcardListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "LogicManager -\u003e FlashcardListParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate FlashcardListParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "DeleteCommandParser --\u003e FlashcardListParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "DeleteCommandParser --\u003e FlashcardListParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e FlashcardListParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate FlashcardListParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "DeleteCommand -\u003e Model : deleteFlashcard(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/FlipSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \":FlashcardListParser\" as FlashcardListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \"nextFlipCommand:FlipCommand\" as FlipCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \"cr:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \"quizCard:Flashcard\" as Flashcard MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "loop FlashcardListParser.quizMode \u003d true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    [--\u003e FlipCommand : execute()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    activate FlipCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    FlipCommand -\u003e Model : getQuiz().quizCard()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    Model -\u003e FlipCommand : quizCard"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    FlipCommand -\u003e Flashcard : checkAnswer(answer)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    activate Flashcard"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    alt answer is correct"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard -\u003e Flashcard : incrementCorrectAnswer()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        activate Flashcard"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        deactivate Flashcard"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    else answer is wrong"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard -\u003e Flashcard : incrementWrongAnswer()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        activate Flashcard"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        deactivate Flashcard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    Flashcard --\u003e FlipCommand : isCorrect:boolean"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    deactivate Flashcard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    create CommandResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    alt quiz is not empty"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        FlipCommand -\u003e CommandResult : result, nextCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        activate CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        CommandResult --\u003e FlipCommand : cr"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        deactivate CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    else quiz is empty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "         FlipCommand -\u003e FlashcardListParser : setQuizMode(false)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "         activate FlashcardListParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "         FlashcardListParser --\u003e FlipCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "         deactivate FlashcardListParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "         FlipCommand -\u003e CommandResult : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "         activate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "         CommandResult --\u003e FlipCommand : cr"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "         deactivate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    end"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "end"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "[\u003c-- FlipCommand : cr"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate FlipCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 79
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class FlashcardListParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package Storage{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "LogicManager --\u003e\"1\" FlashcardListParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "LogicManager -left-\u003e Storage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 8,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Interface ReadOnlyFlashcardList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class FlashcardList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class ReadOnlyFlashcardList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class Statistics"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Package Flashcard {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class \"{abstract}\\nFlashcard\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class Question"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class Answer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class Definition"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class Score"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class Choice"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class UniqueFlashcardList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class McqFlashcard"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class ShortAnswerFlashcard"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardList .up.|\u003e ReadOnlyFlashcardList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "ModelManager o--\u003e \"1\" FlashcardList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "ModelManager o-right-\u003e \"1\" Statistics"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "McqFlashcard ..|\u003e \"{abstract}\\nFlashcard\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "ShortAnswerFlashcard ..|\u003e \"{abstract}\\nFlashcard\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardList *--\u003e \"1\" UniqueFlashcardList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "UniqueFlashcardList o--\u003e \"*\" \"{abstract}\\nFlashcard\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\"{abstract}\\nFlashcard\" *--\u003e Question"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\"{abstract}\\nFlashcard\" *--\u003e Answer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\"{abstract}\\nFlashcard\" *--\u003e Definition"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\"{abstract}\\nFlashcard\" *--\u003e Score"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\"{abstract}\\nFlashcard\" *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "McqFlashcard *--\u003e \"*\" Choice"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "ModelManager --\u003e\"*\" \"{abstract}\\nFlashcard\" : filtered list\\n currently viewing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 32,
      "-": 29
    }
  },
  {
    "path": "docs/diagrams/QuizSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \"d1:QuizCommand\" as QuizCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \"d2:FlipCommand\" as FlipCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \"cr1:CommandResult\" as CommandResult1 LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \"cr2:CommandResult\" as CommandResult2 LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \"quizCard:Flashcard\" as Flashcard MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[-\u003e QuizCommand: execute()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate QuizCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "QuizCommand -\u003e Model:getFilteredFlashcardList()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Model --\u003e QuizCommand: lastShownList: List\u003cFlashcard\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "QuizCommand -\u003e Model : updateLastViewedFlashcard(quizCard)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Model --\u003e QuizCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "create CommandResult1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "QuizCommand -\u003e CommandResult1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate CommandResult1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "CommandResult1 -\u003e Flashcard : toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate Flashcard"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Flashcard --\u003e CommandResult1 : s:String containing the flashcard"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate Flashcard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "CommandResult1 --\u003e QuizCommand : cr1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate CommandResult1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[\u003c-- QuizCommand : cr1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate QuizCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[--\u003e FlipCommand : execute()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate FlipCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlipCommand -\u003e Flashcard : checkAnswer()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate Flashcard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "alt answer is correct"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Flashcard -\u003e Flashcard : incrementCorrectAnswer()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    activate Flashcard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate Flashcard"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "else answer is wrong"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Flashcard -\u003e Flashcard : incrementWrongAnswer()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    activate Flashcard"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate Flashcard"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "end"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Flashcard --\u003e FlipCommand : isCorrect:boolean"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate Flashcard"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "create CommandResult2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlipCommand -\u003e CommandResult2"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate CommandResult2"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "CommandResult2 --\u003e FlipCommand : cr2"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate CommandResult2"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[\u003c-- FlipCommand : cr2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate FlipCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 82
    }
  },
  {
    "path": "docs/diagrams/QuizTagSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \":FlashcardListParser\" as FlashcardListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \":QuizTagCommandParser\" as QuizTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \"nextQuizCommand:QuizTagCommand\" as QuizTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \"cr:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "[-\u003e FlashcardListParser: parseCommand(quiztag ...)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate FlashcardListParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "FlashcardListParser -\u003e FlashcardListParser: setQuizMode(true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate FlashcardListParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate FlashcardListParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "FlashcardListParser -\u003e QuizTagCommandParser : parse(arguments)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate QuizTagCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "create QuizTagCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "QuizTagCommandParser -\u003e QuizTagCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate QuizTagCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "QuizTagCommand --\u003e QuizTagCommandParser : nextQuizCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate QuizTagCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "QuizTagCommandParser --\u003e FlashcardListParser : nextQuizCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate QuizTagCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate FlashcardListParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "[-\u003e QuizTagCommand: execute()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate QuizTagCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "QuizTagCommand -\u003e Model:getFilteredFlashcardList(model.getHasTagPredicate(target))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Model --\u003e QuizTagCommand: filteredList: ObservableList\u003cFlashcard\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "QuizTagCommand -\u003e Model : setQuiz(filteredList)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Model --\u003e QuizTagCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "QuizTagCommand -\u003e Model: getQuiz().quizCard()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Model -\u003e QuizTagCommand: quizCard"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "QuizTagCommand -\u003e CommandResult: quizCard"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "CommandResult --\u003e QuizTagCommand : cr"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "[\u003c-- QuizTagCommand : cr"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "deactivate QuizTagCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 72
    }
  },
  {
    "path": "docs/diagrams/StatsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \"d:StatsCommand\" as StatsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \":Statistics\" as Statistics MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "[-\u003e StatsCommand : execute(target:Set\u003cTag\u003e)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate StatsCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "alt target is empty"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    StatsCommand -\u003e Model : updateFilteredFlashcardList()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Model --\u003e StatsCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "else target is nonempty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    StatsCommand -\u003e Model : getHasTagPredicate(target)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Model --\u003e StatsCommand : predicate:Predicate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    StatsCommand -\u003e Model : updateFilteredFlashcardList(predicate)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Model --\u003e StatsCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "end"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "StatsCommand -\u003e Model : getFilteredFlashcardList().size()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Model --\u003e StatsCommand : listSize:int"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "alt listSize \u003d\u003d 0"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    [\u003c-- StatsCommand : CommandResult(MESSAGE_FAILED)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "else listSize \u003e 0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    StatsCommand -\u003e Model : generateStatistics()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Model -\u003e Statistics : calculate(filteredFlashcards)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    activate Statistics"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Statistics --\u003e Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate Statistics"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Model -\u003e Statistics : results()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    activate Statistics"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Statistics --\u003e Model : result:String"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate Statistics"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Model --\u003e StatsCommand : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    [\u003c-- StatsCommand : CommandResult(result)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    deactivate StatsCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "end"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 75
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Interface FlashcardListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class JsonFlashcardListStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "StorageManager o--\u003e FlashcardListStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "JsonFlashcardListStorage .left.|\u003e FlashcardListStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "JsonFlashcardListStorage .down.\u003e JsonSerializableFlashcardListStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "JsonSerializableFlashcardListStorage .right.\u003e JsonSerializableFlashcard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "JsonSerializableFlashcardList .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class FlashcardListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Class FlashcardCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "MainWindow *-down-\u003e FlashcardListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListPanel -down-\u003e FlashcardCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State1 as \"__ab0:FlashcardList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State2 as \"__ab1:FlashcardList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State3 as \"__ab2:FlashcardList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State1 as \"__ab0:FlashcardList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State2 as \"__ab1:FlashcardList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State3 as \"__ab2:FlashcardList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State1 as \"__ab0:FlashcardList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State2 as \"__ab1:FlashcardList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State3 as \"__ab2:FlashcardList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State1 as \"__ab0:FlashcardList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State2 as \"__ab1:FlashcardList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State3 as \"__ab2:FlashcardList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State1 as \"__ab0:FlashcardList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State2 as \"__ab1:FlashcardList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State3 as \"__ab2:FlashcardList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State1 as \"__ab0:FlashcardList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State2 as \"__ab1:FlashcardList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class State3 as \"__ab3:FlashcardList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "note right on link: State fl2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \":FlashcardListParser\" as FlashcardListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "participant \":VersionedFlashcardList\" as VersionedFlashcardList MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "LogicManager -\u003e FlashcardListParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate FlashcardListParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "UndoCommand --\u003e FlashcardListParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashcardListParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate FlashcardListParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "UndoCommand -\u003e Model : undoFlashcardList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "Model -\u003e VersionedFlashcardList : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "activate VersionedFlashcardList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "VersionedFlashcardList -\u003e VersionedFlashcardList :resetData(ReadOnlyFlashcardList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "VersionedFlashcardList --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "deactivate VersionedFlashcardList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 14,
      "-": 39
    }
  },
  {
    "path": "docs/team/akimatsu98.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d He Songchi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d PROJECT: FlashMind"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "FlashMind enables users to organize pieces of information in the form of flashcards, review and tests them in order to absorb knowledge in a very productive manner. The program features an commandline interface (CLI)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* *First major enhancement*: added *the ability to undo/redo commands whenever there is a change to the flashcard list.*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** What it does: Allows the flashcard list to be reverted back to its previous state or restored back to its undone state."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Justification: This feature improves the product significantly because it is very likely that the user might input something wrong, accidentally deleted all tags and so forth. This provides them with a very easy way to get back what they want."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Highlights: This feature, although not challenging conceptually, is quite time-consuming as I needed to do a lot of refactoring of code to ensure that the undo/redo feature is compatible with all our existing commands, and it turned out that many bugs emerged after adding this command and I spent a lot of time debugging to ensure that this feature becomes bug-free and fully integrated into our program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Credits: The overall undo/redo concept was borrowed from AddressBook 4 and besides lines of new coded added, many of the codes are adapted from its code base."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* *Second major enhancement*: redesigned *the GUI layout and colour scheme*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** What it does: Recreated the graphical user interface, which is divided into various sections, each responsible for a particular function."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Justification: This feature is quite important as it allows future features to be added and integrated smoothly and also it is a major shift away from the original Address Book GUI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Highlights: This feature requires some good understanding of the GUI design and a little bit of CSS knowledge. As a freshman who has no previous experience with GUI, I actually spent hours on this."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Constantly updating GUI to ensure that it has higher usability and fewer bugs, such as the resizability issue."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* *Code contributed*:Click on the link [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dakimatsu98\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByAuthors\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026tabAuthor\u003dOscar-B-Liang\u0026tabRepo\u003dAY1920S1-CS2103-T14-3%2Fmain%5Bmaster%5D[link]] to view my code contributions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "*** Documented the undo/redo feature in the Developer Guide."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "*** Contributed and modified the majority of the use cases in the Developer Guide."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecases]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003d\u003d PROJECT: FlashMind"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "---"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 51
    }
  },
  {
    "path": "docs/team/jolynnn8d.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d Jolyn Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d PROJECT: Flashmind"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "Flashmind is a CLI-based flashcard app designed to help students memorise and revise important content."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "It is used mainly for questions that can be answered with a short answer or several MCQ choices."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* *Major enhancement*: added *the ability to start a quiz on a series of flashcards*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** What it does: Allows the user to start a timed quiz on a series of flashcards based on their tags. Users are able to choose one or multiple tags to quiz themselves on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Justification: This feature is a great enhancement for users who are looking to memorise content. Instead of just looking at the flashcard, users are able to test themselves in a timed condition and receive feedback from the system on whether their answer is correct."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Highlights: This enhancement required a holistic understanding of how commands are received. The quiz function required an implementation of quiz mode, which locks certains command and allows a new set of commands to be executed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Credits: My teammate, Zhi Wei, helped to implement the timer in the quiz mode."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* *Major enhancement*: added *the ability to add two different types of flashcard: MCQ and ShortAnswer*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** What it does: Allows the user to choose whether they want their flashcard to have MCQ options or simply be a short answer flashcard."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Justification: This feature enhances the user\u0027s learning experiences as flashcards are now more versatile, allowing users to have MCQ options for questions that are harder to remember."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Highlights: This enhancement required a modification of storage, as well as a refactoring of the code to distinguish between MCQ and Short Answer flashcards."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Split up the UI to return consecutive flashcards and the result to different displays."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djolynnn8D\u0026tabRepo\u003dAY1920S1-CS2103-T14-3%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djolynnn8D\u0026tabRepo\u003dAY1920S1-CS2103-T14-3%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "*** Updated relevant sections of User Guide for all commands in quiz mode: https://github.com/AY1920S1-CS2103-T14-3/main/pull/85[#85]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "*** Reviewed PR for treasurerPro (tP) (with non-trivial review comments): https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/30[#30]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogic]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquiztagfeature]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|_Given below is a design consideration that I\u0027ve included in the Developer Guide for a feature implemented._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquizmodedc]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003d\u003d PROJECT: Flashmind"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 73
    }
  },
  {
    "path": "docs/team/lzw12345.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d Ling Zhi Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d PROJECT: Flashmind"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "Flashmind is a flashcard program to help users memorise content. FlashMind has a GUI with an easy to use commandline interface(CLI) . It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* *Major enhancement*: added *the ability to generate statistics about the flashcards along with an accompanying UI*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** What it does: Allows the user to generate statistics about cards by tag or overall. Displays information in a helpful graphical information as well as in text"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Justification: This feature improves the product significantly because the user might want to track the progress of his learning experience."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Highlights: This enhancement required some architecture changes to allow statistics information to communicated to the UI . It required an in-depth analysis of  UI design alternatives. The implementation was challenging due to communication between the GUI to detailed information and creating a separate window with graphics."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* *Major enhancement*: added *the ability to add choices to flashcard*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** What it does: Allows the user to add a list of choices to the flashcard."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Justification: This feature improves the product significantly because the user can now create multiple choice flashcards which greatly improves versatility and ."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* *Major enhancement*: added *a timer to the quiz mode*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** What it does: Allows the user to have timed quizzes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Justification: This feature improves the product significantly because the user can simulate test environments with the quiz system adding a new layer of functionality ."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of UI design. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Major changes to UI to fix the majority of the bugs and improved usability."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Added the ability to skip cards in quiz with a skip command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 61% to 70% in addition to other tests"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstat]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodel]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstatsusecase]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d Contributions to the README"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|_Given below are sections I contributed to the README. They showcase my ability to write documentation advertising the project._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "include::../../README.adoc[tag\u003ddescription]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003d\u003d PROJECT: Flashmind"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "---"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lzw12345": 79
    }
  },
  {
    "path": "docs/team/oscar-b-liang.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d Liang Boyuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ":imagesdir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ":stylesdir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d PROJECT: FlashMind"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "FlashMind is a desktop flashcard application which helps users memory short concepts and knowledge. For example,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "user can use to memorize vocabularies and some terms worth memorizing in particular subjects. This project was"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "inspired by the software engineering model where there are many not-so-well organized terms and principles students"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "needs to memorize. The user interacts with it using a CLI and it has a GUI created with javaFX. It is written in Java."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* *Major contribution*: Build the skeleton of the program with complete storage system, UI, basic structure of a flashcard and some basic commands. Future developments of this project"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "are all based on this skeleton."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** Justification: This piece of work can hardly be identified by users, but it is crucial. In the first week, we were working without"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "a skeleton so that our works all crashes into each other. Therefore, a fundamental skeleton was built first which gives us the space"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "and structure to improve further features and the user interface. The most important thing is that we effectively avoided conflicts"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "with each other\u0027s work."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** Highlights: I will not say this was a challenging task because the skeleton relied heavily with the AddressBook - Level 3 (AB3)\u0027s structure."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "However, it was a very troublesome and time consuming task. I spent a whole week doing nothing but eating, sleeping and coding to finish this skeleton."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** Credits: The structure heavily relied on AB3 structure, but an obvious modification in the structure of flashcards."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* *Second major contributions*: Maintaining the storage system of FlashMind. There are many cases where the user just somehow love"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "to modify the Json files. This can be fatal to MCQ flashcards since the user might encounter the situation where none of the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "choices in an Mcq flashcard which can match the answer. Thus, we applied defensive programming to avoid loading invalid MCQ flashcards."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* *Minor contributions*: Add *ListByTag*, *ListTag*, *DeleteTag* commands. Modified *Add* and *Edit* commands to fit into"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "our flashcard system."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** Justification: These newly added commands allows the user to manage their flashcard by certain tags. This will be very useful for"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "users who has a huge number of flashcards, especially for those who are memorizing vocabularies."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Code contributed: Click on the following [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003doscar-b-liang\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[link]] to view code contributions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "* Other contributions:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** Project management: Managed release v1.3 on Github. Took charge of integrating and resolving conflicts between team members\u0027 code."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "** Documentation: Made a significant contribution in the teams\u0027 User Guide and Developer\u0027s Guide. Updated most of the UML diagrams in the developer\u0027s guide."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbasic]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbasic2]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbasic3]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|_Given below are sections I contributed to the README. They showcase my ability to write documentation advertising the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "*I clearly clarify here that Quiz, Flip and Stats features are all NOT implemented by"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "me, they are implemented by my teammates. I simply drew the sequence diagrams of these features.*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquizdiagram]"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 68
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Save the logger and the default configuration file path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 65
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The entrance of the whole FlashMind Program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 13
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.FlashcardStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.JsonFlashcardListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Runs the application and controls the general execution logic of the whole program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FlashMind]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardStorage flashcardStorage \u003d new JsonFlashcardListStorage(userPrefs.getFlashcardListFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        storage \u003d new StorageManager(flashcardStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s flashcard list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The data from the sample flashcard list will be used instead if {@code storage}\u0027s flashcard list is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * or an empty flashcard will be used instead if errors occur when reading {@code storage}\u0027s flashcard list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Optional\u003cReadOnlyFlashcardList\u003e flashcardListOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ReadOnlyFlashcardList initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            flashcardListOptional \u003d storage.readFlashcardList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (!flashcardListOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with the default flashcard list.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            initialData \u003d flashcardListOptional.orElseGet(SampleDataUtil::getSampleFlashcardList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                + \"Will be starting with the default flashcard list.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            initialData \u003d SampleDataUtil.getSampleFlashcardList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                + \"Will be starting with the default flashcard list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            initialData \u003d SampleDataUtil.getSampleFlashcardList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.info(\"Starting FlashMind \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FlashMind ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.severe(\"Failed to save User preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            storage.saveFlashcardList(model.getFlashcardList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.severe(\"Fail to save flashcard list.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 188,
      "jolynnn8D": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Config values used by app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // TODO: Go and create this config.json file to represent the default config."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // TODO: Go and create this json file to represent the default user preferences."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof Config)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel) \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 62
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 74
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String LOG_FILE \u003d \"flashcard.log\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code Config} object)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Loggers obtained after this initialization will have their logging level changed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * is requested again from the {@code LogsCenter}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a logger for the given class name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Remove all handlers from {@code logger}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 109
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Container for several user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown Command.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_QUIZ_UNSUPPORTED_COMMAND \u003d \"Command not supported under quiz mode. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"Only flip, exit and end commands are currently valid.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_ID_NUMBER \u003d \"The index you entered is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_FLASHCARD_LISTED_OVERVIEW \u003d \"Flashcards listed.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_PARSE_ERROR \u003d \"There is something wrong with the command you entered.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 11,
      "jolynnn8D": 3,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 113
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 54
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent an error while converting data from one format to another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 11
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The signal that the given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param message should contain relevant information on the failed constraints."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 22
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A container for App specified utility functions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void checkArgument(boolean condition) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void checkArgument(boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 27
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Throws NullPointerException if any of the items is null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Throws NullPointerException if {@code items} ot anyu element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true of {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 37
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Stores all util functions for configuration related issues."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 23
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Saves the common utils for all file related issues."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 82
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/InvalidationListenerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 52
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Stores common util functions for all serialization related issues."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 142
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Contains all util functions for String related issues."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Question parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Question parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 66,
      "jolynnn8D": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 60
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Statistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * API of the logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param commandText The command as entered by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return the result of the command execution"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws CommandException if an error occurs during command execution"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException if an error occurs during parsing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the flashcard list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see seedu.flashcard.model.Model#getFlashcardList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    ReadOnlyFlashcardList getFlashcardList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get an unmodifiable view of the filtered list of flashcards"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the user prefs\u0027 flashcard list file path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Path getFlashcardListFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the user prefs\u0027 GUI settings"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * set user prefs\u0027 GUI settings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Get the desired statistics"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Get the current quiz mode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    boolean isQuiz();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *returns the duration ."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    IntegerProperty getDurationProperty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *returns the totalCards Property."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    IntegerProperty getTotalCardsProperty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * returns the remainingCards Property."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    IntegerProperty getRemainingCardsProperty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 53,
      "lzw12345": 34,
      "Akimatsu98": 6
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.FlashcardListParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Statistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The main logic manager of the system."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final FlashcardListParser flashcardListParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private boolean flashcardListModified;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcardListParser \u003d new FlashcardListParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // Set flashcardListModified to true whenever the models\u0027 flashcard list is modified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.getFlashcardList().addListener(observable -\u003e flashcardListModified \u003d true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        flashcardListModified \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command command \u003d flashcardListParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (flashcardListModified) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            logger.info(\"Flashcard List modified, saving to file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                storage.saveFlashcardList(model.getFlashcardList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ReadOnlyFlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return model.getFlashcardList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getFlashcardListFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return model.getFlashcardListFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Statistics getStatistics () {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return model.getStatistics();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean isQuiz() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return flashcardListParser.isQuizMode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty getDurationProperty() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return model.getDurationProperty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty getTotalCardsProperty() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return model.getTotalCardsProperty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty getRemainingCardsProperty() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return model.getRemainingCardsProperty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 70,
      "lzw12345": 30,
      "Akimatsu98": 25
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Command to add a new model."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to a flashcard list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"[\" + PREFIX_CHOICE + \"CHOICE]... \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + PREFIX_DEFINITION + \"DEFINITION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + PREFIX_QUESTION + \"Refactor \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + PREFIX_DEFINITION + \"An important concept for professional programmers \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + PREFIX_CHOICE + \"Make codes neater \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + PREFIX_CHOICE + \"Test for for bugs in the system \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + PREFIX_CHOICE + \"Change a mathematical formula \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + PREFIX_ANSWER + \"Make codes neater \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + PREFIX_TAG + \"Software Engineering \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the flashcard list!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Construct a new add flashcard command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param flashcard the flashcard to be added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public AddCommand (Flashcard flashcard) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Return the result from executing the add command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param model list of flashcards"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @return the execution result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @throws CommandException error encountered during execution of command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.commitFlashcardList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                || (other instanceof AddCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 39,
      "lzw12345": 3,
      "jolynnn8D": 6,
      "Akimatsu98": 29
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 18,
      "Akimatsu98": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Representing the feed back from a command. Contains information about the feedback to the user,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * whether it is an exit command or it is an help command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** show the user help message. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** Tell the system if it is an exit command.*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**Tell the system to show stats screen*/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final boolean showStats;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /** Tell the system if it is a flip command.*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final boolean flip;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /** Tell the system if it is a quiz command.*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final boolean quiz;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final String flashcardToDisplay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Construct a {@Code CommandResult} with all fields specified."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.showStats \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.flip \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.quiz \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.flashcardToDisplay \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *Construct a {@Code CommandResult} with all fields specified for show stats."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * to be merged with the above method"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showStats) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.showStats \u003d showStats;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.flip \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.quiz \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.flashcardToDisplay \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     *Construct a {@Code CommandResult} with all fields specified."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * to be merged with the above method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean flip, String flashcardToDisplay) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.showStats \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.flip \u003d flip;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.flashcardToDisplay \u003d flashcardToDisplay;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.quiz \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String getFlashcardToDisplay() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return flashcardToDisplay;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean isShowStats() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return showStats;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean isFlip() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return flip;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean isQuiz() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return quiz;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 showStats \u003d\u003d otherCommandResult.showStats"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 flip \u003d\u003d otherCommandResult.flip"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 flashcardToDisplay.equals(otherCommandResult.flashcardToDisplay)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 quiz \u003d\u003d otherCommandResult.quiz;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 69,
      "lzw12345": 37,
      "jolynnn8D": 29
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Command to delete a flashcard or tag"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_INDEX \u003d \"The index you entered is invalid!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"The card has been deleted!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Return the result from executing the delete command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param model list of flashcards"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @return the execution result"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @throws CommandException error encountered during execution of command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.deleteFlashcard(cardToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.commitFlashcardList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                || (other instanceof DeleteCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 47,
      "Akimatsu98": 16
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/DeleteTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent a command that removes a tag, but the cards under this tag will be kept."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetag\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \": Deletes the tag identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"Parameters: TAG NAME (must exist in the flashcards)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"t/software engineering\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"This tag has been deleted, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"the cards under this tag are kept.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_TAG_DOES_NOT_EXIST \u003d \"This tag does not exist in the flashcards.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Tag target;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public DeleteTagCommand(Tag target) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!model.systemHasTag(target)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CommandException(MESSAGE_TAG_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.systemRemoveTag(target);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.commitFlashcardList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult(MESSAGE_DELETE_TAG_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                || (other instanceof DeleteTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 target.equals(((DeleteTagCommand) other).target));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 38,
      "lzw12345": 7,
      "Akimatsu98": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Command to edit a flashcard or tag"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the flashcard identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"by the index number used in the displayed flashcard list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"[\" + PREFIX_CHOICE + \"CHOICE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"[\" + PREFIX_DEFINITION + \"DEFINITION] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        + PREFIX_CHOICE + \"Sample \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        + PREFIX_QUESTION + \"A* Search \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + PREFIX_TAG + \"Artificial Intelligence\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_EDIT_FLASHCARD_SUCCESS \u003d \"Edited Flashcard: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the flashcard list.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_CHOICE_ANSWER \u003d \"For MCQ flashcard,\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \" the answer must match one of its choices.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final EditFlashcardDescriptor editFlashcardDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param index                   of the flashcard in the filtered flashcard list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param editFlashCardDescriptor details to edit the flashcard with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditCommand(Index index, EditFlashcardDescriptor editFlashCardDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(editFlashCardDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.editFlashcardDescriptor \u003d new EditFlashcardDescriptor(editFlashCardDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_ID_NUMBER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard editedFlashcard;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!flashcardToEdit.isMcq()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            editedFlashcard \u003d createEditedShortAnswerFlashcard(flashcardToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            editedFlashcard \u003d createEditedMcqFlashcard((McqFlashcard) flashcardToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!flashcardToEdit.isSameFlashcard(editedFlashcard) \u0026\u0026 model.hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!editedFlashcard.isValidFlashcard()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_EDIT_CHOICE_ANSWER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.commitFlashcardList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Creates and returns a {@code McqFlashcard} with the details of {@code flashcardToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * edited with {@code editFlashcardDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static Flashcard createEditedMcqFlashcard("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        McqFlashcard flashcardToEdit, EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Question updatedQuestion \u003d editFlashcardDescriptor.getQuestion().orElse(flashcardToEdit.getQuestion());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        List\u003cChoice\u003e updatedChoices \u003d editFlashcardDescriptor.getChoices().orElse(flashcardToEdit.getChoices());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Definition updatedDefinition \u003d editFlashcardDescriptor.getDefinition().orElse(flashcardToEdit.getDefinition());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFlashcardDescriptor.getTags().orElse(flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Answer updatedAnswer \u003d editFlashcardDescriptor.getAnswer().orElse(flashcardToEdit.getAnswer());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return new McqFlashcard(updatedQuestion, updatedChoices, updatedDefinition, updatedTags, updatedAnswer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Creates and returns a {@code ShortAnswerFlashcard} with the details of {@code flashcardToEdit}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * edited with {@code editFlashcardDescriptor}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private static Flashcard createEditedShortAnswerFlashcard(Flashcard flashcardToEdit,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                                   EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Question updatedQuestion \u003d editFlashcardDescriptor.getQuestion().orElse(flashcardToEdit.getQuestion());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Definition updatedDefinition \u003d editFlashcardDescriptor.getDefinition().orElse(flashcardToEdit.getDefinition());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFlashcardDescriptor.getTags().orElse(flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Answer updatedAnswer \u003d editFlashcardDescriptor.getAnswer().orElse(flashcardToEdit.getAnswer());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return new ShortAnswerFlashcard(updatedQuestion, updatedDefinition, updatedTags, updatedAnswer);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editFlashcardDescriptor.equals(e.editFlashcardDescriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Stores the details to edit the flashcard with."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static class EditFlashcardDescriptor {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        private Definition definition;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        private List\u003cChoice\u003e choices;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public EditFlashcardDescriptor() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public EditFlashcardDescriptor(EditFlashcardDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            setChoices(toCopy.choices);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            setDefinition(toCopy.definition);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return CollectionUtil.isAnyNonNull(question, definition, tags, choices, answer);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         * Sets {@code choices} to this object\u0027s {@code choices}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         * A defensive copy of {@code choices} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        public void setChoices(List\u003cChoice\u003e choices) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            this.choices \u003d (choices !\u003d null) ? new ArrayList\u003c\u003e(choices) : null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         * Returns an unmodifiable choice set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code choice} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        public Optional\u003cList\u003cChoice\u003e\u003e getChoices() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return (choices !\u003d null) ? Optional.of(Collections.unmodifiableList(choices)) : Optional.empty();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public void setDefinition(Definition definition) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            this.definition \u003d definition;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public Optional\u003cDefinition\u003e getDefinition() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return Optional.ofNullable(definition);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (!(other instanceof EditFlashcardDescriptor)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            EditFlashcardDescriptor e \u003d (EditFlashcardDescriptor) other;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 getDefinition().equals(e.getDefinition())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 179,
      "lzw12345": 17,
      "jolynnn8D": 53,
      "Akimatsu98": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/EndCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * The command to end quiz mode."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class EndCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"end\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ended quiz mode\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, \"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 1,
      "jolynnn8D": 19,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting FlashMind as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 18,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.FlashcardContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Command to find a flashcard based on some keywords in its questions or answer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find all flashcards whose words contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" compact complete search\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final FlashcardContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FindCommand(FlashcardContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                || (other instanceof FindCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 40,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/FlipCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.parser.FlashcardListParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.Quiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Command to input an answer to the last viewed flashcard and see the correct answer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class FlipCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"flip\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Takes in an answer as a parameter \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"and displays the correct answer of the flashcard that is being viewed.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"Parameters: ANSWER\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Flashcard flipped\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_NULL_QUIZ_FLASHCARD \u003d \"There are no quiz-able flashcards\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_INVALID_CHOICE \u003d \"The index of the choice you chose is invalid.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_MCQ_INDEX \u003d \"The answer to a MCQ flashcard must be a number.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public final Answer answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public FlipCommand(Answer answer) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard quizCard;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            quizCard \u003d model.getQuiz().quizCard();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } catch (CardNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new CommandException(MESSAGE_NULL_QUIZ_FLASHCARD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            Answer updatedAnswer \u003d updateAnswer(quizCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            boolean isCorrect \u003d quizCard.checkAnswer(updatedAnswer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            model.getQuiz().discardFirstCard();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            String resultString \u003d buildResultString(updatedAnswer, isCorrect, quizCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            String flashcardString \u003d buildFlashcardString(model.getQuiz());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return new CommandResult(resultString, true, flashcardString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new CommandException(MESSAGE_MCQ_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Retrieves the content of the MCQ answer if it is a MCQ Flashcard."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param flashcard The last viewed flashcard."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return An updated answer if the flashcard is a MCQ one, if not it returns the original answer."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @throws CommandException If the choice index is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Answer updateAnswer(Flashcard flashcard) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!flashcard.isMcq()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return answer;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            McqFlashcard mcqCard \u003d (McqFlashcard) flashcard;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            int index \u003d Integer.parseInt(answer.getAnswer()) - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (index \u003e\u003d mcqCard.getChoices().size() || index \u003c 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_CHOICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            Answer newAnswer \u003d new Answer(mcqCard.getChoices().get(index).getChoice());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return newAnswer;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Builds the result string based on whether the answer is correct and checks if there\u0027s a next card."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param updatedAnswer Parsed answer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param isCorrect If the answer was correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param quizCard Card currently being quizzed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Resultant string for CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private String buildResultString(Answer updatedAnswer, boolean isCorrect, Flashcard quizCard) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        builder.append(\"Your answer: \").append(updatedAnswer.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            builder.append(\" is correct.\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            builder.append(\" is incorrect.\\n\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    .append(\"The correct answer is: \").append(quizCard.getAnswer()).append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Builds the flashcard string to return if there are flashcards to quiz."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param quiz Quiz object containing all quizable cards."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Resultant string for Flashcards"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private String buildFlashcardString(Quiz quiz) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!quiz.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            builder.append(\"This is your next card:\\n\").append(quiz.quizCard());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            FlashcardListParser.setQuizMode(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            builder.append(\"This quiz has ended.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                || (other instanceof FlipCommand"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                \u0026\u0026 answer.equals(((FlipCommand) other).answer));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "jolynnn8D": 120,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The command to list out all possible commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 20,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ListCardByTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The command to list out all flashcards under a given tag"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ListCardByTagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listbytag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": list all flashcards under the given tags.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"Parameters:\" + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + PREFIX_TAG + \"software engineering\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards with this tag. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"If no flashcard is listed, it means no flashcard is under this tag.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Set\u003cTag\u003e target;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ListCardByTagCommand(Set\u003cTag\u003e target) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.updateFilteredFlashcardList(model.getHasTagPredicate(target));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                || (other instanceof ListCardByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 target.equals(((ListCardByTagCommand) other).target));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 38,
      "lzw12345": 7,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The command to list out all flashcards."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 22,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ListTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents the command that list all the tags in the flashcard list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ListTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listtag\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tags in the system \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"(If no tag names are shown below, it means you have not add any tags before.):\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String tagNameList \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Tag tag : model.getAllSystemTags()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tagNameList \u003d tagNameList + tag.tagName + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + tagNameList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 27,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/QuizCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.parser.FlashcardListParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Command to view the MCQ choices in a flashcard. The answer will not be shown."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        + \": Quiz the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        + \"Only the choices with the flashcard will be shown but the answer will not.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        + \"The quiz command should be preceded by a flip command to answer the flashcard. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) DURATION(must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_INDEX \u003d \"The index you entered is invalid!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"The duration you entered is invalid!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_RESULT_SUCCESS \u003d \"Please answer the flashcard below with the flip command.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final Integer duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public QuizCommand(Index targetIndex, Integer duration) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Showing a whole flashcard in the command bot, the answer will not be shown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param model list of flashcards"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return the execution result containing the flashcard without the answer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @throws CommandException error encountered during execution of command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            FlashcardListParser.setQuizMode(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard cardToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        List\u003cFlashcard\u003e quizList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        quizList.add(cardToView);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        model.setQuiz(quizList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model.setQuizDuration(duration);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return new CommandResult(MESSAGE_RESULT_SUCCESS, true, cardToView.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            || (other instanceof QuizCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((QuizCommand) other).targetIndex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 40,
      "lzw12345": 9,
      "jolynnn8D": 18,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/QuizTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.FlashcardListParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Command to view the MCQ choices in a flashcard. The answer will not be shown."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class QuizTagCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiztag\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \": Starts a series of quizzes for all the flashcards in a certain tag.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"Each flashcard should be preceded by a flip command to answer the flashcard. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"Quiz mode will persist until all flashcards are answered or the user inputs \u0027end\u0027\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"Parameters: TAG (must be an existing tag)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" geography\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Quiz mode has started.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String TAG_INVALID \u003d \"There are no quizable flashcards in this tag.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final Set\u003cTag\u003e target;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final Integer duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public QuizTagCommand(Set\u003cTag\u003e inputTag, Integer duration) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        requireNonNull(inputTag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.target \u003d inputTag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Showing a whole flashcard in the command bot, the answer will not be shown."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param model list of flashcards"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return the execution result containing the flashcard without the answer."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @throws CommandException error encountered during execution of command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        model.updateFilteredFlashcardList(model.getHasTagPredicate(target));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        List\u003cFlashcard\u003e taggedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        List\u003cFlashcard\u003e filteredList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            taggedList.add(filteredList.get(i));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (taggedList.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            FlashcardListParser.setQuizMode(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new CommandException(TAG_INVALID);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model.setQuizDuration(duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        model.setQuiz(taggedList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard firstCard \u003d model.getQuiz().quizCard();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, firstCard.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                || (other instanceof QuizTagCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                \u0026\u0026 target.equals(((QuizTagCommand) other).target));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "lzw12345": 4,
      "jolynnn8D": 64,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS; // to be modified"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * Reverts the {@code model}\u0027s flashcard list to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (!model.canRedoFlashcardList()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.redoFlashcardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 31
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/SkipCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.parser.FlashcardListParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Quiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Command to input an answer to the last viewed flashcard and see the correct answer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class SkipCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"skip\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Skips question and automatically mark wrong \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Flashcard skipped\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_NULL_QUIZ_FLASHCARD \u003d \"There are no quiz-able flashcards\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public SkipCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Flashcard quizCard \u003d model.getQuiz().quizCard();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (quizCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            throw new CommandException(MESSAGE_NULL_QUIZ_FLASHCARD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        quizCard.skipAnswer();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model.getQuiz().discardFirstCard();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String flashcardString \u003d buildFlashcardString(model.getQuiz());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, flashcardString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Builds the flashcard string to return if there are flashcards to quiz."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param quiz Quiz object containing all quizable cards."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return Resultant string for Flashcards"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private String buildFlashcardString(Quiz quiz) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!quiz.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            builder.append(\"This is your next card:\\n\").append(quiz.quizCard());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            FlashcardListParser.setQuizMode(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            builder.append(\"This quiz has ended.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 62
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Command to calculate and display stats"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": list all statistics under the given parameters.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"if no parameter is given it will list the overall statistics\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"Parameters:\" + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + PREFIX_TAG + \"software engineering\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Generated statistics successfully\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"I\u0027m sorry there is nothing to calculate please refer below.\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final Set\u003cTag\u003e target;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public StatsCommand (Set\u003cTag\u003e target) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (target \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            model.updateFilteredFlashcardList(model.getHasTagPredicate(target));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (model.getFilteredFlashcardList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new CommandResult(model.generateStatistics(), false, false, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (target \u003d\u003d null \u0026\u0026 ((StatsCommand) other).target \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                || (other instanceof StatsCommand// instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 target.equals(((StatsCommand) other).target));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 61,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS; // to be modified"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * Reverts the {@code model}\u0027s flashcard list to its previously state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (!model.canUndoFlashcardList()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.undoFlashcardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 31
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Command to view the MCQ choicecs as well as the answer in a flashcard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \": View the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        + \"Both the choices and the answer will be shown.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_INDEX \u003d \"The index you entered is invalid!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"The flashcard is shown in full below.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Showing a whole flashcard in the command bot with the answer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return the execution result containing the full flashcard."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @throws CommandException error encountered during execution of the command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard cardToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return new CommandResult(cardToView.fullString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            || (other instanceof ViewCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 48,
      "Akimatsu98": 2,
      "jolynnn8D": 8
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * Represents an error which occurs during execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 18
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Parses input arguments to generate {@Code AddCommand}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private static final String ANSWER_CHOICE_MISMATCH \u003d \"The answer must be the same as a given choice.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses the string of arguments to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param args string containing the parameters for the new flashcard"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return new add command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            PREFIX_QUESTION, PREFIX_CHOICE, PREFIX_DEFINITION, PREFIX_TAG, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            PREFIX_QUESTION, PREFIX_DEFINITION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Question question \u003d ParserUtil.parseWord(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        List\u003cChoice\u003e choices \u003d ParserUtil.parseChoices(argMultimap.getAllValues(PREFIX_CHOICE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Definition definition \u003d ParserUtil.parseDefinition(argMultimap.getValue(PREFIX_DEFINITION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard flashcard;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_CHOICE)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            if (!choices.contains(new Choice(answer.getAnswer()))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                throw new ParseException(ANSWER_CHOICE_MISMATCH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                flashcard \u003d new McqFlashcard(question, choices, definition, tagList, answer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            flashcard \u003d new ShortAnswerFlashcard(question, definition, tagList, answer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new AddCommand(flashcard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 38,
      "lzw12345": 2,
      "jolynnn8D": 22,
      "Akimatsu98": 8
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 54,
      "jolynnn8D": 5
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 140,
      "jolynnn8D": 7
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Contains Command Line Interface syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final Prefix PREFIX_DEFINITION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final Prefix PREFIX_CHOICE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 11,
      "lzw12345": 2,
      "jolynnn8D": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Parses input arguments to generate a {@Code DeleteCommand}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses the given context into a delete command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param args the input from the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return new delete command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + DeleteCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 24,
      "Akimatsu98": 4
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/DeleteTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Parses the user inputs into a {@code DeleteTagCommand}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public DeleteTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    + DeleteTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new DeleteTagCommand(tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 31,
      "lzw12345": 1,
      "jolynnn8D": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Parse input argument to generate a {@Code EditCommand}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parse the given context in the edit command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param args The input string from the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return new edit command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_CHOICE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    PREFIX_DEFINITION, PREFIX_TAG, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        EditFlashcardDescriptor editFlashcardDescriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            editFlashcardDescriptor.setQuestion(ParserUtil.parseWord(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEFINITION).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            editFlashcardDescriptor.setDefinition(ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    .parseDefinition(argMultimap.getValue(PREFIX_DEFINITION).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            editFlashcardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFlashcardDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        parseChoicesForEdit(argMultimap.getAllValues(PREFIX_CHOICE)).ifPresent(editFlashcardDescriptor::setChoices);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!editFlashcardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new EditCommand(index, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e choices} into a {@code Set\u003cChoice\u003e} if {@code choices} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * If {@code choices} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero choices."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Optional\u003cList\u003cChoice\u003e\u003e parseChoicesForEdit(Collection\u003cString\u003e choices) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assert choices !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (choices.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Collection\u003cString\u003e choiceList \u003d choices.size() \u003d\u003d 1 \u0026\u0026 choices.contains(\"\") ? Collections.emptyList() : choices;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return Optional.of(ParserUtil.parseChoices(choiceList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 77,
      "lzw12345": 15,
      "jolynnn8D": 11
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.FlashcardContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Parse input arguments to generate a {@Code EditCommand}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FindCommandParser implements Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parse the given context in the find command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param args The user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return new find command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String[] wordKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new FindCommand(new FlashcardContainsKeywordsPredicate(Arrays.asList(wordKeywords)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 30
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/FlashcardListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_QUIZ_UNSUPPORTED_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.EndCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.ListCardByTagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.ListTagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.QuizCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.QuizTagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.SkipCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The major controlling panel of command parsers."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class FlashcardListParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private static boolean quizMode \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses the original user input and calls corresponding commands or sub-parsers."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param userInput the original user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return the command being extracted out from the user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException when the user input format does not fit the pattern."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (quizMode) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return parseQuizMode(commandWord, arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        case ListCardByTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return new ListCardByTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        case ListTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return new ListTagCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        case DeleteTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return new DeleteTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        case QuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command nextQuizCommand \u003d (new QuizCommandParser()).parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            quizMode \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return nextQuizCommand;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        case QuizTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Command nextQuizTagCommand \u003d (new QuizTagCommandParser()).parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            quizMode \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return nextQuizTagCommand;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(FlipCommand.MESSAGE_NULL_QUIZ_FLASHCARD);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Parses corresponding commands that are triggered in quiz mode."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param commandWord String representing the command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param arguments Arguments of the command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Command based on user input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @throws ParseException when the user input is unrecognised."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Command parseQuizMode(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        case EndCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            quizMode \u003d false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return new EndCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            quizMode \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return new FlipCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case SkipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new SkipCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(MESSAGE_QUIZ_UNSUPPORTED_COMMAND);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Getter for quiz mode boolean."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return True if logic is currently in quiz mode."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean isQuizMode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return quizMode;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Setter for quiz mode boolean."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param quizMode Sets quiz mode boolean to quizMode."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static void setQuizMode(boolean quizMode) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        FlashcardListParser.quizMode \u003d quizMode;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 45,
      "lzw12345": 49,
      "jolynnn8D": 68,
      "Akimatsu98": 10
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/FlipCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Parse input arguments to generate a {@Code FlipCommand}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class FlipCommandParser implements Parser\u003cFlipCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public FlipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            Answer answer \u003d ParserUtil.parseAnswer(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return new FlipCommand(answer);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + FlipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 23
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ListCardByTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.ListCardByTagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Parses input arguments to generate {@code ListCardByTagCommandParser}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ListCardByTagCommandParser implements Parser\u003cListCardByTagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses the string of arguments to be listed by tags."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param args string containing the parameters for the target tags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return new {@code ListCardByTagCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ListCardByTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + ListCardByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new ListCardByTagCommand(tagList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 37,
      "lzw12345": 3,
      "jolynnn8D": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * interface for all the parsers."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "lzw12345": 10,
      "Akimatsu98": 3
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Assistance class stores common features for all parsers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"Duration is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Index parseIndex(String oneBaseIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String trimmedIndex \u003d oneBaseIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Parses {@code duration} into an int duration and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static Integer parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedDuration)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return Integer.parseInt(trimmedDuration);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Parses a {@code String word} into a {@code Question}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException if the given {@code word} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static Question parseWord(String question) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Parses a {@code String choice} into a {@code Choice}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param choice contains the string representing a choice"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @throws ParseException if the given {@code Choice} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static Choice parseChoice(String choice) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        requireNonNull(choice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String trimmedChoice \u003d choice.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!Choice.isValidChoice(trimmedChoice)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            throw new ParseException(Choice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new Choice(trimmedChoice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e Choices} into a {@code List\u003cChoices\u003e}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static List\u003cChoice\u003e parseChoices(Collection\u003cString\u003e choices) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        requireNonNull(choices);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        final List\u003cChoice\u003e choiceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        for (String choice : choices) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            choiceList.add(parseChoice(choice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return choiceList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses a {@code String definition} into a {@code Definition}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException if the given {@code definition} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Definition parseDefinition(String definition) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(definition);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String trimmedDefinition \u003d definition.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Definition.isValidDefinition(trimmedDefinition)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(Definition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Definition(trimmedDefinition);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses a {@code String definition} into a {@code Definition}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException if the given {@code definition} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 93,
      "lzw12345": 37,
      "jolynnn8D": 18
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 42
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/QuizCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.QuizCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Parses input argument to generate a {@code QuizCommand}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class QuizCommandParser implements Parser\u003cQuizCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Parses the given context into a view command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param args the input from the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return new view command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public QuizCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DURATION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Integer duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            duration \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String trimmedIndex \u003d getIndex(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(trimmedIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new QuizCommand(index, duration);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            FlashcardListParser.setQuizMode(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + QuizCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getIndex(String args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return args.split(\"s\")[0].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 20,
      "lzw12345": 20,
      "jolynnn8D": 7
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/QuizTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.QuizTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Parses input arguments to generate {@code ListCardByTagCommandParser}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class QuizTagCommandParser implements Parser\u003cQuizTagCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Parses the string of arguments to be listed by tags."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param args string containing the parameters for the target tags"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return new {@code ListCardByTagCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public QuizTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_DURATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            FlashcardListParser.setQuizMode(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + QuizTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Integer duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            duration \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new QuizTagCommand(tagList, duration);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "lzw12345": 11,
      "jolynnn8D": 37
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/StatsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Parses the arguments for the stats command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Parses the string of arguments to be calculated by tags."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param args string containing the parameters for the target tags"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return new {@code StatsCommand}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new StatsCommand(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new StatsCommand(tagList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lzw12345": 44,
      "jolynnn8D": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/ViewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Parses input argument to generate a {@code ViewCommand}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Parses the given context into a full view command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param args the input from the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return new full view command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + ViewCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 20,
      "jolynnn8D": 8
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent a parser error encountered by the parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public ParseException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 15,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/FlashcardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Wraps all data at the flashcard list level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardList implements ReadOnlyFlashcardList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final UniqueFlashcardList flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardList() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardList(ReadOnlyFlashcardList toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Replaces the contents of the flashcards of the flashcard list with {@code flashcards}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code} flashcards should not contain duplicate flashcards"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Resets the existing data of this {@code FlashcardList} with {@code newData}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void resetData(ReadOnlyFlashcardList newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        indicateModified(); // include here?"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if a flashcard with the same word as {@code flashcard} exists in the flashcard list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Adds a flashcard to the flashcard list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcards.add(flashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Replaces the given flashcard {@code flashcard} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code target} must exist in the flashcard list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The flashcard word of {@code editedFlashcard} must not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * be the same as another existing flashcard in the flashcard list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Removes {@code key} from the flashcard list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code key} must exist in the flashcard list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Gets all the tags evert appeared in the system."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Set\u003cTag\u003e getAllFlashcardTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcards.getAllTags();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * returns true if the given tag ever appears in the flashcard list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean flashcardsHasTag(Tag tag) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcards.anyFlashcardHasTag(tag);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Removes the given tag from all flashcards."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void flashcardsRemoveTag(Tag tag) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcards.removeTag(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Notifies listeners that the flashcard list has been modified."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcards.asUnimodifiableObservableList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcards.asUnimodifiableObservableList().size() + \"flashcards\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                || (other instanceof FlashcardList"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \u0026\u0026 flashcards.equals(((FlashcardList) other).flashcards));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 115,
      "lzw12345": 8,
      "Akimatsu98": 26,
      "jolynnn8D": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The interface of models containing the whole flashcard list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is one of the communication windows of the model package to the outside."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code Predicate} that evaluates true for flashcards contains the given tag."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Predicate\u003cFlashcard\u003e getHasTagPredicate(Set\u003cTag\u003e tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the set of all tags in the system."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Set\u003cTag\u003e getAllSystemTags();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns user prefs datat with the data in {@code userPrefs}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the user prefs\u0027 GUI settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the user prefs\u0027 flashcard list file path"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Path getFlashcardListFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the user prefs\u0027 flashcard list file path"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param flashcardListFilePath"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void setFlashcardListFilePath(Path flashcardListFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Replaces flashcard list data with the data in {@code flashcardList}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void setFlashcardList(ReadOnlyFlashcardList flashcardList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the flashcard list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    ReadOnlyFlashcardList getFlashcardList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Check if a flashcard exists in the flashcard list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Deletes the given flashcard. This flashcard mush exist in the flashcard list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void deleteFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void addFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code target} must exist in the flashcard list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns an unmodifiable view of the filtered flashcard list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if the given tag ever appeared in the system."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    boolean systemHasTag(Tag tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Removes the given tag from all flashcards in the system."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void systemRemoveTag(Tag tag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws NullPointerException is {@code predicate} is null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Updates the last viewed flashcard."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    void updateLastViewedFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Retrieves the last viewed flashcard."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Last viewed flashcard."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    Flashcard getLastViewedFlashcard();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Calculates the desired statistics based on the filtered list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    String generateStatistics();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Retrieves the desired statistics."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Retrieves the quizable flashcards."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    Quiz getQuiz();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Sets a list of quizable flashcards to the quiz."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param quizableFlashcards Flashcards to be quizzed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    void setQuiz(List\u003cFlashcard\u003e quizableFlashcards);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Sets the duration of each quiz question."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param duration duration of quiz questions."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    void setQuizDuration(Integer duration);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Returns true if the model has previous flashcard list states to restore."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    boolean canUndoFlashcardList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Returns true if the model has undone flashcard list states to restore."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    boolean canRedoFlashcardList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Restores the model\u0027s flashcard list to its previous state."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    void undoFlashcardList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Restores the model\u0027s flashcard list to its previously undone state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    void redoFlashcardList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Saves the current flashcard list state for undo/redo."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    void commitFlashcardList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *returns the duration Property."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    IntegerProperty getDurationProperty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *returns the totalCards Property."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    IntegerProperty getTotalCardsProperty();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * returns the remainingCards Property."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    IntegerProperty getRemainingCardsProperty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 115,
      "lzw12345": 34,
      "jolynnn8D": 25,
      "Akimatsu98": 22
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents the in memory model of the flashcard list data"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Flashcard viewedFlashcard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Statistics desiredStats;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Quiz quiz;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private VersionedFlashcardList versionedFlashcardList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final SimpleObjectProperty\u003cFlashcard\u003e selectedFlashcard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Default initializer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this(new FlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Initializes a MOdelManager with the given flashcard list and userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ModelManager(ReadOnlyFlashcardList flashcardList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireAllNonNull(flashcardList, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.versionedFlashcardList \u003d new VersionedFlashcardList(flashcardList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.fine(\"Initializing with flashcard list: \" + flashcardList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003cFlashcard\u003e(versionedFlashcardList.getFlashcardList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.viewedFlashcard \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.desiredStats \u003d new Statistics();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.quiz \u003d new Quiz();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        filteredFlashcards.addListener(this::ensureSelectedFlashcardIsValid);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Predicate\u003cFlashcard\u003e getHasTagPredicate(Set\u003cTag\u003e tag) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcard -\u003e flashcard.hasAnyTag(tag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Set\u003cTag\u003e getAllSystemTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return versionedFlashcardList.getAllFlashcardTags();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getFlashcardListFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return userPrefs.getFlashcardListFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcardListFilePath(Path flashcardListFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(flashcardListFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userPrefs.setFlashcardListFilePath(flashcardListFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcardList(ReadOnlyFlashcardList flashcardList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        versionedFlashcardList.resetData(flashcardList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ReadOnlyFlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return versionedFlashcardList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return versionedFlashcardList.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void deleteFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        versionedFlashcardList.removeFlashcard(flashcard);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        versionedFlashcardList.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        versionedFlashcardList.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean systemHasTag(Tag tag) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return versionedFlashcardList.flashcardsHasTag(tag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void systemRemoveTag(Tag tag) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        versionedFlashcardList.flashcardsRemoveTag(tag);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void updateLastViewedFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.viewedFlashcard \u003d flashcard;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Flashcard getLastViewedFlashcard() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return this.viewedFlashcard;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof ModelManager)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ModelManager obj \u003d (ModelManager) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return versionedFlashcardList.equals(obj.versionedFlashcardList)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 userPrefs.equals(obj.userPrefs)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                \u0026\u0026 filteredFlashcards.equals(obj.filteredFlashcards)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                \u0026\u0026 quiz.equals(obj.quiz);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String generateStatistics() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        desiredStats.calculate(filteredFlashcards);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return desiredStats.getResults();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return desiredStats;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Quiz getQuiz() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return quiz;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void setQuiz(List\u003cFlashcard\u003e quizableFlashcards) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        quiz.setQuizList(quizableFlashcards);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setQuizDuration(Integer duration) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        quiz.setDuration(duration);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public boolean canUndoFlashcardList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return versionedFlashcardList.canUndo();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public boolean canRedoFlashcardList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return versionedFlashcardList.canRedo();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void undoFlashcardList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        versionedFlashcardList.undo();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void redoFlashcardList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        versionedFlashcardList.redo();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void commitFlashcardList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        versionedFlashcardList.commit();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty getDurationProperty() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return quiz.getDurationProperty();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty getTotalCardsProperty() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return quiz.totalCardsProperty();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty getRemainingCardsProperty() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return quiz.remainingCardsProperty();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private void ensureSelectedFlashcardIsValid(ListChangeListener.Change\u003c? extends Flashcard\u003e change) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            if (selectedFlashcard.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                // null is always a valid selected flashcard, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            boolean wasSelectedFlashcardReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize()"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                    \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedFlashcard.getValue());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            if (wasSelectedFlashcardReplaced) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                // Update selectedFlashcard to its new value."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedFlashcard.getValue());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                selectedFlashcard.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            boolean wasSelectedFlashcardRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                    .anyMatch(removedFlashcard -\u003e selectedFlashcard.getValue().isSameFlashcard(removedFlashcard));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            if (wasSelectedFlashcardRemoved) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                // Select the flashcard that came before it in the list,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                // or clear the selection if there is no such flashcard."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                selectedFlashcard.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 145,
      "lzw12345": 34,
      "jolynnn8D": 28,
      "Akimatsu98": 73
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/Quiz.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Quiz object containing all quizable flashcards when quiz is initiated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private List\u003cFlashcard\u003e quizableFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private IntegerProperty duration \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private IntegerProperty totalCards \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private IntegerProperty remainingCards \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Quiz() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Sets a list of flashcards to be quizzed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param quizableFlashcards List of flashcards to be quizzed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void setQuizList(List\u003cFlashcard\u003e quizableFlashcards) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.quizableFlashcards \u003d quizableFlashcards;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        totalCards.set(quizableFlashcards.size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        remainingCards.set(quizableFlashcards.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Gets the list of quizable flashcards."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return List of quizable flashcards."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public List\u003cFlashcard\u003e getQuizableFlashcards() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return quizableFlashcards;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Returns the first card in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Flashcard to be quizzed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @throws CardNotFoundException when there are no cards in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Flashcard quizCard() throws CardNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (quizableFlashcards.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            remainingCards.set(quizableFlashcards.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return quizableFlashcards.get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Discards the first card in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @throws CardNotFoundException when there are no cards to be discarded."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void discardFirstCard() throws CardNotFoundException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (this.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            quizableFlashcards.remove(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Checks if the quizable list is empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return true if there are no cards in the quizable list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return quizableFlashcards.isEmpty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty getDurationProperty() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty totalCardsProperty() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return totalCards;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public IntegerProperty remainingCardsProperty() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return remainingCards;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setDuration(Integer duration) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.duration.setValue(duration);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!(other instanceof Quiz)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Quiz obj \u003d (Quiz) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return quizableFlashcards.equals(obj.quizableFlashcards);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 24,
      "jolynnn8D": 80
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/ReadOnlyFlashcardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * An unmodifiable flashcard list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is one of the communication window of the model package to the outside."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public interface ReadOnlyFlashcardList extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get an unmodifiable view of the flashcard list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This list guarantees no duplicate flashcard will be contained."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 16,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Path getFlashcardListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 15
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Score;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Statistics object that contains all desired statistics."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Integer totalCorrect;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Integer totalWrong;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Integer totalAttempted;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Integer totalUnattempted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private ArrayList\u003cString\u003e unattemptedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private XYChart.Series\u003cString, Number\u003e correctSeries;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private XYChart.Series\u003cString, Number\u003e wrongSeries;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Calculates the parameters for each statistic and stores the data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param target list of flashcard to be calculated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void calculate (ObservableList\u003cFlashcard\u003e target) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        for (Flashcard flashcard : target) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            Score score \u003d flashcard.getScore();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            totalCorrect +\u003d score.getCorrectAnswers();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            totalWrong +\u003d score.getWrongAnswers();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            if (score.getTotalAttempts() \u003e 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                totalAttempted++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                totalUnattempted++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                unattemptedList.add(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            correctSeries.setName(\"correct\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            correctSeries.getData().add(new XYChart.Data\u003c\u003e(flashcard.getQuestion().shortenForLabel(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    score.getCorrectAnswers()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            wrongSeries.setName(\"wrong\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            wrongSeries.getData().add(new XYChart.Data\u003c\u003e(flashcard.getQuestion().shortenForLabel(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                score.getWrongAnswers()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * resets variables for new calculation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    void reset() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        totalCorrect \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        totalWrong \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        totalAttempted \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        totalUnattempted \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        unattemptedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        correctSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        wrongSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Creates a string of summary statistics for feedback to user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return returns a feedback string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getResults() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return \"Displaying getResults for selected parameters. In summary:\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"Total correct:\" + totalCorrect"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nTotal Wrong:\" + totalWrong"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nTotal Attempted:\" + totalAttempted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nTotal Unattempted:\" + totalUnattempted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nTotal cards in list:\" + (totalUnattempted + totalAttempted)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nList of cards that have not been attempted yet:\\n\" + concatUnattempted();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Concatenates a list of cards that have not yet been attempted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return a string of cards"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private String concatUnattempted () {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        for (String s : unattemptedList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            list +\u003d \" -\" + s + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Integer getTotalCorrect() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return totalCorrect;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Integer getTotalWrong() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return totalWrong;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Integer getTotalAttempted() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return totalAttempted;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Integer getTotalUnattempted() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return totalUnattempted;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public ArrayList\u003cString\u003e getUnattemptedList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return unattemptedList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e getCorrectSeries() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return correctSeries;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e getWrongSeries() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return wrongSeries;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "lzw12345": 116,
      "jolynnn8D": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent the user\u0027s preferences."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // TODO: make the following path reasonable"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Path flashcardListFilePath \u003d Paths.get(\"data\", \"flashcardlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a {@code UserPrefs} with default values"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a {@code UserPrefs} with prefs in {@code userPrefs}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Reset the existing data of this {@code UserPrefs} with {@code newUserPrefs}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newUserPrefs"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        setFlashcardListFilePath(newUserPrefs.getFlashcardListFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getFlashcardListFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcardListFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcardListFilePath(Path flashcardListFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(flashcardListFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.flashcardListFilePath \u003d flashcardListFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                \u0026\u0026 flashcardListFilePath.equals(o.flashcardListFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 61,
      "jolynnn8D": 15
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/VersionedFlashcardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class VersionedFlashcardList extends FlashcardList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final List\u003cReadOnlyFlashcardList\u003e flashcardListStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public VersionedFlashcardList(ReadOnlyFlashcardList initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        flashcardListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        flashcardListStateList.add(new FlashcardList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Saves a copy of the current {@code FlashcardList} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        flashcardListStateList.add(new FlashcardList(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        flashcardListStateList.subList(currentStatePointer + 1, flashcardListStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Restores the flashcard list to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        resetData(flashcardListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Restores the flashcard list to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        resetData(flashcardListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Returns true if {@code undo()} has flashcard list states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Returns true if {@code redo()} has flashcard list states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return currentStatePointer \u003c flashcardListStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (!(other instanceof VersionedFlashcardList)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        VersionedFlashcardList otherVersionedFlashcardList \u003d (VersionedFlashcardList) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return super.equals(otherVersionedFlashcardList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                \u0026\u0026 flashcardListStateList.equals(otherVersionedFlashcardList.flashcardListStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedFlashcardList.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            super(\"Current state pointer at start of flashcardListState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            super(\"Current state pointer at end of flashcardListState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 110
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The answer is just one of the choices in the flashcard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Its message must exactly fit the correct choice."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Answer can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?:[^\\\\s].*)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public final String answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkArgument(isValidAnswer(answer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if a given string is a valid choice."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            || (other instanceof Answer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            \u0026\u0026 answer.toLowerCase().equals(((Answer) other).answer.toLowerCase()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return answer + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 39,
      "lzw12345": 1,
      "jolynnn8D": 11
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Choice.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Represents a choice in the flashcard list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Guarantees: immutable; choice is valid as declared in {@link #isValidChoice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Choice {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Choice can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?:[^\\\\s].*)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public final String choice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Choice(String choice) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        requireNonNull(choice);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        checkArgument(isValidChoice(choice));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.choice \u003d choice;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if a given string is a valid choice."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static boolean isValidChoice(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Returns the content of the choice."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return String representing the contents of the choice."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String getChoice() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return choice;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                || (other instanceof Choice"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u0026\u0026 choice.equals(((Choice) other).choice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return choice.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return choice + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "lzw12345": 43,
      "jolynnn8D": 8
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Definition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.hash;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The definition of a word in the flashcard."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * TODO: Can be replaced by the options in the MCQ flashcard"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Definition {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Definition can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public final String definition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Definition(String definition) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(definition);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkArgument(isValidDefinition(definition));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.definition \u003d definition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if a given string is a valid definition."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean isValidDefinition(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return definition;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                || (other instanceof Definition)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 definition.equals(((Definition) other).definition);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return hash(definition);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 47
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Flashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents a Flashcard in the flashcard list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public abstract class Flashcard {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    protected final Question question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    protected final Definition definition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    protected final Answer answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    protected final Score score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This initializer is used when the user is creating a new flashcard"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Flashcard(Question question, Definition definitions, Set\u003cTag\u003e tags, Answer answer) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        requireAllNonNull(question, definitions, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.definition \u003d definitions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.score \u003d new Score();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Creates a deep copy of a given flashcard."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param toClone the flashcard to be cloned."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public Flashcard(Flashcard toClone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.question \u003d toClone.getQuestion();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.definition \u003d toClone.getDefinition();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.tags.addAll(toClone.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.answer \u003d toClone.getAnswer();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.score \u003d toClone.getScore();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This initializer should only be accessed by the storage package, because this initializer ensures the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * flashcard scores can be reloaded"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Flashcard(Question question, Definition definition, Set\u003cTag\u003e tags, Answer answer, Score score) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireAllNonNull(question, definition, tags, answer, score);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.definition \u003d definition;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns an immutable definition, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * if modification is attempted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Definition getDefinition() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return definition;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns an immutable answer, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * if modification attempted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Returns an immutable score, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * if modification attempted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * if modification is attempted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if this flashcard has the following tag."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return getTags().contains(tag);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if this flashcard has any one of the tags in the given tag sets."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean hasAnyTag(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (getTags().contains(tag)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Removes the tag from this flashcard."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Defines that if and only if two flashcards containing the same question can be considered as the same."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherFlashcard) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return otherFlashcard !\u003d null"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                \u0026\u0026 otherFlashcard.getQuestion().equals(getQuestion());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Checks that an input answer is the same as the correct answer."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @param inputAnswer The answer that the user input."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Returns true if the answer is correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean checkAnswer(Answer inputAnswer) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (inputAnswer.equals(answer)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            score.incrementCorrectAnswer();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            score.incrementWrongAnswer();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void skipAnswer() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        score.incrementWrongAnswer();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Checks whether the card is a MCQ Flashcard."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Returns true if the card is a McqFlashcard."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public abstract boolean isMcq();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the representation of this flashcard containing the answer."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String fullString() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return toString() + \"\\nAnswer:\\n\" + answer;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Check if this flashcard\u0027s answer is in choice or not. Only applies for MCQ flashcard."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public abstract boolean isValidFlashcard();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Returns true if both the question and the definitions and the tags are the same."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This is stronger than {@code isSameFlashCard}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return otherFlashcard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 otherFlashcard.getDefinition().equals(getDefinition())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 otherFlashcard.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTags().equals(getTags())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 otherFlashcard.getScore().equals(getScore());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        builder.append(getQuestion()).append(\"\\n\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .append(\"\\nDefinitions:\").append(\"\\n\")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .append(getDefinition()).append(\"\\n\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            builder.append(\"\\nTags:\").append(\"\\n\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return Objects.hash(question, definition, tags);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 122,
      "lzw12345": 6,
      "jolynnn8D": 70,
      "Akimatsu98": 13
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/FlashcardContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Question}, {@code Definition}, {@code Answer}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .anyMatch(keywords -\u003e StringUtil.containsWordIgnoreCase(flashcard.getQuestion().question, keywords))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            || keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .anyMatch(keywords -\u003e StringUtil.containsWordIgnoreCase(flashcard.getDefinition().definition, keywords))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            || keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .anyMatch(keywords -\u003e StringUtil.containsWordIgnoreCase(flashcard.getAnswer().answer, keywords));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                || (other instanceof FlashcardContainsKeywordsPredicate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 keywords.equals(((FlashcardContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 35
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/McqFlashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Represents a MCQ Flashcard with a list of choices."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class McqFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final List\u003cChoice\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This is the initializer when user is creating a new flashcard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public McqFlashcard(Question question, List\u003cChoice\u003e choices, Definition definitions,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                        Set\u003cTag\u003e tags, Answer answer) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        super(question, definitions, tags, answer);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.choices.addAll(choices);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This initializer should only be accessed by the storage package, because this initializer ensures the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * flashcard scores can be reloaded"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public McqFlashcard(Question question, List\u003cChoice\u003e choices, Definition definitions,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                        Set\u003cTag\u003e tags, Answer answer, Score score) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(question, definitions, tags, answer, score);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.choices.addAll(choices);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Creates a deep copy of a given MCQ flashcard."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param toClone the flashcard to be cloned"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public McqFlashcard(McqFlashcard toClone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        super(toClone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.choices.addAll(toClone.getChoices());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Returns an immutable choice list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * if modification is attempted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public List\u003cChoice\u003e getChoices() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return Collections.unmodifiableList(choices);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isValidFlashcard() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (choices \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Choice choice : choices) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (choice.getChoice().equals(answer.getAnswer())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean isMcq() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof McqFlashcard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        McqFlashcard otherMcqFlashcard \u003d (McqFlashcard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return super.equals(other) \u0026\u0026 choices.equals(otherMcqFlashcard.getChoices());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        builder.append(getQuestion()).append(\"\\n\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                .append(\"\\nDefinitions:\").append(\"\\n\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                .append(getDefinition()).append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            builder.append(\"\\nTags:\").append(\"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!choices.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            builder.append(\"\\nChoices:\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            for (Choice choice : getChoices()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                builder.append(Integer.toString(index) + \". \" + choice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 37,
      "jolynnn8D": 54,
      "Akimatsu98": 9
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * The question of the flashcard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            \"Questions should only contain alphanumeric characters, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                + \"normal symbols like question marks and commas and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\S.*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public final String question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if a giving string is a valid word."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Transform this question to become a label for the statistics bar graph."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Only takes the first five words of the question."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String shortenForLabel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String[] splitQuestion \u003d question.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String label \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        int labelLength \u003d 6;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 0; i \u003c labelLength; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (i \u003d\u003d splitQuestion.length) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            label \u003d label + splitQuestion[i] + \" \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (i \u003d\u003d labelLength - 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                label \u003d label + \"...\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (splitQuestion.length \u003e labelLength) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            label \u003d label + \" \" + splitQuestion[splitQuestion.length - 1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                || (other instanceof Question)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                \u0026\u0026 question.equals(((Question) other).question);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return question.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 56,
      "lzw12345": 2,
      "jolynnn8D": 12
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/Score.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Score of each Flashcard"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        \"The two numbers for the score, correct answers and wrong answers, must both be non-negative\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private int correctAnswers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private int wrongAnswers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Used when the user is creating a new flashcard."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Score() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.correctAnswers \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.wrongAnswers \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Used when loading score from Json file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Score(int correctAnswers, int wrongAnswers) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        checkArgument(isValidScore(correctAnswers, wrongAnswers), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.correctAnswers \u003d correctAnswers;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.wrongAnswers \u003d wrongAnswers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Used to check in the storage class to ensure the scores loaded are valid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean isValidScore(String score) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String[] splitScore \u003d score.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (splitScore.length !\u003d 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Integer.parseInt(splitScore[0]) \u003e\u003d 0 \u0026\u0026 Integer.parseInt(splitScore[1]) \u003e\u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Used to check for int values."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static boolean isValidScore(int correctAnswers, int wrongAnswers) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return correctAnswers \u003e\u003d 0 \u0026\u0026 wrongAnswers \u003e\u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Returns the number of times the flashcard has been answered correctly."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Number of correct answers."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public int getCorrectAnswers() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return correctAnswers;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Returns the number of times the flashcard has been answered wrongly."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Number of wrong answers."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public int getWrongAnswers() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return wrongAnswers;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Returns the number of times the flashcard has been answered."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * @return Total number of attempts of the flashcard."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public int getTotalAttempts() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return correctAnswers + wrongAnswers;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Adds one to the number of times the flashcard has been correctly answered."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void incrementCorrectAnswer() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.correctAnswers++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Adds one to the number of times the flashcard has been wrongly answered."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void incrementWrongAnswer() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.wrongAnswers++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Score otherScore \u003d (Score) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return correctAnswers \u003d\u003d otherScore.correctAnswers \u0026\u0026 wrongAnswers \u003d\u003d otherScore.wrongAnswers;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 32,
      "lzw12345": 12,
      "jolynnn8D": 52
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/ShortAnswerFlashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * Short Answer MCQ flashcard. Does not contain any choices."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class ShortAnswerFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This initializer is used when the user is creating a new flashcard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public ShortAnswerFlashcard(Question question, Definition definitions, Set\u003cTag\u003e tags, Answer answer) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        super(question, definitions, tags, answer);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Creates a deep copy of a short answer flashcard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param toClone the flashcard to be cloned"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public ShortAnswerFlashcard(ShortAnswerFlashcard toClone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        super(toClone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This initializer should only be accessed by the storage package, because this initializer ensures the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * flashcard scores can be reloaded"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ShortAnswerFlashcard(Question question, Definition definition, Set\u003cTag\u003e tags, Answer answer, Score score) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(question, definition, tags, answer, score);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isValidFlashcard() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof ShortAnswerFlashcard)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return super.equals(other);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean isMcq() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 25,
      "jolynnn8D": 19,
      "Akimatsu98": 8
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/UniqueFlashcardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * flashcards uses Flashcard#isSameFlashcard(Flashcard) for equality so as to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * ensure that the flashcard being added or updated is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * unique in terms of identity in the UniqueFlashcardList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * However, the removal of a flashcard uses Flashcard#equals(Object) so"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * as to ensure that the flashcard with exactly the same fields will be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @see Flashcard#isSameFlashcard(Flashcard)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard as the given argument"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Add a flashcard to the flashcard list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The flashcard should not already exist in the flashcard list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The flashcard word of {@code editedFlashcard} must not be the same as another existing Flashcard in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Remove the equivalent flashcard from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This flashcard must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Replace the contents of the list with P{@code flashcards}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Otherwise, DuplicateCardException will be thrown"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(flashcards);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code observableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnimodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns all tags appeared in the system."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Set\u003cTag\u003e getAllTags() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Set\u003cTag\u003e allTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard flashcard : internalList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            allTags.addAll(flashcard.getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return allTags;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if the given tag has ever appeared in the flashcard list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean anyFlashcardHasTag(Tag tag) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard flashcard : internalList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (flashcard.hasTag(tag)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Remove the given tag from all the flashcard in the system"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            Flashcard flashcard \u003d internalList.get(i);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            Flashcard edited;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            if (flashcard.isMcq()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                edited \u003d new McqFlashcard((McqFlashcard) flashcard);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                edited \u003d new ShortAnswerFlashcard((ShortAnswerFlashcard) flashcard);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            if (edited.hasTag(tag)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                internalList.remove(i);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                edited.removeTag(tag);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                internalList.add(i, edited);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                || ((other instanceof UniqueFlashcardList)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true of {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 171,
      "Akimatsu98": 14
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/exceptions/CardNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The exception when a particular card id cannot be found"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CardNotFoundException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 6
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/exceptions/ChoiceNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * The exception when a choice id is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class ChoiceNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 7
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/flashcard/exceptions/DuplicateCardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Exception for when adding two same cards into a tag"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DuplicateCardException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 6
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents a Tag in the flashcard list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if the given string is a valid tag name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                || (other instanceof Tag"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 46
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Generate the sample data to make the default flashcard list nicer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Flashcard[] getSampleFlashcards() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Flashcard[]{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of the following is true about compactness?\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"The real number space is a compact space\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"The complex plane is a compact space\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"A compact subspace of a compact metric space must be closed\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"A closed subspace of a compact metric space must be compact\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new Definition(\"For any open covering of a metric space, there is a finite subcover.\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                     getTagSet(\"mathematics\", \"metric space\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new Answer(\"A compact subspace of a compact metric space must be closed\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of the following is true about completeness?\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"The rational number space is a complete space\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"Compact spaces are always complete\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"A complete subspace of a complete space myst be totally bounded\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    \"Closed subspaces in a complete metric space is also complete\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new Definition(\"Any Cauchy sequence converges in this metric space\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                getTagSet(\"mathematics\", \"metric space\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new Answer(\"Closed subspaces in a complete metric space is also complete\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"What is the 11611 meters tunnel on the border of France and Italy?\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new Definition(\"An amazing tunnel in Europe.\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                getTagSet(\"geography\", \"favorite\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Mount Blanc Tunnel\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"What is the largest known living organism?\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"It is an aspen grove in Utah.\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"trivia\", \"biology\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Pando\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"What does M \u0026 M stand for?\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Matthew \u0026 Melvin\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        \"Mars \u0026 Melvin\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        \"Mars \u0026 Murrie\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"They are names of the two sons of the Mars Company founder \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        + \"and the Hershey Chocolate\u0027s president respectively.\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"trivia\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Mars \u0026 Murrie\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of the following describes the service-oriented architecture style?\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Divides the workload of the system down to a number of transactions which \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"are then given to a dispatcher that controls the execution of each transaction. \","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        \"Builds applications by combining functionalities packaged as programmatically \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"accessible services.\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        \"Controls the flow of the application by detecting events \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"from event emitters and communicating those events to interested event consumers\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"Covered in Week 11.\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"cs2103\", \"design\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Builds applications by combining functionalities packaged as programmatically \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        + \"accessible services.\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of the following describes the event-driven style?\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Divides the workload of the system down to a number of transactions which \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"are then given to a dispatcher that controls the execution of each transaction. \","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        \"Builds applications by combining functionalities packaged as programmatically \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"accessible services.\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        \"Controls the flow of the application by detecting events \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"from event emitters and communicating those events to interested event consumers\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"Covered in Week 11.\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"cs2103\", \"design\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Controls the flow of the application by detecting events \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        + \"from event emitters and communicating those events to interested event consumers\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of the following describes the transaction processing style?\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Divides the workload of the system down to a number of transactions which \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"are then given to a dispatcher that controls the execution of each transaction.\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        \"Builds applications by combining functionalities packaged as programmatically \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"accessible services.\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        \"Controls the flow of the application by detecting events \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                + \"from event emitters and communicating those events to interested event consumers\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"Covered in Week 11.\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"cs2103\", \"design\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Divides the workload of the system down to a number of transactions which are \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        + \"then given to a dispatcher that controls the execution of each transaction.\")),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"Which test case design type designs test cases \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + \"exclusively based on the SUT’s specified external behavior?\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"Covered in Week 10.\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"cs2103\", \"test case design\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Black-box approach\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"Which test case design type designs test cases \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + \"based on what is known about the SUT’s implementation?\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"Covered in Week 10.\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"cs2103\", \"test case design\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"White-box approach\")),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"What is the name given to the lower register of\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + \" the clarinet\u0027s playing range?\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"Range of E3 to Bb4\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"music\", \"trivia\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Chalumeau\")),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Who composed the New World Symphony?\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Brahms\", \"Mozart\", \"Dvorak\", \"Beethoven\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"It is also called Symphony No.9 in E minor\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"music\", \"trivia\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Dvorak\")),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"Which of Tchaikovsky\u0027s overture commemorated \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + \"Napolean\u0027s retreat from Moscow?\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"It was written in 1880 and consisted of cannon fire.\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"music\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"1812 Overture\")),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of these mean: easily angered?\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Irascible\", \"Invective\", \"Inveterate\", \"Irreverence\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"SAT vocabulary word\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"english\", \"SAT\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Irascible\")),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of these mean: an angry verbal attack?\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Irascible\", \"Invective\", \"Inveterate\", \"Irreverence\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"SAT vocabulary word\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"english\", \"SAT\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Invective\")),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of these mean: disrespect?\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Irascible\", \"Invective\", \"Inveterate\", \"Irreverence\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"SAT vocabulary word\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"english\", \"SAT\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new Answer(\"Irreverence\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new McqFlashcard(new Question(\"Which of these mean: stubbornly established by a habit?\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getChoiceList(\"Irascible\", \"Invective\", \"Inveterate\", \"Irreverence\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"SAT vocabulary word\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"english\", \"SAT\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Inveterate\")),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"Which design principle states that \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + \"a class should only have one and only one reason to change?\"),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"If a class has only one responsibility, it needs to change only when \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        + \"there is a change to that responsibility.\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"cs2103\", \"design\"),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Single Responsibility Principle\")),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"Which design principle states that \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + \"a module should be open for extension but closed for modification?\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"Modules should be written so that they can be extended, \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                        + \"without requiring them to be modified.\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"cs2103\", \"design\"),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Open-Close Principle\")),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            new ShortAnswerFlashcard(new Question(\"Which principle states that \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    + \"no client should be forced to depend on methods it does not use?\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Definition(\"Covered in Week 9.\"),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                getTagSet(\"cs2103\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                new Answer(\"Interface Segregation Principle\")),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static ReadOnlyFlashcardList getSampleFlashcardList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardList samplefl \u003d new FlashcardList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard flashcard : getSampleFlashcards()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            samplefl.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return samplefl;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns a choice set containing the list of strings given."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static List\u003cChoice\u003e getChoiceList(String... strings) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .map(Choice::new)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 56,
      "lzw12345": 9,
      "jolynnn8D": 118
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/FlashcardStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents a storage for {@link seedu.flashcard.model.FlashcardList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public interface FlashcardStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * get the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Path getFlashcardListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns flashcard list data as a {@code ReadOnlyFlashcardList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return the flashcard list been read."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException is there is any problem while reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Optional\u003cReadOnlyFlashcardList\u003e readFlashcardList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Same as {@code readFlashcardList()}, but get the flashcard list from a file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Optional\u003cReadOnlyFlashcardList\u003e readFlashcardList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * saves the given flashcard list {@code flashcardList} into storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param flashcardList the flashcard list to be saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException if there was any problem in the saving process."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void saveFlashcardList(ReadOnlyFlashcardList flashcardList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Same as {@code saveFlashcardList(ReadOnlyFlashcardList flashcardList)}, but specifies which file to save to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void saveFlashcardList(ReadOnlyFlashcardList flashcardList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 44
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonAdaptedChoice.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Jackson-friendly version of {@link Choice}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class JsonAdaptedChoice {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final String choice;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Constructs a {@code JsonAdaptedChoice} with the given {@code choice}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public JsonAdaptedChoice(String choice) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.choice \u003d choice;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Converts a given {@code Choice} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public JsonAdaptedChoice(Choice source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        choice \u003d source.choice;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getChoice() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return choice;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Converts this Jackson-friendly adapted Choice object into the model\u0027s {@code Choice} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Choice."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Choice toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!Choice.isValidChoice(choice)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            throw new IllegalValueException(Choice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new Choice(choice);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 46
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonAdaptedFlashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Score;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Make the flashcard item more json friendly."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final String definition;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final String score;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final List\u003cJsonAdaptedChoice\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                @JsonProperty(\"choices\") List\u003cJsonAdaptedChoice\u003e choices,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                @JsonProperty(\"definition\") String definition,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                @JsonProperty(\"score\") String score,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                @JsonProperty(\"type\") String type) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (choices !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            this.choices.addAll(choices);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.definition \u003d definition;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        question \u003d source.getQuestion().question;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (source.isMcq()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            McqFlashcard mcqCard \u003d (McqFlashcard) source;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            choices.addAll(mcqCard.getChoices().stream().map(JsonAdaptedChoice::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        definition \u003d source.getDefinition().definition;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tagged.addAll(source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        answer \u003d source.getAnswer().answer;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (source.isMcq()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            type \u003d \"McqFlashcard\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            type \u003d \"ShortAnswerFlashcard\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        score \u003d new JsonAdaptedScore(source.getScore()).getScore();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final List\u003cTag\u003e flashcardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            flashcardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (definition \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Definition.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Definition.isValidDefinition(definition)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException(Definition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final Definition modelDefinition \u003d new Definition(definition);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        final List\u003cChoice\u003e flashcardChoices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (score \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Score.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Score.isValidScore(score)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException(Definition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String[] splitScore \u003d score.split(\" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int correctAnswer \u003d Integer.parseInt(splitScore[0]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int wrongAnswer \u003d Integer.parseInt(splitScore[1]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final Score modelScore \u003d new Score(correctAnswer, wrongAnswer);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        for (JsonAdaptedChoice choice : choices) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            flashcardChoices.add(choice.toModelType());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        final List\u003cChoice\u003e modelChoices \u003d new ArrayList\u003c\u003e(flashcardChoices);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (type.equals(\"McqFlashcard\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            McqFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new McqFlashcard(modelQuestion, modelChoices, modelDefinition, modelTags, modelAnswer, modelScore);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return flashcard;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else if (type.equals(\"ShortAnswerFlashcard\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ShortAnswerFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new ShortAnswerFlashcard(modelQuestion, modelDefinition, modelTags, modelAnswer, modelScore);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return flashcard;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException(\"Issue in saved file, the flashcard type is incorrect.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 108,
      "lzw12345": 2,
      "jolynnn8D": 45
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonAdaptedScore.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Score;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Json-friendly version of {@link seedu.flashcard.model.flashcard.Score}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonAdaptedScore {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final String score;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a {@code JsonAdaptedScore} with given {@code score}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonAdaptedScore(String score) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts a given {@code score} into this class for Jackson use"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonAdaptedScore(Score score) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.score \u003d score.getCorrectAnswers() + \" \" + score.getWrongAnswers();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String getScore() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts this Jackson friendly score object into the model\u0027s {@code Score} object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Score toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Score.isValidScore(score)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String[] splitedScore \u003d score.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int correctAnswers \u003d Integer.parseInt(splitedScore[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int wrongAnswers \u003d Integer.parseInt(splitedScore[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Score(correctAnswers, wrongAnswers);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 48
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 47
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonFlashcardListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A class to access FlashcardList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonFlashcardListStorage implements FlashcardStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFlashcardListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonFlashcardListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getFlashcardListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardList\u003e readFlashcardList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return readFlashcardList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Similar to {@link #readFlashcardList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardList\u003e readFlashcardList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Optional\u003cJsonSerializableFlashcardList\u003e jsonFlashcardList \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                JsonUtil.readJsonFile(filePath, JsonSerializableFlashcardList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!jsonFlashcardList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return Optional.of(jsonFlashcardList.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void saveFlashcardList(ReadOnlyFlashcardList flashcardList) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        saveFlashcardList(flashcardList, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Similar to {@link #saveFlashcardList(ReadOnlyFlashcardList)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void saveFlashcardList(ReadOnlyFlashcardList flashcardList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(flashcardList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFlashcardList(flashcardList), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 77
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonSerializableFlashcardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * An Immutable FlashcardList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "@JsonRootName(value \u003d \"flashcardlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonSerializableFlashcardList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcards list contains duplicate persons\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_FLASHCARD \u003d \"The Json file provided an illegal flashcard\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a {@code JsonSerializableFlashcardList} with the given flashcards."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonSerializableFlashcardList(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts a given {@code ReadOnlyFlashcardList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFlashcardList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonSerializableFlashcardList(ReadOnlyFlashcardList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcards.addAll(source.getFlashcardList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .map(JsonAdaptedFlashcard::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Converts this flashcard list into the model\u0027s {@code FlashcardList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardList flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Flashcard flashcard \u003d jsonAdaptedFlashcard.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (!flashcard.isValidFlashcard()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_ILLEGAL_FLASHCARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (flashcardList.hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            flashcardList.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 63
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 46
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The general interface of all storage usage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * This is the window for storage package to communicate to the outside."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public interface Storage extends FlashcardStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Path getFlashcardListFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Optional\u003cReadOnlyFlashcardList\u003e readFlashcardList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Optional\u003cReadOnlyFlashcardList\u003e readFlashcardList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 32
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The general manager controlling the the whole storage logic and function of this package."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private FlashcardStorage flashcardStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public StorageManager(FlashcardStorage flashcardStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.flashcardStorage \u003d flashcardStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path getFlashcardListFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcardStorage.getFlashcardListFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardList\u003e readFlashcardList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return readFlashcardList(flashcardStorage.getFlashcardListFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Optional\u003cReadOnlyFlashcardList\u003e readFlashcardList(Path filePath)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcardStorage.readFlashcardList(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void saveFlashcardList(ReadOnlyFlashcardList flashcardList) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        saveFlashcardList(flashcardList, flashcardStorage.getFlashcardListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void saveFlashcardList(ReadOnlyFlashcardList flashcardList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcardStorage.saveFlashcardList(flashcardList, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 75
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents a storage for {@link seedu.flashcard.model.UserPrefs}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Gert the file path of the user prefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the user prefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return the user prefs read from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException if there was any problem when reading from storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Save the given {@code ReadOnlyUserPrefs} into storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IOException if there was any problem writing the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 35
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Represent a function that can execute commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * Executes the command and returns result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 74
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/FlashcardCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represents a single flashcard unit in the user interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String FXML \u003d \"FlashcardCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Label definition;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardCard(Flashcard flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        question.setText(flashcard.getQuestion().question);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        definition.setText(flashcard.getDefinition().definition);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcard.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                   .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                   .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof FlashcardCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardCard card \u003d (FlashcardCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 66,
      "jolynnn8D": 2
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/FlashcardDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " * The command feed back to the user. Just that window below the text box."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class FlashcardDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private static final String FXML \u003d \"FlashcardDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private TextArea flashcardDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public FlashcardDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        flashcardDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 27
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/FlashcardListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ListView\u003cFlashcard\u003e flashcardListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcardListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        protected void updateItem(Flashcard flashcard, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                setGraphic(new FlashcardCard(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 46
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        \"https://github.com/AY1920S1-CS2103-T14-3/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 102
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent the whole window of the user interface, it should contain all units in the user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private FlashcardListPanel flashcardListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private StatsDisplay statsDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private FlashcardDisplay flashcardDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private StackPane flashcardListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private StackPane flashcardDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private StackPane statisticsDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private StackPane timerDisplayPlaceHolder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TimerDisplay timerDisplay;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statsDisplay \u003d new StatsDisplay(logic.getStatistics());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        timerDisplay \u003d new TimerDisplay(this::executeCommand, logic.getDurationProperty(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                logic.getTotalCardsProperty(), logic.getRemainingCardsProperty());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        flashcardDisplay \u003d new FlashcardDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        flashcardDisplayPlaceholder.getChildren().add(flashcardDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFlashcardListFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Opens the stats display or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void handlestats() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statsDisplay.updateStats();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!statsDisplay.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            statsDisplay.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            statsDisplay.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statsDisplay.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Controls the timer display"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private void handleTimer() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (timerDisplayPlaceHolder.getChildren().isEmpty()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            timerDisplay.initializeTimer();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            timerDisplayPlaceHolder.getChildren().add(timerDisplay.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            timerDisplay.initializeTimer();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcardListPanel;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see seedu.flashcard.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                handlestats();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            if (commandResult.isFlip()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                flashcardDisplay.setFeedbackToUser(commandResult.getFlashcardToDisplay());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                if (logic.isQuiz()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    handleTimer();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    timerDisplay.stopTimer();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    timerDisplayPlaceHolder.getChildren().clear();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 188,
      "lzw12345": 57,
      "jolynnn8D": 8,
      "Akimatsu98": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The command feed back to the user. Just that window below the text box."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 27
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/StatsDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.chart.StackedBarChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Creates a scrollabe display for a graphical summary of the stats"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class StatsDisplay extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String FXML \u003d \"StatsDisplay.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatsDisplay.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private PieChart accuracy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private PieChart completion;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private StackedBarChart\u003cString, Number\u003e individualCards;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public StatsDisplay (Statistics statistics, Stage root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        updateStats();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Creates a new Stats Window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public StatsDisplay(Statistics statistics) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this(statistics, new Stage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * repopulates the graphs with updated stats"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void updateStats() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e accuracyPieChartData \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new PieChart.Data(\"Total Correct\", statistics.getTotalCorrect()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new PieChart.Data(\"Total Wrong\", statistics.getTotalWrong()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        accuracy.getData().clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        accuracy.getData().addAll(accuracyPieChartData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        accuracy.setTitle(\"Overall Accuracy\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e completionPieChartData \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new PieChart.Data(\"Total Attempted\", statistics.getTotalAttempted()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new PieChart.Data(\"Total Unattempted\", statistics.getTotalUnattempted()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        completion.getData().clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        completion.getData().addAll(completionPieChartData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        completion.setTitle(\"Overall Completion\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        individualCards.getData().clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        individualCards.getData().addAll(statistics.getCorrectSeries(), statistics.getWrongSeries());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        individualCards.setTitle(\"Statistics by card\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        scrollPane.setFitToHeight(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Shows the Stats window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        logger.fine(\"Showing stats about the tasks.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Returns true if the stats window is currently being shown."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Hides the stats window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Focuses on the stats window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 129
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The status bar at the bottom of the whole window."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 25
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/TimerDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Represents the quiz timer, it handles the quiz mode timer and skipping questions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class TimerDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String FXML \u003d \"TimerDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static Integer defaultTime \u003d 15;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static Integer startTime \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static IntegerProperty userPrefTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private IntegerProperty timeSeconds \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            new SimpleIntegerProperty(startTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Label timerLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Label currentQuestion;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Label totalQuestions;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public TimerDisplay(CommandExecutor commandExecutor, IntegerProperty duration,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        IntegerProperty totalCards, IntegerProperty remainingCards) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        timerLabel.textProperty().bind(timeSeconds.asString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        currentQuestion.textProperty().bind(remainingCards.asString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        totalQuestions.textProperty().bind(totalCards.asString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        userPrefTime \u003d duration;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Starts/Restarts the timer with a user defined duration"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    void initializeTimer () {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        timeline.stop();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (userPrefTime.getValue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            startTime \u003d defaultTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            startTime \u003d userPrefTime.getValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        timeSeconds.set(startTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(startTime + 1), ae -\u003e timerExpire(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new KeyValue(timeSeconds, 0)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        timeline.playFromStart();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Handles the timer expiring event by skipping the current flashcard"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private void timerExpire() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            commandExecutor.execute(\"skip\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            //shouldn\u0027t ever occur in this usage"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * stops the timer and prevents it from counting down further"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void stopTimer() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (timeline !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Represent a function that can execute commands."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         * Executes the command and returns result."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 109
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * API of user interface component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Starts the UI, which is equivalent to start the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 15
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The manager that operates the whole ui running logic."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/flashmind_icon.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, Alert.AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 83,
      "Akimatsu98": 1
    }
  },
  {
    "path": "src/main/java/seedu/flashcard/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent each part in the user interface, like the card unit, text boc etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * @param \u003cT\u003e the root kind of this unit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    -fx-background-color: rgb(255, 255, 255);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    -fx-background-color: rgba(255, 255, 255, 0.87);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    -fx-background-color: rgba(203, 203, 214, 0.938)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    -fx-border-color: #2792af;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    -fx-text-fill: #424d5f;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ".pane-with-border-2 {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ".flashcard-display {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ".flashcard-display .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "#flashcardDisplay .content {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "#flashcardDisplay {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 16,
      "-": 349,
      "Akimatsu98": 11,
      "jolynnn8D": 9
    }
  },
  {
    "path": "src/main/resources/view/FlashcardCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" accessibleRole\u003d\"LIST_VIEW\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cGridPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" stylesheets\u003d\"@DarkTheme.css\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cLabel fx:id\u003d\"definition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 22,
      "-": 16
    }
  },
  {
    "path": "src/main/resources/view/FlashcardDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefWidth\u003d\"300\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003cTextArea fx:id\u003d\"flashcardDisplay\" editable\u003d\"false\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefWidth\u003d\"300\" styleClass\u003d\"background\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 2,
      "jolynnn8D": 6
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cListView fx:id\u003d\"flashcardListView\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cfx:root onCloseRequest\u003d\"#handleExit\" title\u003d\"Flashmind\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"200\" prefWidth\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                     \u003cMenuBar VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                       \u003cmenus\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                         \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                             \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003c/Menu\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                             \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"About\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                       \u003c/menus\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                     \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                           \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                 \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                 \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                 \u003cStackPane fx:id\u003d\"flashcardDisplayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                           \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                           \u003cVBox minWidth\u003d\"300.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                 \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\" minWidth\u003d\"300.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                 \u003cStackPane fx:id\u003d\"timerDisplayPlaceHolder\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 28,
      "-": 20,
      "Akimatsu98": 14
    }
  },
  {
    "path": "src/main/resources/view/PieChart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ".default-color0.chart-pie { -fx-pie-color: #006400; }"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ".default-color1.chart-pie { -fx-pie-color: #A73333; }"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lzw12345": 3
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"300\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" minWidth\u003d\"300\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StackedBarChart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ".default-color0.chart-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-bar-fill:  #006400;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ".default-color1.chart-bar {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    -fx-bar-fill:  #A73333;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 7
    }
  },
  {
    "path": "src/main/resources/view/StatsDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.chart.StackedBarChart?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cfx:root type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cBorderPane prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003ctop\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003cHBox prefHeight\u003d\"200.0\" prefWidth\u003d\"400.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                     \u003cPieChart fx:id\u003d\"accuracy\" animated\u003d\"false\" stylesheets\u003d\"@PieChart.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                     \u003cPieChart fx:id\u003d\"completion\" animated\u003d\"false\" stylesheets\u003d\"@PieChart.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003c/top\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003cScrollPane fx:id\u003d\"scrollPane\" pannable\u003d\"true\" prefHeight\u003d\"200.0\" prefWidth\u003d\"400.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                     \u003cStackedBarChart fx:id\u003d\"individualCards\" animated\u003d\"false\" categoryGap\u003d\"4.0\" legendSide\u003d\"LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"400.0\" prefHeight\u003d\"400.0\" stylesheets\u003d\"@StackedBarChart.css\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                       \u003cxAxis\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                         \u003cCategoryAxis animated\u003d\"false\" side\u003d\"BOTTOM\" fx:id\u003d\"xAxis\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                       \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                       \u003cyAxis\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                         \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                       \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                     \u003c/StackedBarChart\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003c/center\u003e\u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 41
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" maxWidth\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/TimerDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cGridPane gridLinesVisible\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"522.6666564941406\" minWidth\u003d\"10.0\" prefWidth\u003d\"298.66668701171875\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"302.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"301.33331298828125\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cGridPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"97.3333740234375\" minWidth\u003d\"10.0\" prefWidth\u003d\"91.3333740234375\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"182.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"128.66666666666663\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"94.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Remaining Questions\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cGridPane GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"97.3333740234375\" minWidth\u003d\"10.0\" prefWidth\u003d\"91.3333740234375\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"182.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"128.66666666666663\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"94.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cLabel fx:id\u003d\"currentQuestion\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cGridPane GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"97.3333740234375\" minWidth\u003d\"10.0\" prefWidth\u003d\"91.3333740234375\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"182.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"128.66666666666663\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"94.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Total Questions\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cGridPane GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"97.3333740234375\" minWidth\u003d\"10.0\" prefWidth\u003d\"91.3333740234375\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"182.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"128.66666666666663\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"94.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalQuestions\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cGridPane GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"97.3333740234375\" minWidth\u003d\"10.0\" prefWidth\u003d\"91.3333740234375\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"182.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"128.66666666666663\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"94.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Remaining Time\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cGridPane GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"97.3333740234375\" minWidth\u003d\"10.0\" prefWidth\u003d\"91.3333740234375\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"182.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"128.66666666666663\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"94.6666259765625\" minWidth\u003d\"10.0\" prefWidth\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cLabel fx:id\u003d\"timerLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 110
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(fifthPersonIndex \u003d\u003d null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "lzw12345": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 5,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 18,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.commands.DeleteCommand.MESSAGE_INVALID_FLASHCARD_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.JsonFlashcardListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonFlashcardListStorage flashcardListStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new JsonFlashcardListStorage(temporaryFolder.resolve(\"flashcardlist.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(flashcardListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String invalidCommand \u003d \"fhdjskfh\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void execute_invalidCommandFormat_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String deleteCommand \u003d \"delete 409\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashcardList().remove(0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 117
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.Quiz;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.Statistics;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        ModelStubAcceptingFlashcardAdded modelStub \u003d new ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFlashcard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.flashcardsAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().buildMcqFlashcard();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFlashcard);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                addCommand.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard card1 \u003d new FlashcardBuilder().withQuestion(\"Card1?\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard card2 \u003d new FlashcardBuilder().withQuestion(\"Card2?\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        AddCommand addCard1Command \u003d new AddCommand(card1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        AddCommand addCard2Command \u003d new AddCommand(card2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertTrue(addCard1Command.equals(addCard1Command));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        AddCommand addCard1CommandCopy \u003d new AddCommand(card1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertTrue(addCard1Command.equals(addCard1CommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertFalse(addCard1Command.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(addCard1Command \u003d\u003d null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertFalse(addCard1Command.equals(addCard2Command));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public Predicate\u003cFlashcard\u003e getHasTagPredicate(Set\u003cTag\u003e tag) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public Set\u003cTag\u003e getAllSystemTags() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public Path getFlashcardListFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void setFlashcardListFilePath(Path flashcardListFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void addFlashcard(Flashcard card) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void setFlashcardList(ReadOnlyFlashcardList newData) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public ReadOnlyFlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public boolean hasFlashcard(Flashcard card) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public boolean systemHasTag(Tag tag) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void systemRemoveTag(Tag tag) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void updateLastViewedFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public Flashcard getLastViewedFlashcard() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public String generateStatistics() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public Quiz getQuiz() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void setQuiz(List\u003cFlashcard\u003e quizableFlashcards) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void setQuizDuration(Integer duration) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public boolean canUndoFlashcardList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public boolean canRedoFlashcardList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void undoFlashcardList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void redoFlashcardList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void commitFlashcardList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public IntegerProperty getDurationProperty() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public IntegerProperty getTotalCardsProperty() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public IntegerProperty getRemainingCardsProperty() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private class ModelStubWithFlashcard extends ModelStub {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        ModelStubWithFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return this.flashcard.isSameFlashcard(flashcard);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * A Model stub that always accept the flashcard being added."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends ModelStub {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e flashcardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return flashcardsAdded.stream().anyMatch(flashcard::isSameFlashcard);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void commitFlashcardList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            flashcardsAdded.add(flashcard);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        public ReadOnlyFlashcardList getFlashcardList() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return new FlashcardList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 1,
      "Akimatsu98": 307
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.FlashcardContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_QUESTION_APPLE \u003d \"What color is an apple?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_QUESTION_BANANA \u003d \"What color is a banana?\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_DEFINITION_APPLE \u003d \"It is a round sweet juicy fruit.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_DEFINITION_BANANA \u003d \"It is a curly sweet fruit, not so juicy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_TAG_ROUND \u003d \"round\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_TAG_LONG \u003d \"long\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final String VALID_TAG_CIVIL_ENGINEERING \u003d \"Civil Engineering\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_ANSWER_APPLE \u003d \"Red\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_ANSWER_BANANA \u003d \"Yellow\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_CHOICE_RED \u003d \"Red\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_CHOICE_YELLOW \u003d \"Yellow\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_CHOICE_BLUE \u003d \"Blue\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String VALID_CHOICE_GREEN \u003d \"Green\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String QUESTION_DESC_APPLE \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_APPLE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String QUESTION_DESC_BANANA \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_BANANA;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String DEFINITION_DESC_APPLE \u003d \" \" + PREFIX_DEFINITION + VALID_DEFINITION_APPLE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String DEFINITION_DESC_BANANA \u003d \" \" + PREFIX_DEFINITION + VALID_DEFINITION_BANANA;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String ANSWER_DESC_APPLE \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_APPLE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String ANSWER_DESC_BANANA \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_BANANA;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String TAG_DESC_ROUND \u003d \" \" + PREFIX_TAG + VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String TAG_DESC_LONG \u003d \" \" + PREFIX_TAG + VALID_TAG_LONG;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String CHOICE_DESC_RED \u003d \" \" + PREFIX_CHOICE + VALID_CHOICE_RED;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String CHOICE_DESC_YELLOW \u003d \" \" + PREFIX_CHOICE + VALID_CHOICE_YELLOW;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String CHOICE_DESC_GREEN \u003d \" \" + PREFIX_CHOICE + VALID_CHOICE_GREEN;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String CHOICE_DESC_BLUE \u003d \" \" + PREFIX_CHOICE + VALID_CHOICE_BLUE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + \" \"; // Questions cannot be empty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String INVALID_DEFINITION_DESC \u003d \" \" + PREFIX_DEFINITION + \" \"; // Definitions cannot be empty"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"*\"; //Tags cannot be empty"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER + \" \"; //Answers cannot be empty"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String INVALID_CHOICE_DESC \u003d \" \" + PREFIX_CHOICE + \" \"; //Choice cannot be empty"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String INVALID_QUESTION \u003d \" \"; // Questions cannot be empty"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String INVALID_DEFINITION \u003d \" \"; // Definitions cannot be empty"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String INVALID_TAG \u003d \"*\"; //Tags cannot be empty"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String INVALID_ANSWER \u003d \" \"; //Answers cannot be empty"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final String INVALID_CHOICE \u003d \" \"; //Choice cannot be empty"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t \\r \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final EditFlashcardDescriptor DESC_APPLE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final EditFlashcardDescriptor DESC_BANANA;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        DESC_APPLE \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_APPLE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  .withAnswer(VALID_ANSWER_APPLE).withDefinition(VALID_DEFINITION_APPLE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                  .withChoices(VALID_CHOICE_RED, VALID_CHOICE_BLUE, VALID_CHOICE_GREEN, VALID_CHOICE_YELLOW).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        DESC_BANANA \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                  .withAnswer(VALID_ANSWER_BANANA).withDefinition(VALID_DEFINITION_BANANA).withTag(VALID_TAG_LONG)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                  .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            // assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * - the flashcard list, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static void assertCommandFailure(seedu.flashcard.logic.commands.Command command,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                                            seedu.flashcard.model.Model actualModel,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                                            CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        FlashcardList expectedFlashcardList \u003d new FlashcardList(actualModel.getFlashcardList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // assertThrows(seedu.flashcard.logic.commands.exceptions."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, actualCommandHistory));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertEquals(expectedFlashcardList, actualModel.getFlashcardList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Executes the given code and test whether command fail."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param command command to be tested"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param actualModel the actual model manager"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param expectedMessage expected message to be displayed"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param expectedModel the expected model manager"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param commandHistory command history"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                                            Model expectedModel, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, commandHistory));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertEquals(actualModel, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Deletes the first flashcard in {@code model}\u0027s filtered list from {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public static void deleteFirstFlashcard(Model model) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard firstFlashcard \u003d model.getFilteredFlashcardList().get(0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.deleteFlashcard(firstFlashcard);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.commitFlashcardList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        final String[] splitAns \u003d flashcard.getAnswer().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model.updateFilteredFlashcardList(new FlashcardContainsKeywordsPredicate(Arrays.asList(splitAns[0])));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertEquals(1, model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 72,
      "lzw12345": 14,
      "jolynnn8D": 25,
      "Akimatsu98": 62
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.commitFlashcardList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_ID_NUMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.commitFlashcardList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        showNoFlashcard(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        //showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of flashcard list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashcardList().getFlashcardList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_ID_NUMBER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.commitFlashcardList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.undoFlashcardList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.redoFlashcardList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_ID_NUMBER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * 1. Deletes a {@code Flashcard} from a filtered list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted flashcard in the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the flashcard object regardless of indexing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameFlashcardDeleted() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        //showFlashcardAtIndex(model, INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.commitFlashcardList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // delete -\u003e deletes second flashcard in unfiltered flashcard list / first flashcard in filtered flashcard list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // undo -\u003e reverts flashcard list back to previous state and filtered flashcard list to show all flashcards"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.undoFlashcardList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // assertNotEquals(flashcardToDelete, model.getFilteredFlashcardList()."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // get(INDEX_FIRST_FLASHCARD.getZeroBased()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // redo -\u003e deletes same second flashcard in unfiltered flashcard list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.redoFlashcardList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(deleteFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private void showNoFlashcard(Model model) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.updateFilteredFlashcardList(p -\u003e false);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertTrue(model.getFilteredFlashcardList().isEmpty());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 1,
      "Akimatsu98": 174
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ShortAnswerFlashcard editedFlashcard \u003d new FlashcardBuilder().buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_THIRD_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FlashcardList(model.getFlashcardList()), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(2), editedFlashcard);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertCommandSuccess(editCommand, model, new CommandHistory(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 33
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 24
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/FlipCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class FlipCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private static final String CORRECT_ANSWER \u003d \"Your answer: %1$s is correct.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private static final String INCORRECT_ANSWER \u003d \"Your answer: %1$s is incorrect.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            + \"The correct answer is: %2$s\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private static final String QUIZ_END \u003d \"This quiz has ended.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_flashcardsToQuizPresentCorrectAnswer_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard flashcardToQuiz \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        ArrayList\u003cFlashcard\u003e quizList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        quizList.add(flashcardToQuiz);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        model.setQuiz(quizList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Answer correctAnswer \u003d flashcardToQuiz.getAnswer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand(new Answer(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String expectedMessage \u003d String.format(CORRECT_ANSWER, correctAnswer.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertCommandSuccess(flipCommand, model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedMessage, true, QUIZ_END), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_flashcardsToQuizPresentWrongAnswer_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard flashcardToQuiz \u003d model.getFilteredFlashcardList().get(INDEX_THIRD_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        ArrayList\u003cFlashcard\u003e quizList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        quizList.add(flashcardToQuiz);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        model.setQuiz(quizList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Answer correctAnswer \u003d flashcardToQuiz.getAnswer();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Answer wrongAnswer \u003d new Answer(\"Wrong Answer\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand(wrongAnswer);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String expectedMessage \u003d String.format(INCORRECT_ANSWER, wrongAnswer.toString(), correctAnswer.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertCommandSuccess(flipCommand, model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedMessage, true, QUIZ_END), expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_flashcardsToQuizAbsent_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand(new Answer(\"Invalid\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(flipCommand, model, commandHistory, FlipCommand.MESSAGE_NULL_QUIZ_FLASHCARD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_nonNumberInputForMcqFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard flashcardToQuiz \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        ArrayList\u003cFlashcard\u003e quizList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        quizList.add(flashcardToQuiz);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        model.setQuiz(quizList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand(new Answer(\"Invalid\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertCommandFailure(flipCommand, model,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory, FlipCommand.MESSAGE_MCQ_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 78,
      "Akimatsu98": 6
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 24
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ListCardByTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ListCardByTagCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Set\u003cTag\u003e testTags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag1 \u003d new Tag(\"Geography\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag2 \u003d new Tag(\"Civil Engineering\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags.add(testTag1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags.add(testTag2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsNotFilteredandPresentTags_showsSameList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(model.getHasTagPredicate(testTags));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new ListCardByTagCommand(testTags), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory, new CommandResult(ListCardByTagCommand.MESSAGE_SUCCESS), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsFilteredandPresentTags_showsEverything() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(model.getHasTagPredicate(testTags));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new ListCardByTagCommand(testTags), model,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory, new CommandResult(ListCardByTagCommand.MESSAGE_SUCCESS), expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsNotFilteredwithNonExistantTags_showsSameList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Set\u003cTag\u003e wrongTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag wrongTag \u003d new Tag(\"NonExistant\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        wrongTags.add(wrongTag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(model.getHasTagPredicate(wrongTags));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new ListCardByTagCommand(wrongTags), model,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory, new CommandResult(ListCardByTagCommand.MESSAGE_SUCCESS), expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 62,
      "Akimatsu98": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(ListCommand.MESSAGE_SUCCESS), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(ListCommand.MESSAGE_SUCCESS), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 43,
      "Akimatsu98": 4
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ListTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.FlashcardsWithoutTag.getTaglessFlashcardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ListTagCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_tagsExistInSystem_showsSameList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String tagNameList \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        for (Tag tag : model.getAllSystemTags()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tagNameList \u003d tagNameList + tag.tagName + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new ListTagCommand(), model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(ListTagCommand.MESSAGE_SUCCESS + tagNameList), expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_noTagsInSystem_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model \u003d new ModelManager(getTaglessFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new ListTagCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(ListTagCommand.MESSAGE_SUCCESS), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 38,
      "Akimatsu98": 4
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/QuizCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class QuizCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard flashcardToQuiz \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        QuizCommand quizCommand \u003d new QuizCommand(INDEX_FIRST_FLASHCARD, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String expectedMessage \u003d QuizCommand.MESSAGE_RESULT_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String expectedFlashcard \u003d flashcardToQuiz.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        List\u003cFlashcard\u003e quizList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        quizList.add(flashcardToQuiz);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        expectedModel.setQuiz(quizList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertCommandSuccess(quizCommand, model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedMessage, true, expectedFlashcard), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        QuizCommand quizCommand \u003d new QuizCommand(outOfBoundIndex, 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(quizCommand, model, commandHistory, QuizCommand.MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "jolynnn8D": 45,
      "Akimatsu98": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/QuizTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_CIVIL_ENGINEERING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_LONG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.CHANGI_AIRPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.DAXING_AIRPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.MOUNT_BLANC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class QuizTagCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_validTagWithCards_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Tag testTag \u003d new Tag(VALID_TAG_CIVIL_ENGINEERING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Set\u003cTag\u003e testTagSet \u003d Collections.singleton(testTag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        QuizTagCommand quizTagCommand \u003d new QuizTagCommand(testTagSet, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        List\u003cFlashcard\u003e taggedList \u003d new ArrayList\u003c\u003e(Arrays.asList(MOUNT_BLANC, DAXING_AIRPORT, CHANGI_AIRPORT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        expectedModel.setQuiz(taggedList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(expectedModel.getHasTagPredicate(testTagSet));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard firstCard \u003d expectedModel.getQuiz().quizCard();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String expectedMessage \u003d QuizTagCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String expectedFlashcard \u003d firstCard.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertCommandSuccess(quizTagCommand, model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedMessage, true, expectedFlashcard), expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_validTagWithNoCards_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Tag testTag \u003d new Tag(VALID_TAG_LONG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Set\u003cTag\u003e testTagSet \u003d Collections.singleton(testTag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        QuizTagCommand quizTagCommand \u003d new QuizTagCommand(testTagSet, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(expectedModel.getHasTagPredicate(testTagSet));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        expectedModel.setQuiz(Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertCommandFailure(quizTagCommand, model, QuizTagCommand.TAG_INVALID, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "jolynnn8D": 59,
      "Akimatsu98": 2
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.deleteFirstFlashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteFirstFlashcard(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteFirstFlashcard(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.undoFlashcardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        model.undoFlashcardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteFirstFlashcard(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteFirstFlashcard(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.undoFlashcardList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.undoFlashcardList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.redoFlashcardList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.redoFlashcardList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 49
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/SkipCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.SkipCommand.MESSAGE_NULL_QUIZ_FLASHCARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.SkipCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class SkipCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String CORRECT_ANSWER \u003d \"Your answer: %1$s is correct.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String INCORRECT_ANSWER \u003d \"Your answer: %1$s is incorrect.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"The correct answer is: %2$s\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String QUIZ_END \u003d \"This quiz has ended.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_flashcardsToQuizPresentWrongAnswer_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Flashcard flashcardToQuiz \u003d model.getFilteredFlashcardList().get(INDEX_THIRD_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ArrayList\u003cFlashcard\u003e quizList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        quizList.add(flashcardToQuiz);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model.setQuiz(quizList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        SkipCommand skipCommand \u003d new SkipCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(skipCommand, model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new CommandResult(MESSAGE_SUCCESS, true, QUIZ_END), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_flashcardsToQuizAbsent_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        SkipCommand flipCommand \u003d new SkipCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandFailure(flipCommand, model, commandHistory, MESSAGE_NULL_QUIZ_FLASHCARD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 54
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/StatsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Set\u003cTag\u003e testTags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag1 \u003d new Tag(\"Geography\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag2 \u003d new Tag(\"Civil Engineering\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags.add(testTag1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags.add(testTag2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsNotFilteredAndPresentTags_showsSameList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(model.getHasTagPredicate(testTags));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new StatsCommand(testTags), model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedModel.generateStatistics(), false, false, true), expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsFilteredAndPresentTags_showsEverything() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(model.getHasTagPredicate(testTags));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new StatsCommand(testTags), model,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedModel.generateStatistics(), false, false, true), expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsNotFilteredAndNoTags_showsEverything() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new StatsCommand(null), model,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedModel.generateStatistics(), false, false, true), expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsFilteredAndNoTags_showsEverything() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new StatsCommand(null), model,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedModel.generateStatistics(), false, false, true), expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void execute_listIsNotFilteredWithNonExistentTags_showsSameList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Set\u003cTag\u003e wrongTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag wrongTag \u003d new Tag(\"NonExistant\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        wrongTags.add(wrongTag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(model.getHasTagPredicate(wrongTags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertCommandSuccess(new StatsCommand(wrongTags), model,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory, new CommandResult(StatsCommand.MESSAGE_FAIL), expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 76,
      "Akimatsu98": 9
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.deleteFirstFlashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteFirstFlashcard(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteFirstFlashcard(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteFirstFlashcard(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        deleteFirstFlashcard(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.undoFlashcardList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        expectedModel.undoFlashcardList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Akimatsu98": 45
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/commands/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard flashcardToView \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String expectedMessage \u003d flashcardToView.fullString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFlashcardList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertCommandSuccess(viewCommand, model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                new CommandResult(expectedMessage), expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        assertCommandFailure(viewCommand, model, commandHistory, ViewCommand.MESSAGE_INVALID_FLASHCARD_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 40,
      "Akimatsu98": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.ANSWER_DESC_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.ANSWER_DESC_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.DEFINITION_DESC_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.DEFINITION_DESC_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_CHOICE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_DEFINITION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.QUESTION_DESC_APPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.QUESTION_DESC_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_LONG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_ROUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_APPLE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_BANANA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CHOICE_BLUE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CHOICE_GREEN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DEFINITION_APPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DEFINITION_BANANA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_APPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_BANANA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.BANANA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.NO_TAG_BANANA;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Flashcard expectedFlashcard \u003d BANANA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_DESC_BANANA + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + TAG_DESC_LONG, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // multiple Questions - last name accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_APPLE + QUESTION_DESC_BANANA + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + TAG_DESC_LONG, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // multiple Answers - last phone accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_BANANA + ANSWER_DESC_APPLE + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + TAG_DESC_LONG, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // zero tags and choices"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Flashcard expectedFlashcard \u003d NO_TAG_BANANA;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_BANANA + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT + AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // missing Question prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_BANANA + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + TAG_DESC_LONG, expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // missing Answer prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_BANANA + VALID_ANSWER_BANANA"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + TAG_DESC_LONG, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // missing Definition prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_BANANA + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + VALID_DEFINITION_BANANA + TAG_DESC_LONG, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_APPLE + VALID_ANSWER_APPLE + VALID_DEFINITION_APPLE"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + VALID_CHOICE_BLUE + VALID_CHOICE_GREEN + VALID_TAG_ROUND, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Question"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + TAG_DESC_LONG, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Answer"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_BANANA + INVALID_ANSWER_DESC"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + TAG_DESC_LONG, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Definition"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_BANANA + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + INVALID_DEFINITION_DESC + TAG_DESC_LONG, Definition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Choice"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_APPLE + DEFINITION_DESC_APPLE + ANSWER_DESC_APPLE"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + TAG_DESC_ROUND + INVALID_CHOICE_DESC, Choice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Tag"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_BANANA + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + INVALID_TAG_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + INVALID_QUESTION_DESC + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        + DEFINITION_DESC_BANANA + TAG_DESC_LONG,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT + AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 128
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 3,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/DeleteTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_ROUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.model.tag.Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class DeleteTagCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private DeleteTagCommandParser deleteTagCommandParser \u003d new DeleteTagCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag1 \u003d new Tag(VALID_TAG_ROUND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(testTag1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(this.deleteTagCommandParser, PREAMBLE_WHITESPACE + TAG_DESC_ROUND,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                deleteTagCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(deleteTagCommandParser, \"\", MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DeleteTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_emptyTag_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(deleteTagCommandParser, INVALID_TAG_DESC, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 41
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.ANSWER_DESC_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.ANSWER_DESC_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.CHOICE_DESC_BLUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.DEFINITION_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.DEFINITION_DESC_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_DEFINITION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.QUESTION_DESC_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.QUESTION_DESC_BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_LONG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_ROUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_BANANA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CHOICE_BLUE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DEFINITION_BANANA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_BANANA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_LONG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_APPLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_APPLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_APPLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS); // invalid Question"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS); // invalid Answer"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEFINITION_DESC, Definition.MESSAGE_CONSTRAINTS); // invalid Definition"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // valid Question followed by invalid Question. The test case for invalid question followed by valid question"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + QUESTION_DESC_BANANA + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Flashcard} being edited,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_LONG + TAG_DESC_ROUND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_LONG + TAG_EMPTY + TAG_DESC_ROUND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_LONG + TAG_DESC_ROUND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + INVALID_DEFINITION_DESC + VALID_ANSWER_BANANA,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_BANANA + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DEFINITION_DESC_BANANA + TAG_DESC_LONG;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .withAnswer(VALID_ANSWER_BANANA).withDefinition(VALID_DEFINITION_BANANA).withTag(VALID_TAG_LONG)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_BANANA + DEFINITION_DESC_BANANA;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BANANA).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // Question"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_BANANA;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // Answer"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_BANANA;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withAnswer(VALID_ANSWER_BANANA).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // Definition"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEFINITION_DESC_BANANA;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withDefinition(VALID_DEFINITION_BANANA).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // Choice"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CHOICE_DESC_BLUE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withChoices(VALID_CHOICE_BLUE).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_ROUND;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withTag(VALID_TAG_ROUND).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_APPLE + ANSWER_DESC_APPLE + DEFINITION_DESC_APPLE"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + TAG_DESC_ROUND + QUESTION_DESC_BANANA + ANSWER_DESC_BANANA + DEFINITION_DESC_BANANA + TAG_DESC_LONG;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .withAnswer(VALID_ANSWER_BANANA).withDefinition(VALID_DEFINITION_BANANA)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .withTag(VALID_TAG_ROUND, VALID_TAG_LONG).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_QUESTION_DESC + VALID_QUESTION_BANANA;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEFINITION_DESC_BANANA + INVALID_QUESTION_DESC + ANSWER_DESC_BANANA"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + QUESTION_DESC_BANANA;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BANANA).withAnswer(VALID_ANSWER_BANANA).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withTag().build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 206
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.FlashcardContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new FindCommand(new FlashcardContainsKeywordsPredicate(Arrays.asList(\"BANANA\", \"APPLE\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, \"BANANA APPLE\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(parser, \" \\n BANANA \\n \\t APPLE  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 34
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/FlashcardListParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.FlashcardContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class FlashcardListParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private final FlashcardListParser parser \u003d new FlashcardListParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(new FindCommand(new FlashcardContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 75
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/FlipCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class FlipCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private FlipCommandParser parser \u003d new FlipCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void parse_validArgs_returnsFlipCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertParseSuccess(parser, \" \" + VALID_ANSWER_APPLE, new FlipCommand(new Answer(\"Red\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT + FlipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 27
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/ListCardByTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_LONG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_ROUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_LONG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.model.tag.Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.ListCardByTagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ListCardByTagCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private ListCardByTagCommandParser listCardByTagCommandParser \u003d new ListCardByTagCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Set\u003cTag\u003e testTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag1 \u003d new Tag(VALID_TAG_ROUND);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag2 \u003d new Tag(VALID_TAG_LONG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags.add(testTag1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags.add(testTag2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ListCardByTagCommand listCardByTagCommand \u003d new ListCardByTagCommand(testTags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(listCardByTagCommandParser, PREAMBLE_WHITESPACE + TAG_DESC_ROUND + TAG_DESC_LONG,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                listCardByTagCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(listCardByTagCommandParser, \"\", MESSAGE_INVALID_COMMAND_FORMAT"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + ListCardByTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_emptyTag_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(listCardByTagCommandParser, INVALID_TAG_DESC, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 49
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_CHOICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_DEFINITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CHOICE_BLUE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DEFINITION_BANANA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_LONG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWord((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWord(INVALID_QUESTION));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION_BANANA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseWord(VALID_QUESTION_BANANA));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION_BANANA + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Question expectedName \u003d new Question(VALID_QUESTION_BANANA);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseWord(questionWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseAnswer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseAnswer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseAnswer_validValueWithoutWhitespace_returnsAnswer() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER_BANANA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER_BANANA));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseAnswer_validValueWithWhitespace_returnsTrimmedAnswer() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER_APPLE + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER_APPLE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseDefinition_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDefinition((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseDefinition_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDefinition(INVALID_DEFINITION));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseDefinition_validValueWithoutWhitespace_returnsDefinition() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Definition expectedDefinition \u003d new Definition(VALID_DEFINITION_BANANA);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedDefinition, ParserUtil.parseDefinition(VALID_DEFINITION_BANANA));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseDefinition_validValueWithWhitespace_returnsTrimmedDefinition() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String definitionWithWhitespace \u003d WHITESPACE + VALID_DEFINITION_BANANA + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Definition expectedDefinition \u003d new Definition(VALID_DEFINITION_BANANA);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedDefinition, ParserUtil.parseDefinition(definitionWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_ROUND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_ROUND));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_ROUND + WHITESPACE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_ROUND);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_ROUND, INVALID_TAG)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_ROUND, VALID_TAG_LONG));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_ROUND), new Tag(VALID_TAG_LONG)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseChoice_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseChoice(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseChoice_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseChoice(INVALID_CHOICE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseChoice_validValueWithoutWhitespace_returnsChoice() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Choice expectedChoice \u003d new Choice(VALID_CHOICE_BLUE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedChoice, ParserUtil.parseChoice(VALID_CHOICE_BLUE));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseChoice_validValueWithWhitespace_returnsTrimmedChoice() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String choiceWithWhitespace \u003d WHITESPACE + VALID_CHOICE_BLUE + WHITESPACE;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Choice expectedChoice \u003d new Choice(VALID_CHOICE_BLUE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedChoice, ParserUtil.parseChoice(choiceWithWhitespace));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseChoices_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseChoices(null));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseChoices_collectionWithInvalidChoices_throwsParseException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseChoices(Arrays.asList(VALID_CHOICE_BLUE,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                INVALID_CHOICE)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseChoices_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(ParserUtil.parseChoices(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 217
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/QuizCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.QuizCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class QuizCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private QuizCommandParser parser \u003d new QuizCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void parse_validArgs_returnsQuizCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertParseSuccess(parser, \"1\", new QuizCommand(INDEX_FIRST_FLASHCARD, 1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT + QuizCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "jolynnn8D": 25
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/QuizTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_LONG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.QuizTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class QuizTagCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private QuizTagCommandParser parser \u003d new QuizTagCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void parse_validArgs_returnsQuizTagCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        String inputMessage \u003d \" \" + PREFIX_TAG + VALID_TAG_ROUND + \" \" + PREFIX_TAG + VALID_TAG_LONG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Tag firstTag \u003d new Tag(VALID_TAG_ROUND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Tag secondTag \u003d new Tag(VALID_TAG_LONG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Set\u003cTag\u003e inputTags \u003d Collections.unmodifiableSet(new HashSet\u003c\u003e(Arrays.asList(firstTag, secondTag)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertParseSuccess(parser, inputMessage, new QuizTagCommand(inputTags, 1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertParseFailure(parser, \"t/#12345\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT + QuizTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "jolynnn8D": 37
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/StatsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_LONG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.TAG_DESC_ROUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_LONG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.model.tag.Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class StatsCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private StatsCommandParser statsCommandParser \u003d new StatsCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Set\u003cTag\u003e testTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag1 \u003d new Tag(VALID_TAG_ROUND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Tag testTag2 \u003d new Tag(VALID_TAG_LONG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags.add(testTag1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testTags.add(testTag2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        StatsCommand statsCommand \u003d new StatsCommand(testTags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(statsCommandParser, PREAMBLE_WHITESPACE + TAG_DESC_ROUND + TAG_DESC_LONG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                statsCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_noTags_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseSuccess(statsCommandParser, \"\", new StatsCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_emptyTag_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertParseFailure(statsCommandParser, INVALID_TAG_DESC, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 50
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/logic/parser/ViewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.flashcard.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import static seedu.flashcard.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import seedu.flashcard.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT + ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jolynnn8D": 26
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.MOUNT_BLANC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(new FlashcardList(), new FlashcardList(modelManager.getFlashcardList()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userPrefs.setFlashcardListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userPrefs.setFlashcardListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcardListFilePath_validPath_setsFlashcardListFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Path path \u003d Paths.get(\"flashcardlist/file/path\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        modelManager.setFlashcardListFilePath(path);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(path, modelManager.getFlashcardListFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcardListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFlashcardListFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void hasFlashcard_flashcardNotInFlashcardList_returnFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(modelManager.hasFlashcard(MOUNT_BLANC));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void hasFlashcard_flashcardInFlashcardList_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        modelManager.addFlashcard(MOUNT_BLANC);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(modelManager.hasFlashcard(MOUNT_BLANC));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFlashcardList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 90
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/StatisticsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalStatsFlashcards;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Statistics statsTester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private ObservableList\u003cFlashcard\u003e flashcardsSample;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statsTester \u003d new Statistics();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        flashcardsSample \u003d FXCollections.observableList(getTypicalStatsFlashcards());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void reset_resetAllValues_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statsTester.reset();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(0, statsTester.getTotalCorrect());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(0, statsTester.getTotalWrong());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(0, statsTester.getTotalUnattempted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(0, statsTester.getTotalAttempted());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(0, statsTester.getUnattemptedList().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(new XYChart.Series\u003cString, Number\u003e().getData(), statsTester.getCorrectSeries().getData());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(new XYChart.Series\u003cString, Number\u003e().getData(), statsTester.getWrongSeries().getData());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void calculate_standardListOfCards_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statsTester.calculate(flashcardsSample);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(2, statsTester.getTotalCorrect());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(2, statsTester.getTotalWrong());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(1, statsTester.getTotalUnattempted());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(1, statsTester.getTotalAttempted());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(1, statsTester.getUnattemptedList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(flashcardsSample.get(1).getQuestion().toString(), statsTester.getUnattemptedList().get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void results_generateStatisticalReply_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statsTester.calculate(flashcardsSample);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String correctReply \u003d \"Displaying getResults for selected parameters. In summary:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"Total correct:2\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nTotal Wrong:2\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nTotal Attempted:1\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nTotal Unattempted:1\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nTotal cards in list:2\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"\\nList of cards that have not been attempted yet:\\n\" + \" -How many airports are there in Tokyo?\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(correctReply, statsTester.getResults());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 65
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcardListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFlashcardListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 20
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/AnswerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // null Answer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Answer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // valid Answer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"3\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"/\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Builds applications by combining \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"functionalities packaged as programmatically\")); // long answer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 30,
      "lzw12345": 9
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/ChoiceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ChoiceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Choice(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void constructor_invalidChoice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String invalidChoice \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Choice(invalidChoice));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void isValidChoice() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // null Choice"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Choice.isValidChoice(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Choice"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Choice.isValidChoice(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Choice.isValidChoice(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // valid choice"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Choice.isValidChoice(\"3\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Choice.isValidChoice(\"/\")); // one character"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Choice.isValidChoice(\"Builds applications by combining functionalities\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \" packaged as programmatically\")); // long answer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "lzw12345": 34
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/DefinitionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DefinitionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Definition(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void constructor_invalidDefinition_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String invalidDefinition \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Definition(invalidDefinition));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void isValidDefinition() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // null Definition"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Definition.isValidDefinition(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Definition"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Definition.isValidDefinition(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Definition.isValidDefinition(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // valid Definition"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Definition.isValidDefinition(\"3\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Definition.isValidDefinition(\"/\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Definition.isValidDefinition(\"Builds applications by combining functionalities\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \" packaged as programmatically\")); // long answer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 27,
      "lzw12345": 11
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/FlashcardContainsKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeyWordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeyWordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new FlashcardContainsKeywordsPredicate(firstPredicateKeyWordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new FlashcardContainsKeywordsPredicate(secondPredicateKeyWordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new FlashcardContainsKeywordsPredicate(firstPredicateKeyWordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void test_flashcardContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new FlashcardContainsKeywordsPredicate(Collections.singletonList(\"Blanc\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Mount Blanc\").buildShortAnswerFlashcard()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        predicate \u003d new FlashcardContainsKeywordsPredicate(Arrays.asList(\"Daxing\", \"Airport\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Daxing Blanc\").buildShortAnswerFlashcard()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withAnswer(\"Haneda Airport\").buildShortAnswerFlashcard()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void test_flashcardDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new FlashcardContainsKeywordsPredicate(Collections.singletonList(\"Blanc\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withAnswer(\"Daxing airport\").buildShortAnswerFlashcard()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 48,
      "lzw12345": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/FlashcardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.MOUNT_BLANC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void asObservableList_modify_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e flashcard.getTags().remove(0));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void isSameFlashcard() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(MOUNT_BLANC.isSameFlashcard(MOUNT_BLANC));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(MOUNT_BLANC.isSameFlashcard(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Different question means different flashcard."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        McqFlashcard editedMountBlanc \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new FlashcardBuilder((McqFlashcard) MOUNT_BLANC).withQuestion(\"Smells good\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(MOUNT_BLANC.isSameFlashcard(editedMountBlanc));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        // Same question means same flashcard."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        editedMountBlanc \u003d new FlashcardBuilder((McqFlashcard) MOUNT_BLANC).withTag(\"Smells good\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(MOUNT_BLANC.isSameFlashcard(editedMountBlanc));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void equalsFlashcard() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        McqFlashcard mountBlancCopy \u003d new FlashcardBuilder((McqFlashcard) MOUNT_BLANC).buildMcqFlashcard();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(MOUNT_BLANC.equals(mountBlancCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(MOUNT_BLANC \u003d\u003d null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard editedMountBlanc \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new FlashcardBuilder((McqFlashcard) MOUNT_BLANC).withDefinition(\"Smells good\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(MOUNT_BLANC.equals(editedMountBlanc));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 44,
      "lzw12345": 1
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/McqFlashcardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.DAXING_AIRPORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class McqFlashcardTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void invalidMcqFlashcard_answerDoesNotMatchChoices_returnFalse() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        McqFlashcard invalidMcqFlashcard \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .withChoice(\"Roses are red\", \"violets are blue\", \"I have five fingers\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .withAnswer(\"and the middle one is for you\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(invalidMcqFlashcard.isValidFlashcard());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void validMcqFlashcard_answerMatches_returnTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(DAXING_AIRPORT.isValidFlashcard());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 25
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/QuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // null Question"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Question"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // valid Question"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"3\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"/\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Builds applications by combining functionalities\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \" packaged as programmatically\")); // long answer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void shortenLabel_shortenQuestion_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        //Question length is 6"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(\"There are six words in this ...\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new Question(\"There are six words in this\").shortenForLabel());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        //Question length is 5"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(\"There are five words here \","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new Question(\"There are five words here\").shortenForLabel());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        //Question length is 7"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(\"There are seven words in this ... Question\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                new Question(\"There are seven words in this Question\").shortenForLabel());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 27,
      "lzw12345": 26
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/ScoreTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ScoreTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void constructor_invalidScore_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Score(-1, -1));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Score(0, -1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Score(-1, 0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void isValidScoreString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // null Score"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Score.isValidScore(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Score"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Score.isValidScore(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Score.isValidScore(\" \")); // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Score.isValidScore(\"-1 0\")); // wrong correctAns"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Score.isValidScore(\"0 -1 \")); // wrong wrongAns"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Score.isValidScore(\"-1 -1\")); // both wrong"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // valid Score"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Score.isValidScore(\"0 0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Score.isValidScore(\"0 1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void isValidScoreInt() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // invalid Score"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Score.isValidScore(-1, 0)); // wrong correctAns"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Score.isValidScore(0, -1)); // wrong wrongAns"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertFalse(Score.isValidScore(-1, -1)); // both wrong"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        // valid Score"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Score.isValidScore(0, 0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(Score.isValidScore(0, 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 2,
      "lzw12345": 50
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/flashcard/UniqueFlashcardListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.DAXING_AIRPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.MOUNT_BLANC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class UniqueFlashcardListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void contains_flashcardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(MOUNT_BLANC));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void contains_flashcardInList_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(MOUNT_BLANC));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void add_flashcardWithSameQuestionInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard editedFlashcard \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new FlashcardBuilder((McqFlashcard) MOUNT_BLANC).withDefinition(\"123\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(editedFlashcard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void add_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e uniqueFlashcardList.add(MOUNT_BLANC));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(null, MOUNT_BLANC));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(MOUNT_BLANC, null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e uniqueFlashcardList.setFlashcard(MOUNT_BLANC, MOUNT_BLANC));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.setFlashcard(MOUNT_BLANC, MOUNT_BLANC);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        expectedUniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard_editedFlashcardHasSameQuestion_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder((McqFlashcard) MOUNT_BLANC)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            .withAnswer(\"tall\").withDefinition(\"123\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.setFlashcard(MOUNT_BLANC, editedFlashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        expectedUniqueFlashcardList.add(editedFlashcard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentQuestion_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.setFlashcard(MOUNT_BLANC, DAXING_AIRPORT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        expectedUniqueFlashcardList.add(DAXING_AIRPORT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueQuestion_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(DAXING_AIRPORT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e uniqueFlashcardList.setFlashcard(MOUNT_BLANC, DAXING_AIRPORT));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void remove_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void remove_flashcardDoesNotExist_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(MOUNT_BLANC));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void remove_existingFlashcard_removeFlashcard() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(DAXING_AIRPORT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.remove(DAXING_AIRPORT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcards_nullUniqueFlashcardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcards_uniqueFlashcardList_replaceOwnList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.add(MOUNT_BLANC);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        expectedUniqueFlashcardList.add(DAXING_AIRPORT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        uniqueFlashcardList.setFlashcards(expectedUniqueFlashcardList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 137
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/tag/Tagtest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Test for tags"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Tagtest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/model/util/SampleDataUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void getSampleFlashcards_generateCards_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        SampleDataUtil samples \u003d new SampleDataUtil();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertTrue(samples.getSampleFlashcardList().getFlashcardList().size() \u003d\u003d 20);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 15
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/JsonAdaptedChoiceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonAdaptedChoiceTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String VALID_CHOICE \u003d \"Team 14 will get A+.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String INVALID_CHOICE \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_validChoice_returnsChoice() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedChoice choice \u003d new JsonAdaptedChoice(VALID_CHOICE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(new Choice(VALID_CHOICE), choice.toModelType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidChoice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedChoice choice \u003d new JsonAdaptedChoice(INVALID_CHOICE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, choice::toModelType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 27
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/JsonAdaptedFlashcardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.DAXING_AIRPORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonAdaptedFlashcardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String INVALID_DEFINITION \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final JsonAdaptedChoice INVALID_CHOICE \u003d new JsonAdaptedChoice(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final JsonAdaptedTag INVALID_TAG \u003d new JsonAdaptedTag(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"CocoFlashcard\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String VALID_QUESTION \u003d DAXING_AIRPORT.getQuestion().question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String VALID_DEFINITION \u003d DAXING_AIRPORT.getDefinition().definition;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String VALID_ANSWER \u003d DAXING_AIRPORT.getAnswer().answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final JsonAdaptedChoice VALID_CHOICE_1 \u003d new JsonAdaptedChoice(\"Xiongan Airport\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final JsonAdaptedChoice VALID_CHOICE_2 \u003d new JsonAdaptedChoice(\"Daxing Airport\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final JsonAdaptedChoice VALID_CHOICE_3 \u003d new JsonAdaptedChoice(\"Lixian Airport\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final JsonAdaptedChoice VALID_CHOICE_4 \u003d new JsonAdaptedChoice(\"Zhuque Airport\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final JsonAdaptedTag VALID_TAG_1 \u003d new JsonAdaptedTag(\"Civil Engineering\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final JsonAdaptedTag VALID_TAG_2 \u003d new JsonAdaptedTag(\"Geography\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String VALID_SCORE \u003d \"1 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String VALID_TYPE \u003d \"ShortAnswerFlashcard\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String VALID_TYPE_2 \u003d \"McqFlashcard\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final List\u003cJsonAdaptedChoice\u003e INVALID_CHOICE_LIST \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        new ArrayList\u003cJsonAdaptedChoice\u003e(Arrays.asList(VALID_CHOICE_1, VALID_CHOICE_3, INVALID_CHOICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final List\u003cJsonAdaptedChoice\u003e VALID_CHOICE_LIST \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        new ArrayList\u003cJsonAdaptedChoice\u003e(Arrays.asList(VALID_CHOICE_1, VALID_CHOICE_2, VALID_CHOICE_3, VALID_CHOICE_4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e INVALID_TAG_LIST \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        new ArrayList\u003cJsonAdaptedTag\u003e(Arrays.asList(VALID_TAG_1, INVALID_TAG, VALID_TAG_2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAG_LIST \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        new ArrayList\u003cJsonAdaptedTag\u003e(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(DAXING_AIRPORT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(DAXING_AIRPORT, flashcard.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_validFlashcardDetails_successOne() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            null, VALID_DEFINITION, null, VALID_ANSWER, VALID_SCORE, VALID_TYPE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard myCard \u003d flashcard.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_validFlashcardDetails_successTwo() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            VALID_CHOICE_LIST, VALID_DEFINITION, VALID_TAG_LIST, VALID_ANSWER, VALID_SCORE, VALID_TYPE_2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard myCard \u003d flashcard.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(INVALID_QUESTION,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            null, VALID_DEFINITION, null, VALID_ANSWER, VALID_SCORE, VALID_TYPE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidDefinition_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            null, INVALID_DEFINITION, null, VALID_ANSWER, VALID_SCORE, VALID_TYPE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            null, VALID_DEFINITION, null, INVALID_ANSWER, VALID_SCORE, VALID_TYPE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            null, VALID_DEFINITION, null, VALID_ANSWER, VALID_SCORE, VALID_TYPE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_nullDefinition_throwsIllegalValueDefinition() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            null, null, null, VALID_ANSWER, VALID_SCORE, VALID_TYPE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            null, VALID_DEFINITION, null, VALID_ANSWER, VALID_SCORE, INVALID_TYPE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidChoice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            INVALID_CHOICE_LIST, VALID_DEFINITION, null, VALID_ANSWER, VALID_SCORE, VALID_TYPE_2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            VALID_CHOICE_LIST, VALID_DEFINITION, INVALID_TAG_LIST, VALID_ANSWER, VALID_SCORE, VALID_TYPE_2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 121
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/JsonSerializableFlashcardListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonSerializableFlashcardListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFlashcardListTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Path TYPICAL_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFlashcardList.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFlashcardList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Path INVALID_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFlashcardList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Path INVALID_MCQ_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidMCQFlashcardList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_typicalFlashcardFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonSerializableFlashcardList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            JsonSerializableFlashcardList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardList flashcardList \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_duplicateFlashcardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonSerializableFlashcardList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            JsonSerializableFlashcardList.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidFlashcardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonSerializableFlashcardList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            JsonSerializableFlashcardList.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void toModelType_invalidMcqFlashcardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonSerializableFlashcardList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MCQ_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            JsonSerializableFlashcardList.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 50
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/JsonUserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class JsonUserPrefsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        userPrefs.setFlashcardListFilePath(Paths.get(\"flashcardlist.json\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Record the user prefs."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 37,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.TypicalFlashcard.getTypicalFlashcardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.ReadOnlyFlashcardList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonFlashcardListStorage flashcardListStorage \u003d new JsonFlashcardListStorage(getTempFilePath(\"fl\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        storageManager \u003d new StorageManager(flashcardListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void flashcardListReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardList original \u003d getTypicalFlashcardList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        storageManager.saveFlashcardList(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ReadOnlyFlashcardList retrieved \u003d storageManager.readFlashcardList().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(original, new FlashcardList(retrieved));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void getFlashcardListFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertNotNull(storageManager.getFlashcardListFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 57
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/EditFlashcardDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A utility class to help with building EditFlashcardDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class EditFlashcardDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private EditFlashcardDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder(EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.descriptor \u003d editFlashcardDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns a {@code EditFlashcardDescriptor} with fields containing {@code flashcard}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Particular for ShortAnswerFlashcards"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder(ShortAnswerFlashcard flashcard) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setQuestion(flashcard.getQuestion());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setAnswer(flashcard.getAnswer());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setDefinition(flashcard.getDefinition());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setTags(flashcard.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns a {@code EditFlashcardDescriptor} with fields containing {@code flashcard}\u0027s details"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Particular for Mcq flashcards"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder(McqFlashcard flashcard) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setQuestion(flashcard.getQuestion());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setAnswer(flashcard.getAnswer());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setTags(flashcard.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setDefinition(flashcard.getDefinition());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setChoices(flashcard.getChoices());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the {@code Question} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the {@code Definition} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder withDefinition(String definition) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setDefinition(new Definition(definition));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the {@code Answer} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setAnswer(new Answer(answer));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFlashcardDescriptor}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder withTag(String... tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Parses the {@code choices} into a {@code Set\u003cChoice\u003e} and set it to the {@code EditFlashcardDescriptor}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptorBuilder withChoices(String... choices) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        List\u003cChoice\u003e choiceSet \u003d Stream.of(choices).map(Choice::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.setChoices(choiceSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public EditFlashcardDescriptor build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 102
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/FlashcardBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Definition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Score;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A utility class to help building flashcards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"Is watermelon sweet?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String DEFULT_ANSWER \u003d \"Yes\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String DEFAULT_DEFINITION \u003d \"Watermelon is green\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Definition definition;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private List\u003cChoice\u003e choices;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        answer \u003d new Answer(DEFULT_ANSWER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        definition \u003d new Definition(DEFAULT_DEFINITION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        choices \u003d new ArrayList\u003cChoice\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        score \u003d new Score();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * For short answer flashcards only."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcard}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardBuilder(ShortAnswerFlashcard flashcard) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.question \u003d flashcard.getQuestion();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.answer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.tags \u003d flashcard.getTags();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.definition \u003d flashcard.getDefinition();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.score \u003d flashcard.getScore();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * For MCQ answer flashcards only."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardBuilder(McqFlashcard flashcard) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.question \u003d flashcard.getQuestion();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.answer \u003d flashcard.getAnswer();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.tags \u003d flashcard.getTags();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.definition \u003d flashcard.getDefinition();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.choices \u003d flashcard.getChoices();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.score \u003d flashcard.getScore();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the {@code Question} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the {@code Definition} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardBuilder withDefinition(String definition) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.definition \u003d new Definition(definition);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the {@code Answer} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the {@code Set\u003cTag\u003e} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardBuilder withTag(String... tags) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sets the {@code Set\u003cChoice\u003e} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardBuilder withChoice(String... choices) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.choices \u003d SampleDataUtil.getChoiceList(choices);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Sets the {@code Score} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public FlashcardBuilder withScore(int correctAns, int incorrectAns) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.score \u003d new Score(correctAns, incorrectAns);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ShortAnswerFlashcard buildShortAnswerFlashcard() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new ShortAnswerFlashcard(question, definition, tags, answer, score);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public McqFlashcard buildMcqFlashcard() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new McqFlashcard(question, choices, definition, tags, answer, score);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 108,
      "lzw12345": 16
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/FlashcardListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A utility class to help with building flashcardList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardListBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private FlashcardList flashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardListBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcardList \u003d new FlashcardList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardListBuilder(FlashcardList flashcardList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.flashcardList \u003d flashcardList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Adds a new {@code Flashcard} to the {@code FlashcardList} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardListBuilder withFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcardList.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public FlashcardList build() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcardList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 32
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/FlashcardUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_CHOICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Choice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A utility class of flashcards"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashcardUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static String getAddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (flashcard.isMcq()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return AddCommand.COMMAND_WORD + \" \" + getFlashcardDetails((McqFlashcard) flashcard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return AddCommand.COMMAND_WORD + \" \" + getFlashcardDetails((ShortAnswerFlashcard) flashcard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * For short answer flashcard usage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the part of command string for the given {@code flashcard}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static String getFlashcardDetails(ShortAnswerFlashcard flashcard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(PREFIX_QUESTION + flashcard.getQuestion().question + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(PREFIX_DEFINITION + flashcard.getDefinition().definition + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(PREFIX_ANSWER + flashcard.getAnswer().answer + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcard.getTags().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * For MCQ flashcard usage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the part of command string for the given {@code flashcard}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static String getFlashcardDetails(McqFlashcard flashcard) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(PREFIX_QUESTION + flashcard.getQuestion().question + \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(PREFIX_DEFINITION + flashcard.getDefinition().definition + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        sb.append(PREFIX_ANSWER + flashcard.getAnswer().answer + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcard.getTags().stream().forEach("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcard.getChoices().stream().forEach("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            s -\u003e sb.append(PREFIX_CHOICE + s.choice + \" \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns the part of command string for the given {@code EditFlashcardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static String getEditFlashcardDescriptorDetails(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.getQuestion().ifPresent(question"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            -\u003e sb.append(PREFIX_QUESTION).append(question.question).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.getDefinition().ifPresent(definition"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            -\u003e sb.append(PREFIX_DEFINITION).append(definition.definition).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        descriptor.getAnswer().ifPresent(answer -\u003e sb.append(PREFIX_ANSWER).append(answer.answer).append(\" \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            List\u003cChoice\u003e choices \u003d descriptor.getChoices().get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (choices.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                sb.append(PREFIX_CHOICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                choices.forEach(c -\u003e sb.append(PREFIX_CHOICE).append(c.choice).append(\" \"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 94
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/FlashcardsWithoutTag.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests modified to have no tags"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class FlashcardsWithoutTag {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final Flashcard MOUNT_BLANC \u003d new FlashcardBuilder().withQuestion(\"How long is Mount Blanc Tunnel?\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withAnswer(\"11611m\").withDefinition(\"An amazing tunnel between Italy and France\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withChoice(\"11611m\", \"12345m\", \"54321m\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final Flashcard DAXING_AIRPORT \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withQuestion(\"Which is the name of the new airport in Beijing?\").withAnswer(\"Daxing Airport\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withDefinition(\"The largest airport in China\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withChoice(\"Xiongan Airport\", \"Daxing Airport\", \"Lixian Airport\", \"Zhuque Airport\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final Flashcard CHANGI_AIRPORT \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withQuestion(\"How many runways does Changi Airport have?\").withDefinition(\"The airport in Singapore\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withAnswer(\"4\").buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final Flashcard TOKYO_AIRPORT \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withQuestion(\"How many airports are there in Tokyo?\").withDefinition(\"More than 1\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withAnswer(\"2\").buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Returns an {@code FlashcardList} with all the typical flashcards."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static FlashcardList getTaglessFlashcardList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        FlashcardList fl \u003d new FlashcardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        for (Flashcard flashcard : getTaglessFlashcards()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            fl.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return fl;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static List\u003cFlashcard\u003e getTaglessFlashcards() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MOUNT_BLANC, DAXING_AIRPORT, CHANGI_AIRPORT, TOKYO_AIRPORT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 44
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 12,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static Flashcard getFlashcard(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return model.getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/TypicalFlashcard.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_ANSWER_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CHOICE_BLUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CHOICE_GREEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CHOICE_RED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_CHOICE_YELLOW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DEFINITION_APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_DEFINITION_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_APPLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_QUESTION_BANANA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_LONG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static seedu.flashcard.logic.commands.CommandTestUtil.VALID_TAG_ROUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.FlashcardList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.McqFlashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import seedu.flashcard.model.flashcard.ShortAnswerFlashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class TypicalFlashcard {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final McqFlashcard MOUNT_BLANC \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withQuestion(\"How long is Mount Blanc Tunnel?\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        .withAnswer(\"11611m\").withDefinition(\"An amazing tunnel between Italy and France\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        .withTag(\"Geography\", \"Civil Engineering\").withChoice(\"11611m\", \"12345m\", \"54321m\").buildMcqFlashcard();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final McqFlashcard DAXING_AIRPORT \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        .withQuestion(\"Which is the name of the new airport in Beijing?\").withAnswer(\"Daxing Airport\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        .withDefinition(\"The largest airport in China\").withTag(\"Geography\", \"Civil Engineering\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        .withChoice(\"Xiongan Airport\", \"Daxing Airport\", \"Lixian Airport\", \"Zhuque Airport\").withScore(2, 2)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .buildMcqFlashcard();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final ShortAnswerFlashcard CHANGI_AIRPORT \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        .withQuestion(\"How many runways does Changi Airport have?\").withDefinition(\"The airport in Singapore\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        .withTag(\"Civil Engineering\").withAnswer(\"4\").buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final ShortAnswerFlashcard TOKYO_AIRPORT \u003d new FlashcardBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        .withQuestion(\"How many airports are there in Tokyo?\").withDefinition(\"More than 1\").withScore(0, 0)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        .withAnswer(\"2\").buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final McqFlashcard APPLE \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_APPLE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withAnswer(VALID_ANSWER_APPLE).withDefinition(VALID_DEFINITION_APPLE).withTag(VALID_TAG_ROUND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withChoice(VALID_CHOICE_RED, VALID_CHOICE_BLUE, VALID_CHOICE_GREEN, VALID_CHOICE_YELLOW)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .buildMcqFlashcard();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final ShortAnswerFlashcard BANANA \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withAnswer(VALID_ANSWER_BANANA).withDefinition(VALID_DEFINITION_BANANA).withTag(VALID_TAG_LONG)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final ShortAnswerFlashcard NO_TAG_BANANA \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_BANANA)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .withAnswer(VALID_ANSWER_BANANA).withDefinition(VALID_DEFINITION_BANANA)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            .buildShortAnswerFlashcard();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Returns an {@code FlashcardList} with all the typical flashcards."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static FlashcardList getTypicalFlashcardList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        FlashcardList fl \u003d new FlashcardList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            fl.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return fl;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MOUNT_BLANC, DAXING_AIRPORT, CHANGI_AIRPORT, TOKYO_AIRPORT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     *To avoid flip command bug where it increments score"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalStatsFlashcards() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DAXING_AIRPORT, TOKYO_AIRPORT));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 34,
      "lzw12345": 42,
      "jolynnn8D": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 9,
      "jolynnn8D": 3
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/flashcard/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.flashcard.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.flashcard.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.flashcard.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003c?import seedu.flashcard.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "\u003cfx:root type\u003d\"seedu.flashcard.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 1,
      "-": 5
    }
  }
]
