[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d LiBerry"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F13-1/main/[image:https://travis-ci.org/AY1920S1-CS2103T-F13-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F13-1/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::docs/images/Ui.png[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::images/Ui.png[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *LiBerry* is a desktop library management application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* It enables librarians from neighborhood libraries to manage tens of thousands of books and borrowers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* It is optimized for librarians to serve borrowers quickly through entering commands into the Command Line Interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* LiBerry! Berry, berry amazing! Wow!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Original source of the code, AddressBook-Level3 project, was created by https://se-education.org[SE-EDU initiative]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "seeziyang": 10,
      "-": 22
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    compile group: \u0027com.itextpdf\u0027, name: \u0027itext7-core\u0027, version: \u00277.1.8\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    archiveName \u003d \u0027LiBerry.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        \u0027site-name\u0027: \u0027LiBerry\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F13-1/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "Cronyxx": 1,
      "seeziyang": 3,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry was developed by the https://github.com/AY1920S1-CS2103T-F13-1[CS2103T-F13-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Wang Shiyao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::shiyao821.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[https://github.com/shiyao821[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[\u003c\u003cWangShiyao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d See Zi Yang"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::seeziyang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[http://github.com/seeziyang[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[\u003c\u003cseeziyang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Integration, Scheduling and tracking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Lin Yuting"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::linyutinglyt.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[http://github.com/linyutinglyt[github]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[\u003c\u003cLinYuting#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: Commons"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Yeo Tong"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::cronyxx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[http://github.com/Cronyxx[github]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[\u003c\u003cYeoTong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Documentation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Ho Hol Yin"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::hoholyin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[http://github.com/hoholyin[github]]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[\u003c\u003cHoHolYin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Code quality, Deliverables and deadlines"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 10,
      "seeziyang": 25,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F13-1/main/issues[issue tracker] if you"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Email us* : You can also reach us at any one of our emails at hoholyin@u.nus.edu, wangshiyao@u.nus.edu,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "e0273890@u.nus.edu, yuting.lin@u.nus.edu, ziyang.see@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 4,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d LiBerry - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "A project often depends on third-party libraries. For example, LiBerry depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 3,
      "-": 45
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d LiBerry- Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "By: `AY1920S1-CS2103T-F13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d LiBerry"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry is a desktop app for librarians to *quickly manage their community libraries!*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry is optimized for librarians who prefer to work with a Command Line Interface (CLI) while still having the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "You can type quickly and serve your long line of borrowers in a short amount of time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry can manage all your books and borrowers efficiently and meticulously."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Purpose of Developer Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "This developer guide is targeted towards *potential developers* of the project and it aims to explain:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* The *design* of the software architecture of the system using a top-down approach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* The *implementation* and *behaviour* of the main features of the system."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Legend"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Denotes useful tips."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "NOTE: Denotes additional information."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "To set up LiBerry on your system, please refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In this section, we will explain the design and behaviour of the top-level components in the system, which are the following:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Architecture overview"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* User Interface (UI) Component"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Logic Component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Model Component"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Storage Component"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "This sub-section shows the *relationship* between the major components at the highest level, illustrated by the following diagram."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The rest of the system consists of four components."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the system."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the system in-memory."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `add t/Animal Farm a/George`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Component interactions for `add t/Animal Farm a/George` command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::AddBook.png[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In the diagram above, we can see how the components integrate together to execute a single command. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The sections below give more details about each component, starting of with the UI component."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "This sub-section shows the structure of the User Interface (UI) and the relationship between each component in the UI. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The following diagram aims to illustrate how each UI sub-component is linked to one another."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In the figure above, we can see the association between the different UI sub-components, as well as the classes that interact with the external `Logic` and `Model` components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The UI consists of a `MainWindow` that is made up these main parts:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `CommandBox`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `ResultDisplay`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `BookListPanel`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*  Other smaller components"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Given below is the Sequence Diagram for interactions within"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "the UI component when the user enters an add command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The exact command entered is `add t/Animal Farm a/George`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".Interactions Inside the UI Component for the `add t/Animal Farm a/George` Command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UiAddBookSequenceDiagram.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In the figure above, we can see how the UI components invoke the `execute` method of the `Logic` class in order to obtain and subsequently display the result of the execution."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The following activity diagram summarizes what happens to the `UI` component"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "when a user executes a new command:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".Flow of Events within `UI`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::UiUpdateBookListActivityDiagram.png[width\u003d270]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The activity diagram above aims to illustrate how `UI` only updates the `BookListPanel` when the catalog is being updated by a command. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "We will now move on to give more details about the `Logic` component."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In this sub-section, we will explain the internal workings of the `Logic` component, which handles the execution of the different commands. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The following class diagram aims to show how the \u0027Command Design Pattern\u0027 is used to achieve a high-level form of encapsulation of the `Command` object."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In the diagram above, we can see that the `LogicManager` executes the `Command` class without knowledge of what each command does. This is achieve through polymorphism where all possible commands extend from the `Command` class."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".  `Logic` uses the `CatalogParser` class to parse the user command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a book)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"add t/Animal Farm a/George\")` API call."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".Interactions Inside the Logic Component for the `add t/Animal Farm a/George` Command"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::AddBookLogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In the diagram above, we can see that the `Logic` component\u0027s `execute` is invoked by the `UI` component from before. A series of method calls would invoke the `addBook` method of the `Model`, moving the chain of calls further downstream."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "NOTE: The lifeline for `AddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In short, the `Logic` component interprets the different commands and execute them accordingly. Most of these commands will have to interact with the `Model` component, which we will explore in the next sub-section."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The `Model` component is mainly composed of the `Book`, `Borrower` and `Loan` classes and shows how they are related to one another."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The figure below shows the relationship between smaller components. These smaller components are modelled after real world objects."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The figure illustrates the composition of the `Model` component. The `Model`,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* stores the Catalog data."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* stores the Loan Records."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* stores the Borrower Records."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* references a borrower that is being served if the model is in serve mode."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* references a list of filtered books which depends on the state of the model."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "When there are changes in the `Model` component, the system will update its in-memory via the `Storage` component, which will be explained in-depth in the next section."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The `Storage` component is responsible for updating the memory of the system (in `JSON` format) whenever there are changes."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The figure below aims to show the different records storage that are implemented in LiBerry."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "In the figure above, we can see that we are maintaining 4 different storages. These storages aim to keep the memory of:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `UserPrefs`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `Catalog`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `BorrowerRecords`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `LoanRecords`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* can save `UserPref` objects in `JSON` format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* can save LiBerry data in `JSON` format and read it back."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "There are certain classes (eg. Utility classes) that are used by different components. In the following section, we will explain how we allow all components to access these classes."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "These classes include (to list a few):"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* User Settings"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Exceptions"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Utility classes like `DateUtil`, `FineUtil` and `JsonUtil`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "We will now move on to the next section, which aims to explain the implementation of some of our main features."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "//tag::addBook[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Add book feature"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "This feature allows a user to add a new book to the LiBerry system."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The add book function is facilitated by `Catalog`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The `Catalog` stores a list of books, representing the books in the library."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Additionally, it implements the following operation:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `Catalog#addBook(book)` -- Add a new book to the list of books in the catalog."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Given below is an activity diagram of a book being added to the catalog."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Activity Diagram for adding a book"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::AddBookActivityDiagram.png[width\u003d270]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Given below is a class diagram of a book."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Class Diagram for `Book`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::BookClassDiagram.png[width\u003d400]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Notice how the book can hold either *1 or 0 loans*, depending on whether it is currently loaned out or not. +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Given below is the object diagram of a newly added book."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Object Diagram for `Book`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::BookObjectDiagram.png[width\u003d300]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "We can see that the book holds a `Optional\u003cLoan\u003e` in order to have either *0 or 1 `Loan` objects*. This makes it consistent with the class diagram of `Book` above."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store books."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* **Alternative 1 :** Store them only in a ObservableList as per the original AddressBook implementation."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: Will be easy to implement."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Cons: May have performance issues in terms of efficiency in retrieving books."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* **Alternative 2 (current choice):** Store them in a HashMap."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: Will be easier (and more readable in code) to retrieve books by serial number."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Cons: Will incur additional memory to maintain the HashMap."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Generating a unique serial number."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Since we allow librarians to provide a valid serial number to new books if they wish so, we cannot generate the serial"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "number using the number of books or the largest serial number."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Eg: The system now has \"B00009\" and \"B00010\"."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "If we generate based on number of books, we get the serial number \"B00003\", wasting the serial numbers \"B00001\" and \"B00002\"."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "If we generate based on the largest serial number, we get the serial number \"B00011\", wasting all the unused serial numbers before it."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "We need to come up with a solution to give us \"B00001\" in the given example."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* **Alternative 1 (current choice):** Use a TreeMap to store current serial numbers such that we can efficiently determine the next serial number in running order."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: Will be efficient in generating the next valid serial number."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Cons: Will incur additional memory to maintain the TreeMap."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* **Alternative 2:** Use brute force to start iterating from \"B00001\" to obtain the first unused serial number."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: Will be easy to implement."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Cons: Will be inefficient once the number of books grow."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "//end::addBook[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "// tag::undo/redo[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The undo/redo mechanism is facilitated by `CommandHistory`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "It contains a undo/redo command history, stored internally as an `commandHistoryList` and `currentCommandPointer`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* `CommandHistory#commit()` -- Saves the current reversible command in its command history."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* `CommandHistory#undo()` -- Undoes the most recent reversible command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* `CommandHistory#redo()` -- Redoes the most recent previously undone command."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitCommand()`, `Model#undoCommand()` and `Model#redoCommand()` respectively."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The undo/redo mechanism only works for commands that implements the `ReversibleCommand` interface."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The `ReversibleCommand` interface specifies that the commands these two operations:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* `ReversibleCommand#getUndoCommand()` -- Returns a command that undo the `ReversibleCommand`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* `ReversibleCommand#getRedoCommand()` -- Returns a command that redo the `ReversibleCommand`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "behaves at each step."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The `CommandHistory` will be initialized with an empty `commandHistoryList`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".Initial state of CommandHistroy"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UndoRedoState0.png[width\u003d300]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "book in the catalog. The `delete` command calls `Model#commitCommand()`,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "causing the `delete 5` command to be saved in the `commandHistoryList`,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "and the `currentCommandPointer` is pointed to the newly inserted command."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".State of CommandHistory after `delete 5`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UndoRedoState1.png[width\u003d300]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Step 3. The user executes `add t/Animal Farm ...` to add a new book."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The `add` command also calls `Model#commitCommand()`, causing the add"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "command to be saved into the `catalogHistoryList`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".State of CommandHistory after `add t/Animal Farm`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UndoRedoState2.png[width\u003d300]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "If a command fails its execution, it will not call `Model#commitCommand()`,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "so the command will not be saved into the `commandHistoryList`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Step 4. The user now decides that adding the book was a mistake,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "and decides to undo that action by executing the `UndoCommand`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "During the execution of the `UndoCommand`, `Model#undoCommand()`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "will be called. This would call `CommandHistory#undo()`, which"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "will retrieve the most recent `ReversibleCommand` that was executed, which is"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "the `add` command. `ReversibleCommand#getUndoCommand()` would then be called"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "and the `Command` returned would be executed, undoing the add command."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "This will then shift the `currentCommandPointer` once to the left, pointing it"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "to the previous `ReversibleCommand` in the `commandListHistory`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".State of CommandHistory after `undo`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UndoRedoState3.png[width\u003d300]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "If the `currentCommandPointer` is at index -1, pointing to no command,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "then there are no previous command to undo. The `undo` command uses"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "`Model#canUndoCommand()` to check if this is the case. If so, it will"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".Sequence diagram for undo command"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoCommand()`,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "which shifts the `currentCommandPointer` once to the right, pointing to"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "the previously undone Command, and executes the redo command from"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "`ReversibleCommand#getRedoCommand()`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "If the `currentCommandPointer` is at index `catalogHistoryList.size() - 1`,"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "pointing to the latest command, then there are no undone command to redo."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The `redo` command uses `Model#canRedoCommand()` to check if this is the case."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Step 5. The user then decides to execute the command `help`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Commands that do not modify the model, such as `help`,"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "will usually not call `Model#commitCommand()`,`Model#undoCommand()` or"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "`Model#redoCommand()`. Thus, the `commandHistoryList` remains unchanged."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".State of CommandHistory after `help`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UndoRedoState4.png[width\u003d300]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitCommand()`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Since the `currentCommandPointer` is not pointing at the end of the `commandHistoryList`,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "all commands after the `currentCommandPointer` will be purged."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "We designed it this way because it no longer makes sense to redo the"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "`add t/Animal Farm ...` command. This is the behavior that most modern"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "desktop applications follow."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".State of CommandHistory after `clear`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UndoRedoState5.png[width\u003d300]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".Activity diagram for committing Command"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::CommitActivityDiagram.png[width\u003d300]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* **Alternative 1 (current choice):** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* **Alternative 2:** Saves the entire catalog."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Considering our target audience, community libraries, which may be poor. They might"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "be not able to afford a large amount of data storage. As a library may contain many"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "books, borrowers and loans, storing a state of application for each command can be"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "memory intensive. Hence, we chose to implement Alternative 1 so as to reduce the amount"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "of memory usage."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the commands for undo and redo."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "** Pros: Only need to maintain one data structure."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "** Cons: Harder for new developers to understand the mechanism for undo and redo."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* **Alternative 2:** Use two stacks to store a list of undoable and redoable commands."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "** Pros: Easy for future developers to understand as there are two separate stacks to keep track of the command to undo and redo."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "** Cons: Additional time required to add and pop from the stack."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "We chose alternative 1 as it is easier to maintain a single data structure."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "// end::undo/redo[]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "// tag::printLoanSlip[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Generate Loan Slip feature"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The printing of loan slip feature is facilitated by `LoanSlipUtil`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Essentially, it implements the following operations:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `LoanSlipUtil#mountLoan()` -- Mounts a loan slip in preparation for generation of loan slip in pdf form."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `LoanSlipUtil#unmountLoan()` -- Unmounts a loan slip ,usually after generating a pdf version of it."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `LoanSlipUtil#createLoanSlipInDirectory()` -- Creates a pdf version of the mounted loan slip in the loan_slips folder."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Given below is the sequence diagram of the generation of loan slip during the loan of a book."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Sequence Diagram for the generation of a loan slip"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::LoanSlipGeneration.png[]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The following describes the sequence of events displayed in the figure above."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "1) The `LoanCommand` is executed +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "2) The `LoanCommand` retrieves the `Book` and the `Borrower` +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "3) The `LoanCommand` creates a new `Loan` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "4) The `LoanCommand` mounts the new loan in `LoanSlipUtil` +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "5) The `Storage` component creates and save a new `LoanSlipDocument` in a saved folder +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "6) The `Logic` component opens the newly generated `LoanSlipDocument` for the librarian to print it immediately +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "7) The `Logic` component unmounts the `LoanSlipDocument` at the end of the process"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to create and use an instance of a `LoanSlipDocument`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* **Alternative 1 :** Use the `LoanSlipDocument` constructor directly."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: Will be straightforward to implement."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Cons: The `Logic` component and the `LoanCommand` object needs to have knowledge on all individual methods of `LoanSlipDocument` to be able to create a loan slip."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* **Alternative 2 (current choice):** Create a Facade class `LoanSlipUtil` to facilitate creation of `LoanSlipDocument`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: The `Logic` component and the `LoanCommand` object can now use the full functionality of `LoanSlipDocument` via the static class `LoanSlipUtil` without knowing the internal implementation of `LoanSlipDocument`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Cons: There is more code to be written and we must consider how to save state within a static class such that it can be continually reused."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "We have decided to go with Alternative 2. The Facade class provides the system with a *simplified view* of generating a loan slip, making it *easier to use*. It also *decouples* the code, making it easier to modify in the future."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation to allow extension (loan multiple books at one go)."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* **Alternative 1 (current choice):** Mount a loan in `LoanSlipUtil` for each book."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: Will be easy to extend in the future as we can just mount multiple loans using `LoanSlipUtil` before generating all loans in a single loan slip."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Cons: Will require more code when mounting loans in the Facade class."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* **Alternative 2:** Re-create `LoanSlipDocument` whenever a new loan comes in."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: Will only need to make adjustments to `Logic` component to contain an `Optional\u003cLoanSlipDocument\u003e` field and update accordingly whenever a new `Loan` comes in."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Cons: Violates Single Responsibility Principle as the Logic class will now have to change if we change the implementation of `LoanSlipDocument`."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "// end::printLoanSlip[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// tag::bookLoaningFeatures[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Book Loaning Features"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Functionalities"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The functionalities and commands associated with the book loaning feature are:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `loan sn/BOOK_SN`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Loans out a book based on its serial number."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `return INDEX [-all]`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Returns a book based on the index of that book shown on the GUI."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `renew INDEX [-all]`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Renews a book based on the index of that book shown on the GUI."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `reserve sn/BOOK_SN` or `reserve INDEX`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Reserves a book based on its serial number or index of that book shown on the GUI."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `pay AMOUNT`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Pay a fine amount for overdue books."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The rationale for the different types of arguments for the loan, return, renew and reserve may not be apparent at first,"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "but it is actually very simple."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* When borrowers come to the librarian (our user) to borrow a book, the book itself would have"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "a serial number. Thus, the user just types in the serial number of the book to be loaned out, instead of using the find"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "command to locate that book in LiBerry to use its index."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Whereas, when a borrower comes to return a book, the librarian only sees a limited list of book that was loaned out by"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "the borrower on the GUI. Hence, the librarian need not type the longer serial number to return that book, and instead, types"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "its index shown in the GUI list. Likewise, the same idea is applied to renewing books"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* When reserving books for borrowers, it is possible that the book is found through the GUI, and thus, index is used. Or,"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "the borrower brings the physical book forward to reserve it as he/she does not want to borrow it now."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "This feature is mainly facilitated by the `Loan` association class between a `Book` and a `Borrower`. The object diagram"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "just after a book is loaned out can be seen below."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Loan object diagram after a new Loan is created"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::LoanObjectDiagram.png[width\u003d\"880\"]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "In this instance, the `Borrower` with `BorrowerId` K0789 currently has a `Book` with `SerialNumber` B00456 loaned out."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The `Loan` associated to this loan, with `LoanId` L000123, is stored in the `LoanRecords` class of the model component."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Both the `Book` and `Borrower` objects also have access to this `Loan` object."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "In each `Loan` object, only the `BorrowerId` of the `Borrower` and `SerialNumber` of the `Book` is stored to reduce"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "circular dependency."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The `LoanRecords` class stores all the `Loan` objects tracked by LiBerry in a HashMap, where the key is its `LoanId`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Immutability of each object is supported to ensure correctness of undo and redo functionality."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Loaning"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The following activity diagram summarizes what happens when a user enters a loan command:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Activity diagram when a loan command is entered"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::LoaningActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "NOTE: The else branch of each branch node should have a guard condition `[else]` but due to a limitation of PlantUML,"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "they are not shown."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "When a book is successfully loaned out by a borrower, a new `Loan` object is created. The `LoanId` is automatically generated according"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "to the number of loans in the `LoanRecords` object in the model. The `startDate` is also automatically set to today\u0027s date."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The `endDate` is automatically set according to the loan period set in the user settings. This `Loan` object is added to"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "`LoanRecords` through the call to `Model#addLoan(loan)`."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The new `Borrower` instance is created by copying the details of the borrower from the original object, and also with this `Loan`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object being added into its `currentLoanList`. The new borrower object then replaces the old borrower object in the"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "`BorrowerRecords` object in the model. These two steps are done through the method call to `Model#servingBorrowerNewLoan(loan)`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The new `Book` instance is also created by copying the details of the original book object, and likewise, with this `Loan` object added into it."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Similarly, the new book object replaces the old book object in the `Catalog` object in the model through the call to"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "`Model#setBook(bookToBeLoaned, loanedOutBook)`. These were done to support immutability of the objects."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Returning"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The following activity diagram summarizes what happens when a user enters a return command:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Activity diagram when a book is being returned."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::ReturningActivityDiagram.png[width\u003d\"820\"]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "NOTE: The else branch of each branch node should have a guard condition `[else]` but due to a limitation of PlantUML,"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "they are not shown."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "When a loaned out book is successfully returned by a borrower, the associated `Loan` object is moved from the borrower\u0027s"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "`currentLoanList` to `returnedLoanList`. Inside the book object, this `Loan` object is also removed. Inside this loan"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object, the `returnDate` is added according to today\u0027s date. The `remainingFineAmount` of this loan object is also"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "calculated based on the fine amount set in the user settings."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Similarly, the creation of new objects for replacement are also done to support immutability. They are supported by the"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "methods `Model#setBook(bookToBeReturned, returnedBook)` and `Model#servingBorrowerReturnLoan(returningLoan)`."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Renewing"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "When a book is successfully renewed by a borrower, the `renewCount` of the `Loan` object is incremented by 1"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "and its `dueDate` is also increased by the renew period set in the user settings."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Similarly, the creation of new objects for replacement are also done to support immutability."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reserving"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "When a book is successfully reserved by a borrower, the `Book` object is marked as reserved and is added to the borrower\u0027s"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "`reservedBookList`."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Similarly, the creation of new objects for replacement are also done to support immutability."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Paying fines"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "When a fine amount is successfully paid by a borrower, the `remainingFineAmount` and `paidFineAmount` of the loans in"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "the borrower\u0027s `returnedLoanList` is updated accordingly."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Similarly, the creation of new objects for replacement are also done to support immutability."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: File storage of loans"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Inside the model, for each current loan (loans that are not returned yet), the `Book`, the `Borrower` and the `LoanRecords`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "point to the same the same `Loan` object. LiBerry\u0027s storage system is such that `Catalog` stores the books,"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "`BorrowerRecords` stores the borrowers and `LoanRecords` stores the loans. Thus, a decision was made to decide how these"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "loans are serialized and stored in the user\u0027s file system."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* **Alternative 1:** Save the whole `Loan` object in each book in the `catalog.json` and save the the whole of every `Loan`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object in each borrower in `borrowerrecords.json`. The `Loan` object is also duplicated in `loanrecords.json`."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Pros: Easy to implement. No need to read storage files in a specific order."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Cons: Storage memory size issues. Same information is duplicated and stored in all 3 storage files."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* **Alternative 2 (selected choice):** Save only the `LoanId` of each `Loan` object in each book in the `catalog.json`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "and save a list of `LoanId` in each borrower in `borrowerrecords.json`. The whole `Loan` object is only saved in"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "`loanrecords.json`. When reading the storage files at the start of the application, `loanrecords.json` need to be read"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "in first, before the borrowers and books can be read in as they would get the loan objects from the `LoanRecords` based"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "on their `LoanId` s."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Pros: Uses less memory as only `LoanId` is stored for the books and borrowers, instead of the whole serialized loan objects."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Also, `LoanRecords` thus serve as a single source of truth."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Cons: Must ensure that the reading of stored files are in the correct order, and also correct `Loan` objects are referenced"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "after reading in `borrowerrecords.json` and `catalog.json`. Method used to retrieve a `Loan` object from its `LoanId` must"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "also be fast enough as there can be hundreds of thousands of loans."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support recording of loans in LoanRecords"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* **Alternative 1:** Use a list data structure, such as an `ArrayList` to store the loans in the model component."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Pros: Easy to implement. Easy to obtain insertion order of the loans and sort through the list."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Cons: Slow to search for a `Loan` based on its `LoanId`, i.e., O(n) time, as the list must be traversed to find the"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "correct associated `Loan` object. The additional time taken adds up when reading the storage files during the starting"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "up of the application. Thus, it can make the application feel laggy and unresponsive at the start."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* **Alternative 2 (selected choice):** Use a `HashMap` to store the loans, where the key is its `LoanId`."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Pros: Fast to retrieve a `Loan` object based on its `LoanId`, i.e., O(1) time."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Cons: Insertion order is not preserved. Have to traverse through all the loan objects in the HashMap to check their"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "`startDate` in order to obtain their insertion order."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// end::bookLoaningFeatures[]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// tag::bookFinding[]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d Book Finding"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "The command for finding a book in the catalog is as follows: +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "`find [NUMBER] { [t/TITLE] [a/AUTHOR] [g/GENRE]... [sn/BOOK_SN]] [-overdue] [-loaned] [-available] }`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "ModelManager contains a `FilteredList` of `Books` (`filteredBooks`), which is used to display books on the LiBerry GUI. Book finding works by"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "starting converting the command string in to a `BookPredicate` object, then updating `filteredBooks` with that predicate."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "The parsing of the command string to create the required `BookPredicate` object is done with the help of the `ArgumentTokenizer` object."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "`ArgumentTokenizer` tokenizes the command string to generate an"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "`ArgumentMultimap`, which is internally a HashMap of predicate values paired to prefix keys. The `FindCommandParser`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "then extracts all the values from the `ArgumentMultimap` prefix by prefix and building the predicate through functions"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "such as `setTitle()`, `setGenres()` `setLoanStatus` etc."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "The diagram below shows a simplifed execution sequence of a \u0027find t/Animal Farm a/George\u0027 command string."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".Sequence Diagram showing the execution of a Find Command input"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "image::FindSequenceDiagram.png[width\u003d\"840]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "The `BookPredicate` class stores in its fields the specific values to match. Default values are mostly null, which will indicate that"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "there is no need to filter for that field. Below is an example."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".Object Diagram showing the fields present in an empty (left) and partially filled (right) BookPredicate object"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "image:BookPredicateEmptyObjectDiagram.png[height\u003d\"300\"]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "image:BookPredicateFilledObjectDiagram.png[height\u003d\"300\"]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "The figure above shows what happens when we are trying to filter for books with title \u0027harry\u0027 and \u0027Potter\u0027 that are loaned out,"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "showing up to 5 books only. Notice that the rest of the fields in the object are null."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Ensuring only 1 Loan Status Flag"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "In order for LiBerry to display only books that are *loaned*, *available* or *overdue*, flags are used. All flags have"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "the prefix `-`, and the `ArgumentTokenizer` is able to detect this. However, a user can technically enter more than 1"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "of such loan status flags eg. `-loaned -available`. This is not meaningful, as there can be multiple interpretations of"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "this statement. The user could be looking for both types of books (which will show every book), or books that are both"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "loaned and available (which will show none). To prevent such meaningless confusion, there is a need for only 1 such"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "flag to be accepted in the `BookPredicate`."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* **Alternative 1: Hard code a priority for loan status flags and accept the highest one**"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Cons: Does not make it clear for the user why an unintended display is shown"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* **Alternative 2 (Currently Used): Raise an exception whenever there are more than 1 loan status flags**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Pros: Helps user clarify misconception of using more than 1 loan status flag"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Cons: Slightly more complicated code where the output `ArgumentMultimap`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Limiting the Number of Books to Display"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "As users generally do not want to be flooded with information when using the find command, a display limit `[NUMBER]` is used. Users"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "can ask for a limited number of books to display. However, the `FilteredList` JavaFx class that is used to implement the list of"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "filtered books does not have an API that sets a hard limit on the number of books to show. A work-around has to be made."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* **Alternative 1: Create an new class that extends the JavaFx `FilteredList` class**"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Pros: Does not require a change in other parts of the code"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Cons: Hard to implement. Need to know the ins and outs of FilteredList"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* **Alternative 2 (Currently Used): Create a counter variable in `BookPredicate` that decrements after every passed test**"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Cons: Not the most cleanest way of implementation"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// end::bookFinding[]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "//tag::registerBorrower[]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "\u003d\u003d\u003d Register borrower feature"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "The `register` borrower feature is facilitated by `BorrowerRecords`. The BorrowerRecords stores a list of borrowers,"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "representing the borrowers registered into the library system. The command to register a borrower into the library"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "system is as followed: +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "`register n/NAME p/PHONE_NUMBER e/EMAIL`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Given below is an activity diagram of a borrower being registered into the Borrower Records of the library."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ".Activity Diagram for registering a borrower"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "image:RegisterBorrowerActivityDiagram.png[width\u003d270]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Given below is a class diagram of a book."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ".Class Diagram for `Borrower`"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "image::BorrowerClassDiagram.png[width\u003d400]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Given below is the object diagram of a newly registered borrower."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ".Object Diagram for `Borrower`"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "image::BorrowerObjectDiagram.png[width\u003d300]"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Generating a unique borrower ID"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Every time a new borrower is being registered, the system will automatically generate a borrower ID for the borrower"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "which the borrower will have to use every time the borrower borrows books from the library."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Initially, what we proposed is that, every time a new borrower is being registered into the system, we find the size of"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "the list of borrowers, we add 1 and set it as the borrower ID of the new borrower."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Eg: There are 100 borrowers in the system. The new borrower\u0027s ID will be \"K0101\"."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "However, we decided to implement a new function, which is to allow borrowers to be removed from the library system."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Therefore, this method does not work anymore. So we decided to change to generate the new ID based on the first-found"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "available ID."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "//end::registerBorrower[]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d Appendices"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* a librarian in a small town library that has to serve many library users (borrowers) quickly"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* has a need to manage a significant number of books and borrowers"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*Value proposition*: Many people visit the neighborhood library to borrow books and also donate their books. There is"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "always a long queue in this small library and the librarian would have to type quickly to handle the long queue. LiBerry"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "can manage a library system faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d User Stories"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |librarian |add a book brought/donated by people to the library |maintain a record of all the books"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "in the library"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |librarian |delete books that are no longer available |maintain a record of all the books in the library"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |helpful librarian |search for certain book by the title/author/genre |help borrowers check if it is"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "available"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |forgetful librarian |mark a book as loaned |tell borrowers that the book is loaned out and unavailable"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "for borrowing"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |forgetful librarian |mark a book as available |let borrowers know that the book will now be available"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "for borrowing"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |generate a list of overdue books and their borrowers |know which borrower has overdue books"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "and which books are overdue"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |generate a list of currently loaned / available books |do inventory checks"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |meticulous librarian |record the movement of books in and out |keep track of available books here"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |helpful librarian |register a new borrower in the system |help new borrowers start borrowing books"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |search for certain book by the author |recommend other books of the same author"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |search for certain book by its genre |recommend other books of the same genre"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |meticulous librarian |different physical books to have different serial numbers |distinguish between"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "books of the same title"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |set the default loan period, renew period and fine amount |customize the app to"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "suit my library\u0027s policies"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |librarian |extend a book’s loan |help borrowers to borrow the book for a longer period"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |lazy librarian |generate and record the fine of overdue books |keep track of overdue fines incurred by"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "borrowers"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |dutiful librarian |record that a fine is paid |keep track of accounting and prevent duplicate payments"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |librarian |view details of a book |know more information about the book - author, genre, synopsis, etc"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |careless librarian |be able to undo a command |undo my input mistakes"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* *` |careless librarian |be able to redo a command |undo my undo commands, in case I need it, without having to"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "type out a possibly lengthy command"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |health conscious, night-working librarian |change the user interface into a night mode |reduce the impact"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "of light and glare on my eyes when I am working at night"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |impatient librarian |have my command inputs returned within 1 sec |serve my customers quickly"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |forgetful librarian |look at the help section |be reminded of the commands available"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |helpful librarian |be able to reserve a currently on-loan book |allow borrowers to borrow the book once it"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "is returned"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* *` |librarian |be able to see an image of the book cover |borrowers can know how the book looks like"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |helpful librarian |be able generate a list of most popular books |recommend books to borrowers"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |helpful librarian |add a borrowers rating to the book |recommend books based on ratings"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |receptive librarian |add a borrower’s review to the book |recommend books based on reviews"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |lazy librarian |be able to auto-complete book title searches |reduce my search time and give me nearby titles when"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "I submit a book title query"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |diligent librarian |search for user profiles by name |pull up his donate, borrowing, fine and payment history"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The use case diagram below illustrates the main use cases of LiBerry."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".General Use Cases for LiBerry"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::UseCases.png[width\u003d\"330\"]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "(For all use cases below, the *System* is `LiBerry` and the *Actor* is the `user`, who is a librarian, unless specified otherwise)"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: Delete a book"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "1.  User searches for books by name, genre or author"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "2.  LiBerry shows a list of books"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "3.  User requests to delete a specific book in the list"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "4.  LiBerry deletes the book"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** 3a1. LiBerry shows an error message."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: Add a book"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "1.  User adds a book by specifying its details"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "2.  LiBerry shows a success message"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* 1a. The arguments provided are invalid."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** 1a1. LiBerry shows an error message."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "+"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* 1b. Serial Number is not provided."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** 1b1. Serial Number is auto-generated."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: Loan a book"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "1.  Borrower comes to user to borrow a book."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "2.  User enters the borrower\u0027s ID."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "3.  LiBerry shows that the borrower is being served."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "4.  User loans out the book to the borrower."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "5.  LiBerry shows the book as being successfully loaned out."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* 2a. LiBerry cannot find the ID in its system."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** 2a1. LiBerry requests for a valid and registered ID."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** 2a2. User enters new ID."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** Steps 2a1-2a2 are repeated until the ID entered is valid."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* 3a. The book cannot be loaned out."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** 3a1. LiBerry shows an error message."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *a. At any time, the user makes a typo in the input."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** *a1. User undoes the last command entered."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** *a2. User re-types the input."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Use case resumes at the step preceding this."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".  Should be able to manage up to 20000 books, 5000 borrower records and 500000 loan records without a noticeable"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "[[ui]] UI::"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "User Interface"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a book"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ". Deleting a book while there are books are listed"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".. Prerequisites: Books are displayed in the list on the UI."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "   Expected: First book is deleted from the list. Details of the deleted book shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "   Expected: No book is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 51,
      "hoholyin": 215,
      "seeziyang": 306,
      "Cronyxx": 110,
      "-": 347,
      "shiyao821": 61
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d LiBerry - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 2,
      "-": 121
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d LiBerry - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, LiBerry\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "hoholyin": 3,
      "-": 81
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d LiBerry - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d LiBerry - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "By: `AY1920S1-CS2103T-F13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*LiBerry* is a desktop app for librarians to *quickly manage their community libraries!*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry is optimized for librarians who prefer to work with a Command Line Interface (CLI) while still having the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "You can type quickly and serve your long line of borrowers in a short amount of time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry can manage all your books and borrowers efficiently and meticulously. You can easily add new books to your library"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "records, register new borrowers, loan out books, track outstanding fines and more!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "This user guide will introduce to you the different features of LiBerry and how to use them!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Jump to \u003c\u003cQuick Start\u003e\u003e to get started now! Enjoy!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d Legend"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Denotes useful tips."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// tag::quickStart[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Dive into LiBerry with our simple set-up guide a quick tour of our user interface and features!"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// need to elaborate here, add more egs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".  Download the latest `LiBerry.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your LiBerry."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".LiBerry\u0027s User Interface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ". Here are some commands you can try out:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".. *Add a new book* to LiBerry by using `add t/Animal Farm a/George Orwell`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".. *Register a new borrower* to LiBerry by using `register n/John Smith p/97875454 e/jsmith@gmail.com`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// end::quickStart[]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// tag::UGshiyao3[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "This section contains a detailed guide to every feature LiBerry supports, including how to use and the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "format of the commands to use the feature."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The following table shows the format used to describe each command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `find t/TITLE`, `BOOK_TITLE` is a parameter which can be used as `find t/Harry Potter`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Items in square brackets are optional e.g. `t/TITLE [g/GENRE]` can be used as `t/Harry Potter g/fiction` or as `t/Harry Potter`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Curly brackets indicate that at least 1 of the optional parameters have to be given, e.g. `{ [t/TITLE] [a/AUTHOR] }` can be used as `t/Harry Potter`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Items with `...`​ after them can be used multiple times including zero times, e.g. `[g/GENRE]...` can be used as `{nbsp}` (i.e. 0 times), `g/fiction`, `g/fiction g/adventure` etc."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `t/TITLE a/AUTHOR`, `a/AUTHOR t/TITLE` is also acceptable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// end::UGshiyao3[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d Using Normal Mode"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The Normal Mode is for librarians to manage the books in the library. Commands in normal mode are not specific to any borrowers. The Normal Mode also provides some utility commands to help the librarian use LiBerry. Commands that are specific to Serve Mode cannot be used while in Normal Mode."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Opens the help window, which includes a list of possible commands. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// tag::UGshiyao1[]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Locating books by title: `find`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Shows all relevant books found. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `find [NUMBER] { [t/TITLE] [a/AUTHOR] [g/GENRE]... [sn/BOOK_SN] [-overdue] [-loaned] [-available] }` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `find [NUMBER] { [t/TITLE] [a/AUTHOR] [g/GENRE]... [sn/BOOK_SN] [-overdue] [-loaned] [-available] [-rated] [-popular] [-new] }` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* The search is case insensitive. e.g `harry` will match `Harry`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// * Only full words will be matched e.g. `Har` will not match `Harry`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Partial words will also be matched e.g. `Har` will match `Harry`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Books matching at least one keyword will be returned (i.e. `OR` search). e.g. `harry` will return both `Harry Potter` and `Harry Botter`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[NUMBER]` will list this `NUMBER` of books instead"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[t/TITLE]` will be used to search through book titles"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[a/AUTHOR]` will be used to search through or filter by authors"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[g/GENRE]` will be used to search through or filter by genre"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[sn/BOOK_SN]` will be used to search through book serial numbers"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Only 1 of the following 3 flags can be used"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-overdue]` will only show overdue books"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-loaned]` will only show loaned books"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-available]` will only show available books"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Adding one of the following will sort the books such that:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-rated]` will list the top 10 highly rated books ** - Coming in v2.0**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-popular]` will list the top 10 most borrowed books ** - Coming in v2.0**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-new]` will list the 10 newest books ** - Coming in v2.0**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `find t/Animal Farm a/George Orwell` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Searches for the book titled “Animal Farm” by the author “George Orwell”."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `find 3 g/mystery g/children -available` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Searches for children mystery books that are not on loan and show the first 3 entries."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// end::UGshiyao1[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing a book: `info`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Views more information about a book in the results list. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `info INDEX`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Clears the most recent search and displays all books. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a book: `add`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Adds a new book to library records. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `add t/TITLE a/AUTHOR [sn/BOOK_SN] [g/GENRE]...`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "A book can have any number of genres (including 0)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "You do not need to specify the serial number if you wish so. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry will then auto-generate a valid serial number for the new book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `add t/Harry Botter a/Raylei Jolking sn/B02010 g/children` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Adds a children book titled \"Harry Botter\" by \"Raylei Jolking\", with the serial number \"B02010\", to LiBerry."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `add t/Inferno a/Tande g/classic g/epic`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Adds a book titled \"Inferno\" by \"Tande\", with the genres \"classic\" and \"epic\" to LiBerry. The serial number for"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "this book will be automatically generated."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a book : `delete`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Deletes a book from the library records. Used when book is lost or trashed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `delete INDEX` or `delete sn/BOOK_SN`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Deletes the book at the specified `INDEX`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* The index refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `INDEX` will delete the book with the book at this index in the results list"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `sn/BOOK_SN` will delete the book with this serial number"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `find t/harry` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Deletes the 1st book in the results of the `find` command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `delete sn/B00422` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Deletes the book with serial number `sn/B00422`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Registering a new borrower: `register`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Registers a new borrower to the library records. A unique ID associated with the borrower will automatically be generated and displayed. Borrowers are expected to know his ID in order for loans to be processed. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Format: `register n/NAME p/PHONE_NUMBER e/EMAIL`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `register n/matt p/83938249 e/matt@damon.com` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Registers a new borrower called \"matt\", with phone number \"83938249\" and email \"matt@damon.com\" to LiBerry."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "\u003d\u003d\u003d\u003d Unregistering a borrower: `unregister`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Unregisters and removes a borrower with the given borrower ID from the library records. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Format:  `unregister id/BORROWER_ID`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "* `unregister id/K0001` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Deletes the borrower with the borrower ID `id/K0001`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing: `undo`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Undoes the previous command/action. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing: redo"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Redoes the most recent undo should there be no more commands/actions after the most recent undo. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d Set User Settings: `set`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Sets the user settings for loan period (in days), renew period (in days), fine increment (in cents) and maximum renews allowed. +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `set { [lp/LOAN_PERIOD] [rp/RENEW_PERIOD] [fi/FINE_INCREMENT] [mr/MAX_RENEWS] }`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*  `set lp/30 rp/10` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Sets the loan period to 30 days and renew period to 10 days."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*  `set rp/10 fi/5 lp/10 mr/2` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Sets the renew period to 10 days, fine increment to 5 cents per day, loan period to 10 days and maximum renews allowed to 2."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Toggling night mode: `toggleui` - Coming in v2.0"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Toggles between day mode and night mode for the UI. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `toggleui`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Rate a book : `rate` - Coming in v2.0"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Gives a book a numerical rating. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `rate INDEX r/RATING`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d Using Serve Mode"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "The Serve Mode is for librarians to serve borrowers. All commands in Serve Mode are done on a specific borrower currently served by the librarian. All commands in Normal Mode can be used in Serve Mode too."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Entering Serve Mode: `serve`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Enters Serve Mode. All commands/actions will be done on this specific borrower. A list of the borrower’s currently loaned books and their serial numbers will be displayed. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `serve id/BORROWER_ID`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `serve id/K0001` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Enters save mode to serve a borrower with the ID `K0001`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting Serve Mode: `done`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Exits Serve Mode. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `done`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a borrower: `edit`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Edit borrower’s particulars. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Format: `edit { [n/NAME] [p/PHONE_NUMBER] [e/email] }`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Edits the currently serving borrower\u0027s particulars."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `edit p/91234567 e/jane@austen.com` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Edits the phone number and borrower\u0027s email address to be `91234567` and `jane@austen.com` respectively."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `edit n/Betsy Crower` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Edits the name of the borrower to be `Betsy Crower`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// tag::loanRelated[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Loaning book(s): `loan`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loan book(s) by their serial number. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `loan sn/BOOK_SN` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `loan sn/BOOK_SN [sn/BOOK_SN]...` - Coming in v2.0"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `loan sn/B00041` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loans the book with serial number B00041 to the currently served borrower."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `loan sn/B00201 sn/B02929 sn/B00203` - Coming in v2.0 +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loans the books with serial numbers B00201, B02929 and B00203 to the currently served borrower."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "After loaning all books, upon the `DONE` command, a printable loan slip in pdf format will be generated."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".Printable loan slip generated."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "image::LoanSlip.png[width\u003d250]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Returning book(s): `return`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Return book(s) that were loaned by the borrower. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `return INDEX` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `return INDEX` or `return -all` ** - Coming in v2.0** +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Including `-all` will return all currently loaned books."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// add example with ss when UI is done"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Returns the book at the specified `INDEX` in the borrower panel or all of the currently served borrower\u0027s loaned out books."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* The index refers to the index number shown in the borrower\u0027s book list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `INDEX` indicates the book at this index in the borrower\u0027s book list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `-all` indicates all the books currently loaned out by the borrower."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "****"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Renewing book(s): `renew`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Renew book(s) from the list of currently loaned books, i.e., extend their due dates. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `return INDEX` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `renew INDEX` or `renew -all` ** - Coming in v2.0** +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// add example with ss when UI is done"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Renews the book at the specified `INDEX` in the borrower panel or all of the currently served borrower\u0027s loaned out books that can still be renewed."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* The index refers to the index number shown in the borrower\u0027s book list."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `INDEX` indicates the book at this index in the borrower\u0027s book list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `-all` indicates all the books currently loaned out by the borrower that still can be renewed."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Paying fines: `pay`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Reduces the outstanding amount of borrower\u0027s fines by AMOUNT (in dollars). +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Format: `pay $AMOUNT`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Reserve a book: `reserve` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Reserve a particular book"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `reserve INDEX` or `reserve sn/BOOK_SN`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Reserves the book at the specified `INDEX` or the book with the specified serial number `BOOK_SN` for the currently served borrower."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* The index refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `INDEX` indicates the book at this index in the search results list"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `sn/BOOK_SN` indicates the particular book with this serial number"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* `reserve 2` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Reserves the 2nd book in the results of the `find` command for the currently served borrower."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `reserve sn/B02422` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Reserves the book with serial number `sn/B02422` for the currently served borrower."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// end::loanRelated[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d Saving the Data"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous LiBerry folder."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// tag::UGshiyao2[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "This section contains the summary of LiBerry\u0027s commands. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Commands applicable to both *Normal* and *Serve* mode:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Find a book* : `find [NUMBER] { [t/TITLE] [a/AUTHOR] [g/GENRE]... [sn/BOOK_SN]] [-overdue] [-loaned] [-available] }` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "e.g. `find t/Animal Farm a/George Orwell`, `find 3 g/mystery g/children -available` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "`[-rated] [-popular] [-new]` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *View book info* : `info INDEX`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Clear results* : `clear`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Add a book* : `add t/TITLE a/AUTHOR sn/BOOK_SN [g/GENRE]... ` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "e.g. `add t/Harry Botter and the Baby\u0027s Potty a/Reali Jolking sn/B02010 g/children`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Delete a book* : `delete INDEX` or `delete sn/BOOK_SN`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "* *Register a borrower* : `register n/NAME p/PHONE_NUMBER e/EMAIL` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "e.g. `register n/matt p/83938249 e/matt@damon.com`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "* *Unregister a borrower* : `unregister id/BORROWER_ID`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* *Set user settings*: `set { [lp/LOAN_PERIOD] [rp/RENEW_PERIOD] [fi/FINE_INCREMENT] }`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Toggle night mode*: `toggleui` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Rate a book* : `rate INDEX r/RATING` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Commands applicable to *Serve* mode only:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Serve mode* : `serve id/BORROWER_ID` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "e.g. `serve id/K0001`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Exit serve mode* : `done`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "* *Edit a borrower\u0027s particulars* : `edit { [n/NAME] [p/PHONE_NUMBER] [e/email] }` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "e.g. `edit p/91234567 e/jane@austen.com`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Loan book* : `loan sn/BOOK_SN` +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "e.g. `loan sn/B00201`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Return book(s)* : `return INDEX` or `return -all`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Renew book(s)* : `renew INDEX` or `renew -all`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Pay fines* : `pay $AMOUNT`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Reserve book* : `reserve INDEX` or `reserve sn/BOOK_SN` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// end::UGshiyao2[]"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 14,
      "hoholyin": 11,
      "seeziyang": 120,
      "Cronyxx": 1,
      "-": 122,
      "shiyao821": 136
    }
  },
  {
    "path": "docs/diagrams/AddBook.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \"User\" as User USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \":UI\" as UI UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "User -\u003e UI : add t/Animal Farm a/George"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "UI -\u003e Logic : execute(\"add t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic -\u003e Model : addBook(animalFarm)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Model --\u003e Logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic -\u003e Storage : saveCatalog(updatedCatalog)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Storage -\u003e Storage : saveToLocalFile"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Storage --\u003e Logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic --\u003e UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "UI --\u003e User"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 32
    }
  },
  {
    "path": "docs/diagrams/AddBookActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ":User executes AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "if () then ([Serial Number not provided])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    :Generate serial number;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "else ([Serial Number provided])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "endif"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ":Create book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "stop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 10
    }
  },
  {
    "path": "docs/diagrams/AddBookLogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "participant \":CatalogParser\" as CatalogParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u0027participant \":Book\" as Book MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[-\u003e LogicManager : execute(\"add t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LogicManager -\u003e CatalogParser : parseCommand(\"add t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "activate CatalogParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "CatalogParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "AddCommandParser --\u003e CatalogParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "CatalogParser -\u003e AddCommandParser : parse(\"t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "AddCommandParser --\u003e CatalogParser : a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "AddCommandParser -[hidden]-\u003e CatalogParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "CatalogParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "deactivate CatalogParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "AddCommand -\u003e Model : addBook()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 70
    }
  },
  {
    "path": "docs/diagrams/AddBookStorage.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":CatalogStorage\" as CatalogStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":FileUtil\" as FileUtil COMMONS_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":JsonSerializableCatalog\" as JsonSerializableCatalog STORAGE_COLOR_T2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":JsonUtil\" as JsonUtil COMMONS_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Logic -\u003e Storage ++ : saveCatalog(updatedCatalog)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Storage -\u003e CatalogStorage : getCatalogFilePath"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "activate CatalogStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogStorage --\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "deactivate CatalogStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Storage -\u003e CatalogStorage : saveCatalog"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "activate CatalogStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogStorage -\u003e FileUtil : createIfMissing(filePath)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "create JsonSerializableCatalog"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogStorage -\u003e JsonSerializableCatalog ++ : new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogStorage -\u003e JsonUtil ++ : saveJsonFile"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonUtil -\u003e JsonUtil ++ : serializeObjectToJsonFile"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonUtil -\u003e FileUtil : writeToFile"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Storage --\u003e Logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 32
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteBook(b)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveCatalog(updatedCatalog)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : saveToLocalFile"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 3,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/BookClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e \"*\" Genre"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e \"1\" Title"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e \"1\" SerialNumber"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e \"1\" Author"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book -right-\u003e \"0..1\" Loan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Loan -down[hidden]\u003e Author"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 13
    }
  },
  {
    "path": "docs/diagrams/BookObjectDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "show members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "skinparam ObjectAttributeFontSize 12"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "object \"__:Book__\" as Book {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "object \"__serialNumber:SerialNumber__\" as SerialNumber {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    value \u003d \"B00001\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "object \"__title:Title__\" as Title {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    value \u003d \"Harry Botter\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "object \"__author:Author__\" as Author {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    value \u003d \"J K Rowling\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "object \"__loan:Optional\u003cLoan\u003e__\" as Loan {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    value \u003d loan"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "object \"__:Genre__\" as Genre1 {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    genreName \u003d \"ACTION\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "object \"__:Genre__\" as Genre2 {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    genreName \u003d \"FICTION\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e SerialNumber"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e Title"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e Author"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e Genre1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e Genre2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book --\u003e Loan"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 44
    }
  },
  {
    "path": "docs/diagrams/BookPredicateEmptyObjectDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "object BookPredicate {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    String title \u003d null"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    String author \u003d null"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    String serialNumber \u003d null"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Set\u003cGenre\u003e genres \u003d null;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Flag loanState \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    int displayLimit \u003d -1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 10
    }
  },
  {
    "path": "docs/diagrams/BookPredicateFilledObjectDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "object BookPredicate {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    String title \u003d \"harry Potter\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    String author \u003d null"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    String serialNumber \u003d null"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Set\u003cGenre\u003e genres \u003d null;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Flag loanState \u003d Flag.LOANED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    int displayLimit \u003d 5;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 10
    }
  },
  {
    "path": "docs/diagrams/BorrowerClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e \"1\" Name"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e \"1\" Phone"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e \"1\" Email"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower -Right\u003e \"1\" BorrowerId"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e \"2\" LoanList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 12
    }
  },
  {
    "path": "docs/diagrams/BorrowerObjectDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "show members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "skinparam ObjectAttributeFontSize 12"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "object \"__:Borrower__\" as Borrower {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "object \"__borrowerId:BorrowerId__\" as BorrowerId {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    value \u003d \"K0001\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "object \"__name:Name__\" as Name {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    name \u003d \"Alice Tan\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "object \"__phone:Phone\" as Phone {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    value \u003d \"62226111\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "object \"__email:Email__\" as Email {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    value \u003d \"alice@mail.com\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "object \"__:currentLoanList:LoanList__\" as Loan1 {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "object \"__:returnedLoanList:LoanList__\" as Loan2 {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e BorrowerId"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e Name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e Phone"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e Email"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e Loan1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Borrower --\u003e Loan2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 44
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "if () then ([command commits Command])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    :Purge redunant commands;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    :Save command to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    commandHistoryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 4,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":CatalogParser\" as CatalogParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \"command:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \"predicate:BookPredicate\" as BookPredicate MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[-\u003e LogicManager : execute(\"find t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "LogicManager -\u003e CatalogParser ++ : parseCommand()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogParser -\u003e FindCommandParser ++"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogParser -\u003e FindCommandParser ++ : parse(\"t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "FindCommandParser -\u003e ArgumentTokenizer ++ : tokenize()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "create BookPredicate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "FindCommandParser -\u003e BookPredicate ++"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "FindCommandParser -\u003e BookPredicate : set title and author"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return predicate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "FindCommandParser -\u003e FindCommand ++ : new FindCommand(predicate)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "FindCommandParser -[hidden]-\u003e CatalogParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "LogicManager -\u003e FindCommand ++ : execute()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "FindCommand -\u003e Model : updateFilteredList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 57
    }
  },
  {
    "path": "docs/diagrams/LoanObjectDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "show members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "skinparam ObjectAttributeFontSize 12"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__loanRecords:LoanRecords__\" as LoanRecords"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__:Loan__\" as Loan {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    renewCount \u003d 0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    remainingFineAmount \u003d 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    paidFineAmount \u003d 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__loanId:LoanId__\" as LoanId {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    value \u003d \"L000123\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__bookSerialNumber:SerialNumber__\" as SerialNumber {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    value \u003d \"B00456\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__borrowerId:BorrowerId__\" as BorrowerId {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    value \u003d \"K0789\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__startDate:LocalDate__\" as startDate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__dueDate:LocalDate__\" as dueDate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__returnDate:LocalDate__\" as returnDate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__:Book__\" as Book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__:Borrower__\" as Borrower"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__currentLoanList:LoanList__\" as currentLoanList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "object \"__returnedLoanList:LoanList__\" as returnedLoanList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LoanRecords --\u003e Loan"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LoanRecords ---\u003e LoanId"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Book --\u003e Loan"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Book --\u003e SerialNumber"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Borrower --\u003e currentLoanList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Borrower --\u003e returnedLoanList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "currentLoanList --\u003e Loan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "returnedLoanList -[hidden]-\u003e Loan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Borrower --\u003e BorrowerId"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loan -\u003e LoanId"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loan --\u003e SerialNumber"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loan --\u003e BorrowerId"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loan --\u003e startDate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loan --\u003e dueDate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Loan --\u003e returnDate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 49
    }
  },
  {
    "path": "docs/diagrams/LoanSlipGeneration.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "box Logic #Lightblue"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    participant \":LoanCommand\" as LoanCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "box Model #Pink"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    participant \":Loan\" as Loan MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    participant \":LoanSlipUtil\" as LoanSlipUtil MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "box Storage #Lightyellow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic -\u003e LoanCommand : execute(model)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate LoanCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanCommand -\u003e Model : getBook(toLoan)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Model --\u003e LoanCommand : Book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanCommand -\u003e Model : getServingBorrower()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Model --\u003e LoanCommand : ServingBorrower"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "create Loan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanCommand -\u003e Loan : new Loan(LoanId, Book, Borrower, StartDate, DueDate)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Loan"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Loan --\u003e LoanCommand : Loan"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Loan"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanCommand -\u003e LoanSlipUtil : mountLoan(Loan, Book, Borrower)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate LoanSlipUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanSlipUtil --\u003e LoanCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate LoanSlipUtil"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanCommand -\u003e Logic : CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate LoanCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "destroy LoanCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic -\u003e Storage : storeNewLoanSlip()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Storage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Storage -\u003e LoanSlipUtil : createLoanSlipInDirectory()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate LoanSlipUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanSlipUtil --\u003e Storage : LoanSlip.pdf"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate LoanSlipUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Storage -\u003e Logic"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic -\u003e LoanSlipUtil : openGeneratedLoanSlip()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate LoanSlipUtil"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanSlipUtil --\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate LoanSlipUtil"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic -\u003e LoanSlipUtil : unmountLoan()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate LoanSlipUtil"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanSlipUtil --\u003e Logic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate LoanSlipUtil"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 67
    }
  },
  {
    "path": "docs/diagrams/LoaningActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":User enters \"loan sn/BOOK_SN\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "if () then ([Model is not\\n in Serve mode])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Throw exception for"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    not in Serve mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "elseif () then ([Model does not\\n have book with the\\n given serial number])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Throw exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    for no such book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "elseif () then ([Book is already\\n loaned out])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Throw exception"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    for book already"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    on loan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Book successfully"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    loaned to borrower;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 23
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Class CatalogParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LogicManager --\u003e\"1\" CatalogParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "CatalogParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, InfoCommand, \\nLoanCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 4,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Interface ReadOnlyCatalog \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Catalog"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class BorrowerRecords"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class LoanRecords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class ReadOnlyCatalog"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class GuiSettings"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class UserSettings"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Package Book {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Book"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Author"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class SerialNumber"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Loan"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class UniqueBookList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Package Borrower {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class BorrowersList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Borrower"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class BorrowerId"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class LoanList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Package Loan {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Loan"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class ListOfAllLoans"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class LoanId"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "BorrowerId -- SerialNumber"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "(BorrowerId, SerialNumber) .. Loan"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class LocalDate"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Package Genre {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Class Genre"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Catalog .up.|\u003e ReadOnlyCatalog"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "UserPrefs *--\u003e \"1\" GuiSettings"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "UserPrefs *--\u003e \"1\" UserSettings"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "ModelManager o--\u003e \"1\" Catalog"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "ModelManager o--\u003e \"1\" LoanRecords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "ModelManager o--\u003e \"1\" BorrowerRecords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "ModelManager o--\u003e \"0..1\" Borrower : serves \u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Catalog *--\u003e \"1\" UniqueBookList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "UniqueBookList o--\u003e \"*\" Book"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book *--\u003e \"*\" Genre"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book *--\u003e \"1\" Title"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book *--\u003e \"1\" Author"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Book *--\u003e \"1\" SerialNumber"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "BorrowerRecords *--\u003e \"1\" BorrowersList"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "BorrowersList o--\u003e \"*\" Borrower"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Borrower *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Borrower *--\u003e \"1\" Phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Borrower *--\u003e \"1\" Email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Borrower *--\u003e \"1\" BorrowerId"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Borrower *--\u003e \"1\" LoanList"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanList *--\u003e \"*\" Loan"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanRecords *--\u003e \"1\" ListOfAllLoans"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Loan *--\u003e \"1\" LoanId"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Loan *--\u003e \"2\" LocalDate"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Catalog -[hidden]\u003e LoanRecords"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanRecords -[hidden]\u003e BorrowerRecords"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LoanList -[hidden]right\u003e Name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "ModelManager --\u003e\"*\" Book : filtered list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 66,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/RegisterBorrowerActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ":User executes RegisterCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ":Generate borrower ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ":Create borrower;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "stop"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 7
    }
  },
  {
    "path": "docs/diagrams/ReturningActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":User enters \"return INDEX\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "if () then ([Model is not\\n in Serve mode])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Throw exception for"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    not in Serve mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "elseif () then ([Index is invalid])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Throw exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    for invalid index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "elseif () then ([Book is not\\n loaned out])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Throw exception"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    for book not on loan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "elseif () then ([Currently serving\\n borrower does not\\n loan this book])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Throw exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    for book not loaned"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    by borrower;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    :Book successfully"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    returned;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 26
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Interface CatalogStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Interface BorrowerRecordsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Interface LoanRecordsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Class JsonCatalogStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Class JsonBorrowerRecordsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Class JsonLoanRecordsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager o-down-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager o-right-\u003e CatalogStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager o-right-\u003e BorrowerRecordsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager o-right-\u003e LoanRecordsStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonCatalogStorage .up.|\u003e CatalogStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonCatalogStorage .down.\u003e JsonSerializableCatalogStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonSerializableCatalogStorage ..\u003e JsonSerializableBook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonSerializableBook ..\u003e JsonAdaptedGenre"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonBorrowerRecordsStorage .up.|\u003e BorrowerRecordsStorage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonBorrowerRecordsStorage .down.\u003e JsonSerializableBorrowerRecords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonSerializableBorrowerRecords .down.\u003eJsonSerializableBorrower"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonLoanRecordsStorage .up.|\u003e LoanRecordsStorage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonLoanRecordsStorage .down.\u003e JsonSerializableLoanRecords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonSerializableLoanRecords .down.\u003e JsonSerializableLoan"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "shiyao821": 26
    }
  },
  {
    "path": "docs/diagrams/UiAddBookSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "participant \":User\" as User USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "box UI #Lightgreen"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    participant \":CommandBox\" as CommandBox UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    participant \":ResultDisplay\" as ResultDisplay UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "box Logic #Lightblue"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "User -\u003e CommandBox: handleCommandEntered()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CommandBox -\u003e MainWindow: executeCommand(\"add t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "MainWindow -\u003e Logic: execute(\"add t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Logic --\u003e MainWindow: commandResult"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "MainWindow -\u003e ResultDisplay: setFeedbackToUser(commandResult)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate ResultDisplay"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "ResultDisplay --\u003e MainWindow"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate ResultDisplay"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "MainWindow --\u003e CommandBox"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CommandBox -\u003e CommandBox: setText(\"\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CommandBox --\u003e User"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "Cronyxx": 41
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Class BookListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Class BookCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "MainWindow *-down-\u003e BookListPanel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookListPanel -down-\u003e BookCard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookCard --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookCard ..\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 8,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UiUpdateBookListActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "if () then ([command updates Catalog])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    :Observable list notifies UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    :UI updates BookListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 14
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package CommandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command1 as \"__c0:Command__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command2 as \"__c1:Command__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Command1 -[hidden]right-\u003e Command2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "hide Command2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "class Pointer as \"Current Command\" #FFFFF"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Pointer -up-\u003e Command1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 7,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "title After command \"add t/Animal Farm\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package CommandHistory \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command1 as \"__c0:Command__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command2 as \"__c1:Command__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Command1 -[hidden]right-\u003e Command2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "class Pointer as \"Current Command\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Pointer -up-\u003e Command2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 7,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package CommandHistory \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command1 as \"__c0:Command__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command2 as \"__c1:Command__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Command1 -[hidden]right-\u003e Command2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "class Pointer as \"Current Command\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Pointer -up-\u003e Command1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 6,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "title After command \"help\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package CommandHistory \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command1 as \"__c0:Command__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command2 as \"__c1:Command__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Command1 -[hidden]right-\u003e Command2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "class Pointer as \"Current Command\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Pointer -up-\u003e Command1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 7,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package CommandHistory \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command1 as \"__c0:Command__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class Command2 as \"__c2:Command__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Command1 -[hidden]right-\u003e Command2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "class Pointer as \"Current Command\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Pointer -up-\u003e Command2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "note right on link: Command c1 deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 8,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "participant \":CatalogParser\" as CatalogParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "participant \":CommandHistory\" as CommandHistory MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "LogicManager -\u003e CatalogParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate CatalogParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CatalogParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "UndoCommand --\u003e CatalogParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CatalogParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate CatalogParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "UndoCommand -\u003e Model : undoCommand()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Model -\u003e CommandHistory : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CommandHistory --\u003e Model :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 13,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/UseCases.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "skinparam packageStyle rectangle"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "actor Librarian"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "actor System"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "rectangle LiBerry {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Librarian -- (Manage books)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Librarian -- (Manage borrowers)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Librarian -- (Manage loans and returns)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Librarian -- (Set default settings)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    System -- (Calculate fines)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    System -- (Generate loan slips)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 14
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "!define STORAGE_COLOR_T4 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "!define COMMONS_COLOR #888888"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "shiyao821": 3
    }
  },
  {
    "path": "docs/team/HoHolYin.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d Ho Hol Yin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d PROJECT: LiBerry"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d About the Project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "//Change to one line later"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "With a common belief to improve literacy in the world, my team decided to create a library management system called"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u0027LiBerry\u0027 that is free and easy to use. \u0027LiBerry\u0027 is designed for small communities with a lack of expertise and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "resources to manage a library."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "This library management system is able to:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Add books to the library"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Remove books from the library"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Register borrowers"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Mark a book as loaned to a borrower"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Calculate loan periods and fines for any overdue loans"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "This is what the main page of our system looks like:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Graphical user interface for LiBerry"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|_This section shows a summary of my coding, documentation, and other helpful contributions to the team project._"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* *Major enhancement*: The ability to *automatically generate loan slips in pdf* for every loan."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** What it does: Allows the librarian to print the generated loan slip for the borrower."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Justification: Since our target group is small impoverished communities, it is unlikely they will have internet access to check the status of their loans. Therefore, it will be suitable to provide them with a printed version of the loan."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Highlights: This feature is challenging to implement as it will require us to create a new pdf document from scratch. On top of that, this document will have to be suitably styled as a loan slip using information from the loan."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Credits: This feature is made possible with the \u0027iText 7\u0027 library. However, it was still required of me to understand the API well and in depth such that I can apply it appropriately to the context of our project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::LoanSlip.png[width\u003d350, align\u003dcenter]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Implemented the ability to *add books*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Implemented the ability to *delete books*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Implemented the ability to *display information* about a book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** Managed the release of `v1.3` on GitHub. In `v1.3`, we have the following additional features:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "**** Pay fines"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "**** Renew loans"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "**** Generate loan slip"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "**** Edit Borrower details"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "**** Search overdue books and books that are on loan"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** Optimised the generation of a new serial number when a new book is added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "**** Done through Pull Request https://github.com/AY1920S1-CS2103T-F13-1/main/pull/118[#118]. This enhancement allows the system to efficiently locate and allocate the smallest available serial number to the new book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** Made the `Book` Object immutable in preparation for the undo/redo feature in the future"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "**** Done through Pull Request https://github.com/AY1920S1-CS2103T-F13-1/main/pull/147[#147]. This modification allows the system to track the different states of the system throughout its usage. This is required in order to implement the undo/redo function."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** Wrote the https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/docs/DeveloperGuide.adoc#Design-Model[documentation] for the `Model` component of the system."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** Described the https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/docs/DeveloperGuide.adoc#generate-loan-slip-feature[\u0027Generate Loan Slip\u0027] feature and its design considerations."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/49/files/22e0d669e265d0f2835df4e4a2d0f15a57b05795[Reviewed](with non-trivial comments) a Pull Request from another group"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** Contributed to forum discussions as a group (Shared a https://github.com/nus-cs2103-AY1920S1/forum/issues/115[tip] on how to check code coverage when running tests)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/49/files/22e0d669e265d0f2835df4e4a2d0f15a57b05795[Reported] bugs and suggestions for other teams in the class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*** Integrated a third party library (iText 7) to the project in https://github.com/AY1920S1-CS2103T-F13-1/main/pull/150[this] Pull Request"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|_This section outlines my contributions to the team\u0027s User Guide. The following are excerpts from the \u0027LiBerry\u0027 User Guide. These excerpts show the additions I made for the \u0027Add Book\u0027 and \u0027Loan\u0027 feature. In the \u0027Loan\u0027 feature, my contributions include only the loan slip portion._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d Add Book Feature"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Adding a book: `add`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Adds a new book to library records. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Format: `add t/TITLE a/AUTHOR [sn/BOOK_SN] [g/GENRE]`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "A book can have any number of genres (including 0)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "You do not need to specify the serial number if you wish so. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "LiBerry will then auto-generate a valid serial number for the new book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `add t/Harry Botter and the Baby\u0027s Potty a/Raylei Jolking sn/B02010 g/children`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `add t/Inferno a/Tande g/classic g/epic`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d Loan Book Feature"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Loaning book(s): `loan`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Loan book(s) by their serial number +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Format: `loan sn/BOOK_SN...`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `loan sn/B00041` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Loans the book with serial number B00041"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `loan sn/B00201 sn/B02929 sn/B00203` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Loans the books with serial numbers B00201, B02929 and B00203"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Upon loaning a book, a printable loan slip in pdf format will be generated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Printable PDF version of a Loan Slip"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::LoanSlip.png[width\u003d250, align\u003dcenter]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|_This section highlights my contributions to the Developer Guide. The following are excerpts from the \u0027LiBerry\u0027 Developer Guide. These excerpts show the additions I have made for the \u0027Add Book\u0027 and \u0027Generate Loan Slip\u0027 feature._"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddBook]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dprintLoanSlip]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "---"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hoholyin": 135
    }
  },
  {
    "path": "docs/team/WangShiyao.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d Wang Shiyao - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "This is a portfolio page for Wang Shiyao - intended to highlight the contributions that he has made to his CS2103T Software Engineering Project."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d LiBerry"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "In the spirit of spreading education, literacy and a sense of community to the world (and completing our software engineering project), my team has developed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Liberry - a desktop software for managing community and private libraries. The target users are mainly librarians in under-developed communities who cannot afford"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "commercial versions of such software."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "LiBerry can execute the basic functions of library management:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Addition and deletion of books in the catalog"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Registering Borrowers and editing their particulars"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Loan, return, renew and pay fine functions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Searching through books in the catalog by filters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "As part of the requirements of the project, we were given the source code for a common AddressBook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "application and were tasked to morph it to something else that is useful."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "We were also limited to designing software that takes in the majority of user input through a Command Line Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "(CLI), though displays information through a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "This is what the GUI looks like:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".Graphical User Interface (GUI) for *LiBerry*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "My role was to:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ". configure the basic AddressBook software to accommodate Json-type storage for a catalog, a record of borrowers,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "and a record of loans."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ". design the *Find Command* to execute given a set of parameters - such as searching by title, genre, loan status etc."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "*Major enhancement*: +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "added `find` command - giving the ability to *filter the catalog by various parameters*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *What it does:*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "... Searches books in catalog through filtering by:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".... title"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".... author"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".... serial number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".... genres"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".... loan status (available / loaned / overdue)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "... sets the number of books to display in the search results"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Justification:* +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "This feature is very powerful as it helps the user search through the entire catalog quickly according to the query\u0027s requirements."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "For example, a user may want to find if a certain book of a certain title is in the catalog, but only remembers the word \u0027Harry\u0027 from the title."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "This command will show all books in the catalog with the word \u0027Harry\u0027 in it. Another possible use case would be if a borrower, say, a parent,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "wanted to check if there were available \u0027children\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "books. A `find 10 g/children -available` command will suffice in bringing out the first 10 books that were available for borrowing belonging"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "to the genre \u0027children\u0027."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Highlights:* +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "This enhancement was decently demanding as it required a way to test every book on whether it met the query requirements."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "It showcases my ability to play with functional programming and Streams in Java."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "As the predicate used has multiple possible combinations, extensive tests were written to ensure that it worked the way it should."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "*Minor enhancement*: +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Made all search parameters (with the exception of book serial number) case insensitive"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Justification:* +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "This feature allows users to be"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "*Code contributed*: +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/src/main/java/seedu/address/logic/parser/FindCommandParser.java[FindCommandParser Class]] +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/src/main/java/seedu/address/model/book/BookPredicate.java[BookPredicate Class]] +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/src/main/java/seedu/address/logic/parser/Flag.java[Flag Class]] +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/src/test/java/seedu/address/model/book/BookPredicateTest.java[BookPredicate Tests]] +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/src/test/java/seedu/address/storage/StorageManagerTest.java[Storage Manager Tests]] +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/src/test/java/seedu/address/logic/commands/FindCommandTest.java[FindCommand Tests]] +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[https://github.com/AY1920S1-CS2103T-F13-1/main/blob/master/src/test/java/seedu/address/logic/parser/FindCommandParserTest.java[FindCommandParser Tests]] +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "and other minor contributions"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "*Other contributions*:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "// TODO update this"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Enhancements to existing features:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "|_Given below are sections I have contributed to in the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "include::../UserGuide.adoc[tag\u003dUGshiyao3]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "include::../UserGuide.adoc[tag\u003dUGshiyao1]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "*Purpose of Command*: +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "This command allows users to search through the entire catalog."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "include::../UserGuide.adoc[tag\u003dUGshiyao2]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "|_Given below are sections I have contributed to in the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Book Finding is the main feature that I have implemented in LiBerry. The following is an extract from the Developer Guide"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "---"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbookFinding]"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 121
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d INSERT NAME - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d PROJECT: LiBerry"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Liberry is a desktop app for community and private library librarians to manage their inventory and loans. It is a software optimized for librarians who prefer to work with a Command Line Interface (CLI), and has a GUI created with JavaFX. The software is written in Java, and has about 10k Lines of Code."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "shiyao821": 7
    }
  },
  {
    "path": "docs/team/seeziyang.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d See Zi Yang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d PROJECT: LiBerry"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "LiBerry is a desktop library management application for librarians to manage their books, borrowers and loans."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "It is a software optimized for librarians who prefer to work with a Command Line Interface (CLI), whereby commands are typed into the software. +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Main features of LiBerry:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Add and remove books"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Comprehensive search system to look for books"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Register new borrowers"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Manage loaning and returning of books"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Track overdue fines payment"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "My role was to design and implement the code for the loan related features. The following sections further elaborates on these"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "enhancements I have made. Also included are the details of the relevant documentation I have written in the user and developer guide to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "assist users and other developers to understand these features."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "This section summarizes the contributions I have made to the team project, including contributions to the code base, documentation and project management."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Main enhancement - Loan-related features"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "I have added features related to the loaning and returning of books in our library management app, LiBerry."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d What it does"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "This set of features allow our users, librarians, to *loan* out books to borrowers, *return* loaned out books, *renew* loaned"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "out books, and to record payments of *fines* incurred for overdue books."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Every time a book is borrowed, both the starting date and due date of the loan are automatically recorded. For each loaned"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "out book, other than the details of the book and the borrower, the starting date, due date, and returning date,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "along with the number of times it has been renewed and the fine incurred after returning are all meticulously tracked."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The intuitive syntax for the commands related to these features also enables librarians to quickly serve a borrower."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "As the main purpose of a library is to allow visitors to borrow books, these features are core to a library and are"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "needed for a library to function."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Highlights"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "The implementation of these features was challenging as a whole new set of code had to be written to model each loan occurrence"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "and to store these information. The book, borrower and the loan object had to be linked efficiently to reduce duplicated information stored."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Moreover, a great deal of defensive programming was applied as there were many bounds to each of these features. For"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "example, these features should only work when certain conditions are met, such as when the user is currently serving borrowers"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "and the inputs correspond to a book that is not on loan."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Additionally, I also created utility classes like `DateUtil` and `FineUtil` to centralize utility functions that dealt with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "dates and fines respectively."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Code contributed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Project management"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Managed the issues covered for each milestone and set up their deadlines. Also added each feature as an issue and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "assigned them to the appropriate team member."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** The issues and milestones can be seen https://github.com/AY1920S1-CS2103T-F13-1/main/issues[here]."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Set up two Github project boards."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** The project board used to brainstorm and prioritise user stories can be seen https://github.com/AY1920S1-CS2103T-F13-1/main/projects/2[here]."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** The project board used to keep track of the features and commands can be seen https://github.com/AY1920S1-CS2103T-F13-1/main/projects/3[here]."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Updated developer guide to include user stories, use cases and non-functional requirements. Done through pull requests:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** https://github.com/AY1920S1-CS2103T-F13-1/main/pull/81[#81] - Included user stories and non-functional requirements specific to LiBerry."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** https://github.com/AY1920S1-CS2103T-F13-1/main/pull/157[#157] - Updated non-functional requirements and use cases and added a general use case diagram."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Maintained the team project website, including the site headers, navigation bar, badges and photos. Done through pull requests:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** https://github.com/AY1920S1-CS2103T-F13-1/main/pull/86[#86] - Updated Travis badges."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** https://github.com/AY1920S1-CS2103T-F13-1/main/pull/97[#97] - Updated header, README, contact us, developer photos, role and responsibilities."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** https://github.com/AY1920S1-CS2103T-F13-1/main/pull/100[#100] - Fixed user interface image not appearing on the website."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Reviewed pull requests by team members, e.g. ..........."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Enhancements to existing features"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Enhanced code for `Borrower` class to be immutable. Done through pull request:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** https://github.com/AY1920S1-CS2103T-F13-1/main/pull/152[#152] - Modified fields in Borrower to be immutable and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "added methods in the class to return new copies instead of mutating values in the current object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Upgraded the `set` command to support setting the maximum renew count such that librarians can define what is the maximum number of times"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "a book can be renewed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Done through pull request:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** https://github.com/AY1920S1-CS2103T-F13-1/main/pull/178[#178] - Modified the `set` command to take in maximum renew"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "count and integrated this setting to the model component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Updated the user interface to reflect more borrower-related details. Done through pull request:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "**** https://github.com/AY1920S1-CS2103T-F13-1/main/pull/179[#179] - Updated panel dimensions to fit more results and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "added more borrower-related information such as total outstanding fine."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Documentation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Improved and rectified the flow, content, styling, legend and diagrams of the user guide and developer guide"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "according to feedback received from tutor and peers."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Done through pull requests: https://github.com/AY1920S1-CS2103T-F13-1/main/pull/157[#157], https://github.com/AY1920S1-CS2103T-F13-1/main/pull/163[#163],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-1/main/pull/179[#179], https://github.com/AY1920S1-CS2103T-F13-1/main/pull/182[#182]."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Community"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Gave in-depth and insightful review of team member\u0027s pull requests. Examples includes: ........"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Reported bugs in the team project to team members in the group chat."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Tools"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Integrated a new Github plugin, Coveralls, to the team repository. Coveralls was immensely helpful in tracking the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "test coverage of our team\u0027s code."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*** Set up Netlify for the team repository to easily and quickly preview changes made to the team website and documentation."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquickStart]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dloanRelated]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbookLoaningFeatures]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seeziyang": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.BorrowerRecordsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.JsonBorrowerRecordsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.CatalogStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.JsonCatalogStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.JsonLoanRecordsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.LoanRecordsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing LiBerry ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecordsStorage loanRecordsStorage \u003d new JsonLoanRecordsStorage(userPrefs.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CatalogStorage catalogStorage \u003d new JsonCatalogStorage(userPrefs.getCatalogFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecordsStorage borrowerRecordsStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonBorrowerRecordsStorage(userPrefs.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                loanRecordsStorage, catalogStorage, borrowerRecordsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s catalog, borrower records, loan records"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *     TODO edit this"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * The data from the sample catalog will be used instead if {@code storage}\u0027s catalog is not found,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * or an empty catalog will be used instead if errors occur when reading {@code storage}\u0027s catalog."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cReadOnlyLoanRecords\u003e loanRecordsOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ReadOnlyLoanRecords initialLoanRecords;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Optional\u003cReadOnlyCatalog\u003e catalogOptional;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ReadOnlyCatalog initialCatalog;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cReadOnlyBorrowerRecords\u003e borrowerRecordsOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ReadOnlyBorrowerRecords initialBorrowerRecords;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            loanRecordsOptional \u003d storage.readLoanRecords();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (!loanRecordsOptional.isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample LoanRecord\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialLoanRecords \u003d loanRecordsOptional.orElseGet(SampleDataUtil::getSampleLoanRecords);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty LoanRecord\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialLoanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty LoanRecord\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialLoanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            catalogOptional \u003d storage.readCatalog(initialLoanRecords);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (!catalogOptional.isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Catalog\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialCatalog \u003d catalogOptional.orElseGet(SampleDataUtil::getSampleCatalog);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Catalog\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialCatalog \u003d new Catalog();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Catalog\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialCatalog \u003d new Catalog();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            borrowerRecordsOptional \u003d storage.readBorrowerRecords(initialLoanRecords);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (!borrowerRecordsOptional.isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BorrowerRecords\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialBorrowerRecords \u003d borrowerRecordsOptional.orElseGet(SampleDataUtil::getSampleBorrowerRecords);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BorrowerRecords\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialBorrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BorrowerRecords\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialBorrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new ModelManager(initialCatalog, initialLoanRecords, initialBorrowerRecords, userPrefs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        logger.info(\"Starting LiBerry \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping LiBerry ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "seeziyang": 12,
      "-": 166,
      "shiyao821": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean isDefault;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        isDefault \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        isDefault \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isDefault() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return isDefault;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 9,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // Command messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_LOAN_STATE_CONSTRAINTS \u003d \"Only 1 of -available / -loaned / -overdue flags can \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"be used at any time\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAY_LIMIT \u003d \"Display limit must be a positive integer!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_BOOK_TITLE_TOO_LONG \u003d \"Title of book should not be more than 30 characters!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_AUTHOR_NAME_TOO_LONG \u003d \"Name of author should not be more than 30 characters!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_UNUSED_ARGUMENT \u003d \"\\n\\\u0027%1$s\\\u0027 is ignored as \\\u0027%2$s\\\u0027\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \" does not accept arguments\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // Book messages"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"Serial number provided is already in use!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_BOOKS_LISTED_OVERVIEW \u003d \"%1$d books listed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_BOOK \u003d \"No such book!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // Serial Number messages"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_INVALID_SERIAL_NUMBER \u003d \"Invalid Serial Number! \\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // Borrower messages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BORROWER \u003d \"Phone/Email is already in used! \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_BORROWER_ID \u003d \"No such borrower ID!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_NOT_IN_SERVE_MODE \u003d \"Not in Serve mode! Enter Serve mode to use this command!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // Loan messages"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_BOOK_ON_LOAN \u003d \"%1$s is already on loan!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_BOOK_NOT_ON_LOAN \u003d \"%1$s is not on loan!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_LOAN_ID_DOES_NOT_EXISTS \u003d \"LoanId %s does not exists in LoanRecords!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_NOT_LOANED_BY_BORROWER \u003d \"%1$s\\ndoes not loan\\n%2$s!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_BOOK_CANNOT_BE_RENEWED_ANYMORE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            \"%1$s has already been renewed the maximum number of times!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_BOOK_IS_OVERDUE \u003d \"%1$s is already overdue and cannot be renewed!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // Fine messages"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_NO_OUTSTANDING_FINE \u003d \"No outstanding fines!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    // Undo/Redo messages"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_CANNOT_UNDO_COMMAND \u003d \"There are no commands to undo!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_CANNOT_REDO_COMMAND \u003d \"There are no commands to redo!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "hoholyin": 16,
      "seeziyang": 11,
      "Cronyxx": 4,
      "-": 12,
      "shiyao821": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/UserSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A Serializable class that contains the User settings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UserSettings implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final int DEFAULT_LOAN_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final int DEFAULT_RENEW_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final int DEFAULT_FINE_INCREMENT \u003d 10; // Fine increment in cents."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final int DEFAULT_MAX_RENEWS \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final int loanPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final int renewPeriod;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final int fineIncrement; // Fine increment in cents."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final int maxRenews;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Instantiates a UserSettings that contains the default loanPeriod, renewPeriod and fineIncrement."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        loanPeriod \u003d DEFAULT_LOAN_PERIOD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        renewPeriod \u003d DEFAULT_RENEW_PERIOD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        fineIncrement \u003d DEFAULT_FINE_INCREMENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        maxRenews \u003d DEFAULT_MAX_RENEWS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Instantiates a UserSettings that contains the specified loanPeriod, renewPeriod and fineIncrement."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanPeriod Number of days that a book can be loaned."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param renewPeriod Number of additional days given when loan is renewed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param fineIncrement Fine that is added each day for an overdue book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param maxRenews Number of times a book can be renewed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public UserSettings(int loanPeriod, int renewPeriod, int fineIncrement, int maxRenews) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanPeriod \u003d loanPeriod;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.renewPeriod \u003d renewPeriod;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.fineIncrement \u003d fineIncrement;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.maxRenews \u003d maxRenews;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getLoanPeriod() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return loanPeriod;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getRenewPeriod() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return renewPeriod;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getFineIncrement() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return fineIncrement;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getMaxRenews() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return maxRenews;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(other instanceof UserSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings o \u003d (UserSettings) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return getLoanPeriod() \u003d\u003d o.getLoanPeriod()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 getRenewPeriod() \u003d\u003d o.getRenewPeriod()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 getFineIncrement() \u003d\u003d o.getFineIncrement()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 getMaxRenews() \u003d\u003d o.getMaxRenews();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return Objects.hash(loanPeriod, renewPeriod, fineIncrement, maxRenews);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        sb.append(\"Loan period : \" + loanPeriod + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        sb.append(\"Renew period : \" + renewPeriod + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        sb.append(\"Fine increment : \" + fineIncrement + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        sb.append(\"Maximum renew count : \" + maxRenews);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 75,
      "seeziyang": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/LoanSlipException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Exception thrown when an error is encountered while generating a loan slip."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class LoanSlipException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public LoanSlipException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Helper functions for handling LocalDates."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Get current system date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return the current date from the system clock in the default time-zone."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LocalDate getTodayDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Get the date that is number of days after starting date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * {@code days} must be non-negative."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param startDate Starting date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param days Number of days from starting date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Date that is number of days after starting date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LocalDate extendDate(LocalDate startDate, int days) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert days \u003e\u003d 0 : \"days must be positive\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return startDate.plusDays(days);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Get the date that is number of days before starting date. For tests and simulation purposes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param days Number of days from starting date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Date that is number of days before starting date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static LocalDate getTodayMinusDays(int days) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return getTodayDate().minusDays(days);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Get the date that is number of days after today."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * {@code days} must be non-negative."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param days Number of days from today."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Date that is number of days after today."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LocalDate getTodayPlusDays(int days) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert days \u003e\u003d 0 : \"days must be positive\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return extendDate(getTodayDate(), days);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Get the number of days between startDate and endDate."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * {@code endDate} must be later than {@code startDate}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param startDate Starting date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param endDate Ending date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Number of days between the two dates."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static int getNumOfDaysBetween(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert endDate.isAfter(startDate) : \"endDate should be later than startDate\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return (int) startDate.until(endDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Get the number of days overdue."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param dueDate Due date of the book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param returnDate Date book is returned."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return 0 if book is not overdue, else the number of days overdue."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static int getNumOfDaysOverdue(LocalDate dueDate, LocalDate returnDate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireAllNonNull(dueDate, returnDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!returnDate.isAfter(dueDate)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return getNumOfDaysBetween(dueDate, returnDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if given date is before today\u0027s date."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param date Given date to be checked."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if given date is before today\u0027s date."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static boolean isDateBeforeToday(LocalDate date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return date.isBefore(getTodayDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Formats the date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param date date to be formatted."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return a formatted date as a {@code String}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static String formatDate(LocalDate date) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return date.format(formatter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 21,
      "seeziyang": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FineUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Helper functions for handling fines."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class FineUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Get the String representation of the fine amount."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param cents Fine amount in cents."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A string representing the fine amount in dollars."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static String centsToDollarString(int cents) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        double dollarAmt \u003d cents / 100.0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return \"$\" + String.format(\"%.2f\", dollarAmt);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts a double with at most 2 decimal places to an int representing the number of cents."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param dollars Amount in dollars."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Amount in cents."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static int dollarsToCents(double dollars) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return (int) (dollars * 100.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/LoanSlipDocument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.io.font.PdfEncodings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.io.image.ImageData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.io.image.ImageDataFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.kernel.font.PdfFont;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.kernel.font.PdfFontFactory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.borders.Border;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Cell;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Image;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Paragraph;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.property.HorizontalAlignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.property.TextAlignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Instance class to handle a single pdf document."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class LoanSlipDocument {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int HEADER_FONT_SIZE \u003d 32;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int MID_HEADER_FONT_SIZE \u003d 28;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int PARAGRAPH_FONT_SIZE \u003d 20;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final double SCALE_RATIO \u003d 0.1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String FONT \u003d \"/font/Lato-Black.ttf\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String LOGO_PATH \u003d \"/images/LiBerryLogo.png\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String LINE_DIVIDER \u003d \"_______________________________________________________\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Document doc;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Table table;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructor for LoanSlipDocument object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc iText Document to be wrapped."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public LoanSlipDocument(Document doc, Table table) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.doc \u003d doc;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.table \u003d table;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Appends the logo to the pdf document."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeLogo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Image pdfImg \u003d createImage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            double newWidth \u003d pdfImg.getImageWidth() * SCALE_RATIO;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            double newHeight \u003d pdfImg.getImageHeight() * SCALE_RATIO;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            pdfImg.scaleToFit((float) newWidth, (float) newHeight);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            pdfImg.setHorizontalAlignment(HorizontalAlignment.LEFT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            doc.add(pdfImg);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            logger.info(\"end writing logo\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes the divider line for the loan slip."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeLine() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocAlignLeft(LINE_DIVIDER, PARAGRAPH_FONT_SIZE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes the header of the document."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text content of header."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeHeader(String text) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocAlignLeft(text, HEADER_FONT_SIZE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes the mid header of the document."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text content of header."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeMidHeader(String text) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocAlignLeft(text, MID_HEADER_FONT_SIZE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes a paragraph of the document, aligned to left."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text content of header."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeLeftParagraph(String text) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocAlignLeft(text, PARAGRAPH_FONT_SIZE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes a paragraph of the document, centralised."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text content of header."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeCentralisedParagraph(String text) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocCentralised(text, PARAGRAPH_FONT_SIZE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a cell to the table."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text text to be added to the cell."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addCell(String text) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Cell cell \u003d new Cell();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        cell.setBorder(Border.NO_BORDER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        cell.add(customLeftParagraph(text, 18));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        table.addCell(cell);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes a row to the table."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param elements row of elements."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeRow(String[] elements) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        int noOfCols \u003d table.getNumberOfColumns();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (elements.length \u003d\u003d noOfCols) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Arrays.stream(elements).forEach(e -\u003e addCell(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds the table to the document in preparation for generation of pdf."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void submitTable() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.add(table);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Closes the document."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void closeDoc() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.close();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to allow writing to document with custom font size."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text to be written."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param fontSize font size of the text."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void writeToDocAlignLeft(String text, int fontSize) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Paragraph p \u003d customLeftParagraph(text, fontSize);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.add(p);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void writeToDocCentralised(String text, int fontSize) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Paragraph p \u003d alignParagraph(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        p.add(text).setFontSize(fontSize);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.add(p);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to write a paragraph to the document."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Allows customization of text and font size."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text text to be added to the paragraph."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param fontSize font size of text."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return {@code Paragraph} object to be added to document."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Paragraph customLeftParagraph(String text, int fontSize) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Paragraph p \u003d alignParagraph(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        p.add(text).setFontSize(fontSize);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates a paragraph with the given alignment."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param textAlignment Alignment of the paragraph to be created."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a {@code Paragraph} Object with the custom alignment specified."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Paragraph alignParagraph(TextAlignment textAlignment) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Paragraph p \u003d new Paragraph();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            PdfFont font \u003d PdfFontFactory.createFont("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    getClass().getResource(FONT).toString(), PdfEncodings.WINANSI, true);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            p.setFont(font);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            logger.info(\"font error\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            // error occur while loading font, use default font"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        p.setTextAlignment(textAlignment);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates an image to be appended to the document."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an {@code Image} Object."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Image createImage() throws IOException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        URL url \u003d getClass().getResource(LOGO_PATH);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InputStream is \u003d url.openStream();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        java.awt.Image image \u003d ImageIO.read(is);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ImageData imageData \u003d ImageDataFactory.create(image, Color.WHITE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Image(imageData);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 223
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/LoanSlipUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.kernel.pdf.PdfDocument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.kernel.pdf.PdfWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Loan slip util class to generate a Loan Slip to pdf using iText7."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class LoanSlipUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String PDF_EXTENSION \u003d \".pdf\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String BYE_MESSAGE \u003d \"We hope to see you again!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String DEST \u003d \"./data/loan_slips/\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final float FIRST_ROW_WIDTH \u003d 75F;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final float SECOND_ROW_WIDTH \u003d 325F;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final float THIRD_ROW_WIDTH \u003d 125F;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int FIRST_INDEX \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static ArrayList\u003cLoan\u003e currentLoans;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static ArrayList\u003cBook\u003e currentBooks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static Borrower currentBorrower;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static File currentFile;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static boolean isMounted \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Mounts a Loan slip in preparation for creating a pdf version of it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param loan Loan to be represented in the loan slip."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param book Book associated to current loan."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param borrower Borrower associated to current loan."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void mountLoan(Loan loan, Book book, Borrower borrower) throws LoanSlipException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!loan.getBorrowerId().equals(borrower.getBorrowerId())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"Borrower and Loan do not match!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!loan.getBookSerialNumber().equals(book.getSerialNumber())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"Book and Loan do not match!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isMounted) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentLoans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentBooks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentLoans.add(loan);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBooks.add(book);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (currentBorrower !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            assert currentBorrower.equals(borrower) : \"Wrong borrower\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentBorrower \u003d borrower;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        isMounted \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        isGenerated \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Unmounts a Loan slip after creating a pdf of it."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void unmountLoans() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (isMounted) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentLoans \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentBooks \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentBorrower \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentFile \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            isMounted \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            isGenerated \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Unmounts a specific loan from the loan slip"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param loan loan to be unmounted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param book Book associated with this loan."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void unmountSpecificLoan(Loan loan, Book book) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (isMounted \u0026\u0026 currentLoans.contains(loan) \u0026\u0026 currentBooks.contains(book)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentLoans.remove(loan);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentBooks.remove(book);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (isMounted \u0026\u0026 currentBooks.isEmpty() \u0026\u0026 currentLoans.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            unmountLoans();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates a pdf version of the loan slip that is currently mounted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws LoanSlipException if there is an error reading/writing to the pdf file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void createLoanSlipInDirectory() throws LoanSlipException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert isMounted : \"No loan slip mounted\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(currentLoans);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(currentBooks);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(currentBorrower);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Document document \u003d createDocument(createFileNameFromLoan());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            float [] pointColumnWidths \u003d {FIRST_ROW_WIDTH, SECOND_ROW_WIDTH, THIRD_ROW_WIDTH};"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Table table \u003d new Table(pointColumnWidths);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            LoanSlipDocument doc \u003d new LoanSlipDocument(document, table);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            logger.info(\"genrating liberry loan slip...\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            generateLiberryLoanSlip(doc);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            logger.info(\"generated liberry loan slip...\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to assist in generating a file name based on the first loan of the entire loan slip."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a String representation of the file name generated."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static String createFileNameFromLoan() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert isMounted : \"No loans mounted\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert !currentLoans.isEmpty() : \"No loans in list\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan firstLoan \u003d currentLoans.get(FIRST_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return firstLoan.getLoanId().toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates a {@code File} object to be populated with information."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param docName name of the new file object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a {@code Document} object representing the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws IOException if there are errors in creating the new file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static Document createDocument(String docName) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert isMounted : \"No loan slip mounted\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String finalDest \u003d DEST + docName + PDF_EXTENSION;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        File file \u003d new File(finalDest);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        PdfWriter writer \u003d new PdfWriter(finalDest);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Initialize PDF document"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        PdfDocument pdf \u003d new PdfDocument(writer);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Initialize document"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentFile \u003d file;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Document(pdf);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Populates the pdf file with information, creating the loan slip."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc {@code LoanSlipDocument} object to be populated with data."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static void generateLiberryLoanSlip(LoanSlipDocument doc) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert isMounted : \"No loan slip mounted\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeLogoToDoc(doc);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeHeaderToDoc(doc);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        populateTableInDoc(doc);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        addTableToDocument(doc);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.closeDoc();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        isGenerated \u003d true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to write the logo section of the document."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc {@code LoanSlipDocument} to be written to."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static void writeLogoToDoc(LoanSlipDocument doc) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLogo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLine();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to write the header section of the document."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc {@code LoanSlipDocument} to be written to."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static void writeHeaderToDoc(LoanSlipDocument doc) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeHeader(currentBorrower.getName().toString());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLeftParagraph(currentBorrower.getBorrowerId().toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLine();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeMidHeader(\"Books borrowed\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to populate the table of the document."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc {@code LoanSlipDocument} to be written to."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static void populateTableInDoc(LoanSlipDocument doc) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String[] headerRow \u003d new String[]{\"S/N\", \"Book\", \"Due By\"};"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeRow(headerRow);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        int numberOfBooks \u003d currentBooks.size();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        int numberOfLoans \u003d currentLoans.size();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert numberOfBooks \u003d\u003d numberOfLoans : \"Number of books and loans are not consistent\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        populateTableWithAllBooks(numberOfBooks, doc);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to populate the table with all books being loaned out."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param noOfBooks number of books loaned out."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc {@code LoanSlipDocument} to be written to."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static void populateTableWithAllBooks(int noOfBooks, LoanSlipDocument doc) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        IntStream.range(0, noOfBooks)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .forEach(index -\u003e doc.writeRow(createBookRow(index)));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to add the table to the document."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc {@code LoanSlipDocument} to be written to."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static void addTableToDocument(LoanSlipDocument doc) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.submitTable();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLine();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeCentralisedParagraph(BYE_MESSAGE);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates an array using the details from the mounted loan slip."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an array of string representing a row of the table."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static String[] createBookRow(int index) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert isMounted : \"No loan slip mounted\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String[] currentBookDetails \u003d new String[3];"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book currentBook \u003d currentBooks.get(index);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan currentLoan \u003d currentLoans.get(index);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBookDetails[0] \u003d currentBook.getSerialNumber().toString();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBookDetails[1] \u003d currentBook.getTitle().toString();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBookDetails[2] \u003d DateUtil.formatDate(currentLoan.getDueDate());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return currentBookDetails;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a loan slip is currently mounted."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if a loan slip is currently mounted."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static boolean isMounted() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return isMounted;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Opens loan slip pdf to allow ease of printing loan slip."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * (Cannot be tested autonomously)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void openGeneratedLoanSlip() throws LoanSlipException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isMounted || !isGenerated) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"Loan slip is not generated\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Desktop.getDesktop().open(currentFile);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"Error in opening loan slip\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 275
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns true if any part of the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *   Ignores case, and can match any part of the word is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //not a full word match"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static boolean containsPartialWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .anyMatch(wordInPreppedSentence -\u003e wordInPreppedSentence.contains(preppedWord));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if {@code s} represents a non-zero dollar amount with at most 2 decimal places,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * e.g. 12.20, 5, 0.01."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Will return false for any other non-null String input, e.g., \"-2.00\", \"0\"."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static boolean isValidDollarAmount(String s) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String[] dollarsAndCents \u003d s.split(\"\\\\.\"); // split by the dot \u0027.\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (dollarsAndCents.length \u003e 1 \u0026\u0026 dollarsAndCents[1].length() \u003e 2) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            double value \u003d Double.parseDouble(s);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            if (value * 100.0 \u003e (double) Integer.MAX_VALUE) { // value in cents is greater than max int value"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Double.parseDouble(String)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 26,
      "-": 69,
      "shiyao821": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns the Catalog."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @see seedu.address.model.Model#getCatalog()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ReadOnlyCatalog getCatalog();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of books */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /** Returns true if model within Logic component is in Serve Mode */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    boolean isServeMode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /** Returns the borrower being served in Serve Mode, or null if in Normal Mode */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Borrower getServingBorrower();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /** Returns the list of books borrowed by the borrower being served */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getServingBorrowerBookList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns the user prefs\u0027 catalog file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Path getCatalogFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 18,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.LoanSlipUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.ReversibleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.parser.CatalogParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final CatalogParser catalogParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalogParser \u003d new CatalogParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Command command \u003d catalogParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (command instanceof ReversibleCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            model.commitCommand((ReversibleCommand) command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            storage.saveLoanRecords(model.getLoanRecords());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            storage.saveCatalog(model.getCatalog());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            storage.saveBorrowerRecords(model.getBorrowerRecords());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (commandResult.isDone()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                if (LoanSlipUtil.isMounted()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    logger.info(\"making new loan slip\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    storage.storeNewLoanSlip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    LoanSlipUtil.openGeneratedLoanSlip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            logger.info(\"IOException\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (LoanSlipException lse) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            logger.info(\"Error in generating loan slip\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Borrower getServingBorrower() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert (isServeMode()) : \"Not in serve mode\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getServingBorrower();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getServingBorrowerBookList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return FXCollections.observableList(model.getBorrowerBooks());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isServeMode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.isServeMode();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ReadOnlyCatalog getCatalog() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getCatalog();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getFilteredBookList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getCatalogFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 43,
      "Cronyxx": 5,
      "-": 66,
      "shiyao821": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class AddCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the catalog. \\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + PREFIX_AUTHOR + \"AUTHOR  \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"[ \" + PREFIX_SERIAL_NUMBER + \"SERIAL_NUMBER] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"[\" + PREFIX_GENRE + \"GENRE]...\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_TITLE + \"Harry Potter \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \"B0001 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + PREFIX_AUTHOR + \"J K Rowling \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_GENRE + \"Fiction \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_GENRE + \"Action \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Book toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Book}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param book to be added into the catalog."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public AddCommand(Book book) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        toAdd \u003d book;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (model.hasBook(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            // to handle books with same serial number here next time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new DeleteBySerialNumberCommand(toAdd.getSerialNumber());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 23,
      "Cronyxx": 12,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNUSED_ARGUMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Displays all books - clears the search filter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Resets filtered book list. \\n\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Catalog results have been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String unusedArguments \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ClearCommand() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ClearCommand(String unusedArguments) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!unusedArguments.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            this.unusedArguments \u003d unusedArguments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        model.resetFilteredBookList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (unusedArguments !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + MESSAGE_UNUSED_ARGUMENT, unusedArguments, COMMAND_WORD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 2,
      "seeziyang": 1,
      "-": 19,
      "shiyao821": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final boolean serve;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final boolean done;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean serve, boolean done) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.serve \u003d serve;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isServe() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return serve;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 serve \u003d\u003d otherCommandResult.serve"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 done \u003d\u003d otherCommandResult.done;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, serve, done);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 20,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteByIndexCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Deletes a book identified using it\u0027s displayed index from the catalog."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class DeleteByIndexCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public DeleteByIndexCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // delete by index in list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (bookToDelete.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            // mark book as returned"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            super.markBookAsReturned(model, bookToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new AddCommand(bookToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d new DeleteBySerialNumberCommand(bookToDelete.getSerialNumber());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof DeleteByIndexCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteByIndexCommand) other).targetIndex)); //state"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 43,
      "Cronyxx": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBySerialNumberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Deletes a book identified using it\u0027s serial number from the catalog."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class DeleteBySerialNumberCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \": Deletes the book identified by its serial number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final SerialNumber targetSerialNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public DeleteBySerialNumberCommand(SerialNumber targetSerialNumber) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.targetSerialNumber \u003d targetSerialNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // delete by serial number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!modelContainsBook(model, targetSerialNumber)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SUCH_BOOK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d retrieveBookFromCatalog(model, targetSerialNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (bookToDelete.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            // mark book as returned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            super.markBookAsReturned(model, bookToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new AddCommand(bookToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a model contains a target book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param model Model to check."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param serialNumber Serial number of target book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if target book is found in model."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean modelContainsBook(Model model, SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getCatalog()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .getBookList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.getSerialNumber().equals(serialNumber))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .count() \u003d\u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns Book from Catalog under the model."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param model Model to retrieve Book from."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param serialNumber Serial number of target book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Book object, the target book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Book retrieveBookFromCatalog(Model model, SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return (Book) model.getCatalog()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .getBookList()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.getSerialNumber().equals(serialNumber))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .toArray()[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof DeleteBySerialNumberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 targetSerialNumber.equals(((DeleteBySerialNumberCommand) other).targetSerialNumber)); // state"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 78,
      "Cronyxx": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Abstract parent class for DeleteBySerialNumberCommand and DeleteByIndexCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public abstract class DeleteCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \": Deletes the book identified by the \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"or \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"SERIAL_NUMBER (must be valid serial number)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 or \" + COMMAND_WORD + \" sn/B00001\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int FINE_AMOUNT_ZERO \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /** Helper method to assist in marking a book as returned before deletion */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    protected void markBookAsReturned(Model model, Book target) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan loanToBeReturned \u003d target.getLoan().get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LocalDate returnDate \u003d DateUtil.getTodayDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan returnedLoan \u003d loanToBeReturned.returnLoan(returnDate, FINE_AMOUNT_ZERO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book returnedBook \u003d target.returnBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // update Book in model to have Loan removed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.setBook(target, returnedBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // remove Loan from Borrower\u0027s currentLoanList and move to Borrower\u0027s returnedLoanList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.servingBorrowerReturnLoan(loanToBeReturned, returnedLoan);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // update Loan in LoanRecords with returnDate and remainingFineAmount"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.updateLoan(loanToBeReturned, returnedLoan);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 23,
      "Cronyxx": 6,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNUSED_ARGUMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Exits the serve mode."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class DoneCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns to List Mode. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exited from Serve Mode. \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String unusedArguments \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public DoneCommand() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public DoneCommand(String unusedArguments) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!unusedArguments.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            this.unusedArguments \u003d unusedArguments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new ServeCommand(model.getServingBorrower().getBorrowerId());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (unusedArguments !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    + MESSAGE_UNUSED_ARGUMENT, unusedArguments, COMMAND_WORD),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    false, false, false, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            commandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.exitsServeMode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return (other \u003d\u003d this || other instanceof DoneCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 32,
      "Cronyxx": 14,
      "shiyao821": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditBorrowerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BORROWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Edits the details of an existing Borrower in the borrower record."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class EditBorrowerCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the serving borrower. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_EDIT_BORROWER_SUCCESS \u003d \"Edited Borrower: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final EditBorrowerDescriptor editBorrowerDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param editBorrowerDescriptor details to edit the borrower with"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerCommand(EditBorrowerDescriptor editBorrowerDescriptor) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(editBorrowerDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.editBorrowerDescriptor \u003d new EditBorrowerDescriptor(editBorrowerDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrowerToEdit \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower editedBorrower \u003d createEditedBorrower(borrowerToEdit, editBorrowerDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (model.hasDuplicatedBorrower(editedBorrower)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BORROWER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        model.setBorrower(borrowerToEdit, editedBorrower);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(editedBorrower);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new EditBorrowerCommand(getBorrowerDescriptor(borrowerToEdit));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_EDIT_BORROWER_SUCCESS, editedBorrower.toFullString()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns a {@code EditBorrowerDescriptor} from {@code Borrower}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private EditBorrowerDescriptor getBorrowerDescriptor(Borrower borrower) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        EditBorrowerDescriptor borrowerDescriptor \u003d new EditBorrowerDescriptor();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        borrowerDescriptor.setId(borrower.getBorrowerId());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        borrowerDescriptor.setName(borrower.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        borrowerDescriptor.setEmail(borrower.getEmail());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        borrowerDescriptor.setPhone(borrower.getPhone());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return borrowerDescriptor;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Creates and returns a {@code Borrower} with the details of {@code borrowerToEdit}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * edited with {@code editBorrowerDescriptor}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static Borrower createEditedBorrower(Borrower borrowerToEdit,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                                                 EditBorrowerDescriptor editBorrowerDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(borrowerToEdit);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Name updatedName \u003d editBorrowerDescriptor.getName().orElse(borrowerToEdit.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Phone updatedPhone \u003d editBorrowerDescriptor.getPhone().orElse(borrowerToEdit.getPhone());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Email updatedEmail \u003d editBorrowerDescriptor.getEmail().orElse(borrowerToEdit.getEmail());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId borrowerId \u003d borrowerToEdit.getBorrowerId();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        LoanList currentLoanList \u003d borrowerToEdit.getCurrentLoanList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        LoanList returnedLoanList \u003d borrowerToEdit.getReturnedLoanList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new Borrower(updatedName, updatedPhone, updatedEmail, borrowerId, currentLoanList, returnedLoanList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!(other instanceof EditBorrowerCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand e \u003d (EditBorrowerCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return editBorrowerDescriptor.equals(e.editBorrowerDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Stores the details to edit the borrower with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * corresponding field value of the borrower."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static class EditBorrowerDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        private BorrowerId id;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public EditBorrowerDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public EditBorrowerDescriptor(EditBorrowerDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            setId(toCopy.id);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void setId(BorrowerId id) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            if (!(other instanceof EditBorrowerDescriptor)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            EditBorrowerDescriptor e \u003d (EditBorrowerDescriptor) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 184,
      "seeziyang": 6,
      "Cronyxx": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the application. \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Catalog as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "Cronyxx": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all books by filtering the ones matching \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"the specified keywords (case-insensitive) and \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Parameters: { [t/TITLE] [a/AUTHOR] [g/GENRE]… \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"[sn/BOOK_SN] [-overdue] [-loaned] [-available] } \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"[NUMBER]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" g/mystery g/children -available\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final BookPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final int showLimit \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public FindCommand(BookPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "Cronyxx": 4,
      "seeziyang": 2,
      "-": 33,
      "shiyao821": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNUSED_ARGUMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String unusedArguments \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public HelpCommand(String unusedArguments) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!unusedArguments.equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            this.unusedArguments \u003d unusedArguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public HelpCommand() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (unusedArguments !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return new CommandResult(String.format(SHOWING_HELP_MESSAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    + MESSAGE_UNUSED_ARGUMENT, unusedArguments, COMMAND_WORD),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    true, false, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 20,
      "shiyao821": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InfoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class InfoCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"info\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_BOOK_INFO \u003d \"Displaying information for %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Get information of a book\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final BookPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public InfoCommand(Index index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        predicate \u003d new BookPredicate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book target \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String loanHistory \u003d getLoanHistoryOfBookAsString(target, model); // display string once ui is completed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        predicate.setSerialNumber(getSerialNumberAsString(target));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(MESSAGE_BOOK_INFO, getTitleFromBook(target)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private String getLoanHistoryOfBookAsString(Book target, Model model) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ArrayList\u003cLoan\u003e loanStream \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        sb.append(\"Borrowed by:\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        target.getLoanHistory().forEach(loan -\u003e loanStream.add(loan));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loanStream.stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .map(loan -\u003e loan.getBorrowerId())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .map(id -\u003e model.getBorrowerFromId(id))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .map(borrower -\u003e borrower.getName())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .forEach(name -\u003e sb.append(name + \"\\n\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private String getSerialNumberAsString(Book target) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return target.getSerialNumber().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private String getTitleFromBook(Book target) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return target.getTitle().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof InfoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 index.equals(((InfoCommand) other).index)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_ON_LOAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.LoanSlipUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanIdGenerator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Loans a Book with the given Serial Number to a Borrower."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class LoanCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Loans a book to a borrower.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Command can only be used in Serve mode.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Parameters: \" + PREFIX_SERIAL_NUMBER + \"SERIAL_NUMBER\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SERIAL_NUMBER + \"B00001\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book: %1$s\\nloaned to\\nBorrower: %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final SerialNumber toLoan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Creates an LoanCommand to loan the specified {@code Book} to the Borrower currently served."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param bookSn Serial number of Book to be loaned."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanCommand(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(bookSn);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.toLoan \u003d bookSn;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Executes the LoanCommand and returns the result message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.hasBook(this.toLoan)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_BOOK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book bookToBeLoaned \u003d model.getBook(toLoan);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (bookToBeLoaned.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOK_ON_LOAN, bookToBeLoaned));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower servingBorrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate dueDate \u003d DateUtil.getTodayPlusDays(model.getUserSettings().getLoanPeriod());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loan \u003d new Loan(LoanIdGenerator.generateLoanId(), toLoan, servingBorrower.getBorrowerId(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), dueDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book loanedOutBook \u003d bookToBeLoaned.loanOut(loan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book updatedLoanedOutBook \u003d loanedOutBook.updateLoanHistory(loan);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // replace the previous Book object with a new Book object that has a Loan"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.setBook(bookToBeLoaned, updatedLoanedOutBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.addLoan(loan); // add Loan object to LoanRecords in model"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.servingBorrowerNewLoan(loan); // add Loan object to Borrower\u0027s currentLoanList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new UnloanCommand(updatedLoanedOutBook, bookToBeLoaned, loan);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, updatedLoanedOutBook, servingBorrower));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            LoanSlipUtil.mountLoan(loan, updatedLoanedOutBook, servingBorrower);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (LoanSlipException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            e.printStackTrace(); // Unable to generate loan slip, does not affect loan functionality"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(o instanceof LoanCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand otherLoanCommand \u003d (LoanCommand) o;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this.toLoan.equals(otherLoanCommand.toLoan);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "hoholyin": 11,
      "seeziyang": 88,
      "Cronyxx": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_OUTSTANDING_FINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOLLAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.FineUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Pays fines incurred by Borrower with amount."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class PayCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pay\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \": Pays outstanding fines incurred by the borrower.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Command can only be used in Serve mode.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Parameters: \" + PREFIX_DOLLAR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"AMOUNT (must be a positive number \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"with at most 2 decimal places)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_DOLLAR + \"1.20\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            \"Fine of %1$s\\npaid by\\nBorrower: %2$s\\nOutstanding fine: %3$s\\nChange given: %4$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final int amountInCents;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Creates a PayCommand to pay the specified {@code amountInCents} towards fine incurred by the Borrower."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param amountInCents Amount in cents paid by the Borrower."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public PayCommand(int amountInCents) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.amountInCents \u003d amountInCents;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Executes the PayCommand and returns the result message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower servingBorrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!servingBorrower.hasOutstandingFine()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NO_OUTSTANDING_FINE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int change \u003d model.payFines(amountInCents);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String amountPaidInDollars \u003d FineUtil.centsToDollarString(amountInCents - change);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // servingBorrower was updated in payFine method"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String outstandingFineInDollars \u003d FineUtil.centsToDollarString("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                model.getServingBorrower().getOutstandingFineAmount());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String changeInDollars \u003d FineUtil.centsToDollarString(change);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, amountPaidInDollars,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                model.getServingBorrower(), outstandingFineInDollars, changeInDollars));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(o instanceof PayCommand)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        PayCommand otherPayCommand \u003d (PayCommand) o;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this.amountInCents \u003d\u003d otherPayCommand.amountInCents;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 84,
      "Cronyxx": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CANNOT_REDO_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Redoes previously undone {@code ReversibleCommand}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redoes the most recent undone command. \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redone most recent undone command: \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!model.canRedoCommand()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_REDO_COMMAND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        CommandResult commandResult \u003d model.redoCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String msgSuccess \u003d MESSAGE_SUCCESS + commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new CommandResult(msgSuccess, commandResult.isShowHelp(), commandResult.isExit(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                commandResult.isServe(), commandResult.isDone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return (other \u003d\u003d this || other instanceof RedoCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BORROWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Registers a borrower to the library records."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class RegisterCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Register a new borrower to the library \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"records. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + PREFIX_PHONE + \"PHONE NUMBER \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_NAME + \"matt \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + PREFIX_PHONE + \"83938249 \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_EMAIL + \"matt@damon.com \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New borrower added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final Borrower toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Creates a RegisterCommand to add the specified {@code Borrower}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param borrower to be registered."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public RegisterCommand(Borrower borrower) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(borrower);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        toAdd \u003d borrower;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (model.hasBorrower(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            // borrowers with same name and (phone number or email)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            model.resetGenerator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BORROWER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        model.registerBorrower(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new UnregisterCommand(toAdd.getBorrowerId());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toFullString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || (other instanceof RegisterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RegisterCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 56,
      "Cronyxx": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RenewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_CANNOT_BE_RENEWED_ANYMORE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_IS_OVERDUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_NOT_ON_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_LOANED_BY_BORROWER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Renews a Book with the given Index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class RenewCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"renew\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Renews a book borrowed by a borrower.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Command can only be used in Serve mode.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book: %1$s\\nrenewed by\\nBorrower: %2$s\\nDue date: %3$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Creates an RenewCommand to renew the currently served Borrower\u0027s {@code Book}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param index Index of book to be renewed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public RenewCommand(Index index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Executes the RenewCommand and returns the result message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e lastShownBorrowerBooksList \u003d model.getBorrowerBooks();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownBorrowerBooksList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToBeRenewed \u003d lastShownBorrowerBooksList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!bookToBeRenewed.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOK_NOT_ON_LOAN, bookToBeRenewed));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanToBeRenewed \u003d bookToBeRenewed.getLoan().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower servingBorrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!servingBorrower.hasCurrentLoan(loanToBeRenewed)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_LOANED_BY_BORROWER, servingBorrower, bookToBeRenewed));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (loanToBeRenewed.getRenewCount() \u003e\u003d model.getUserSettings().getMaxRenews()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOK_CANNOT_BE_RENEWED_ANYMORE, bookToBeRenewed));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (DateUtil.isDateBeforeToday(loanToBeRenewed.getDueDate())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOK_IS_OVERDUE, bookToBeRenewed));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate extendedDueDate \u003d DateUtil.extendDate(loanToBeRenewed.getDueDate(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                model.getUserSettings().getRenewPeriod());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan renewedLoan \u003d loanToBeRenewed.renewLoan(extendedDueDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book renewedBook \u003d new Book(bookToBeRenewed.getTitle(), bookToBeRenewed.getSerialNumber(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                bookToBeRenewed.getAuthor(), renewedLoan, bookToBeRenewed.getGenres());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // update Book in model to have Loan due date extended"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setBook(bookToBeRenewed, renewedBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // update Loan in Borrower\u0027s currentLoanList"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.servingBorrowerRenewLoan(loanToBeRenewed, renewedLoan);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // update Loan in LoanRecords with extended due date"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.updateLoan(loanToBeRenewed, renewedLoan);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new UnrenewCommand(renewedBook, bookToBeRenewed, renewedLoan, loanToBeRenewed);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, renewedBook,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                servingBorrower, extendedDueDate));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(o instanceof RenewCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand otherRenewCommand \u003d (RenewCommand) o;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this.index.equals(otherRenewCommand.index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 3,
      "seeziyang": 110,
      "Cronyxx": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReturnCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_NOT_ON_LOAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_LOANED_BY_BORROWER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.FineUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.LoanSlipUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Returns a Book with the given Index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class ReturnCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns a book borrowed by a borrower.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Command can only be used in Serve mode.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book: %1$s\\nreturned by\\nBorrower: %2$s\\nFine incurred: %3$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Creates an ReturnCommand to return the currently served Borrower\u0027s {@code Book}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param index Index of book to be returned."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public ReturnCommand(Index index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Executes the ReturnCommand and returns the result message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e lastShownBorrowerBooksList \u003d model.getBorrowerBooks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownBorrowerBooksList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToBeReturned \u003d lastShownBorrowerBooksList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!bookToBeReturned.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOK_NOT_ON_LOAN, bookToBeReturned));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanToBeReturned \u003d bookToBeReturned.getLoan().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower servingBorrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // check if servingBorrower has this Book loaned"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!servingBorrower.hasCurrentLoan(loanToBeReturned)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_LOANED_BY_BORROWER,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    servingBorrower, bookToBeReturned));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate returnDate \u003d DateUtil.getTodayDate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int fineAmount \u003d DateUtil.getNumOfDaysOverdue(loanToBeReturned.getDueDate(), returnDate)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                * model.getUserSettings().getFineIncrement();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan returnedLoan \u003d loanToBeReturned.returnLoan(returnDate, fineAmount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book returnedBook \u003d bookToBeReturned.returnBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // update Book in model to have Loan removed"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setBook(bookToBeReturned, returnedBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // remove Loan from Borrower\u0027s currentLoanList and move to Borrower\u0027s returnedLoanList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.servingBorrowerReturnLoan(loanToBeReturned, returnedLoan);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // update Loan in LoanRecords with returnDate and remainingFineAmount"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.updateLoan(loanToBeReturned, returnedLoan);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // unmount this book in LoanSlipUtil if it is mounted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountSpecificLoan(loanToBeReturned, bookToBeReturned);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new UnreturnCommand(returnedBook, bookToBeReturned, returnedLoan, loanToBeReturned);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, returnedBook, servingBorrower,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                FineUtil.centsToDollarString(fineAmount)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(o instanceof ReturnCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand otherReturnCommand \u003d (ReturnCommand) o;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this.index.equals(otherReturnCommand.index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 10,
      "seeziyang": 100,
      "Cronyxx": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReversibleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A command that can be undone."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public abstract class ReversibleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    protected Command undoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    protected Command redoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    protected CommandResult commandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns a command that undo this command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return a command that undo what this command does."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public Command getUndoCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns a command that redo this command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return a command that redo what this command does."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public Command getRedoCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns the {@code CommandResult} of the executed command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Used to give feedback to users."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return a {@code CommandResult} of the executed command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult getCommandResult() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ServeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BORROWER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Opens a serving session for a borrower and allows the borrower to start borrower book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class ServeCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"serve\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the Serve Mode. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_BORROWER_ID + \"ID\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_BORROWER_ID + \"K0001 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Currently serving Borrower: %1$s\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final BorrowerId borrowerId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Creates a ServeCommand to serve a {@code Borrower}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param borrowerId id of {@code Borrower} we are serving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public ServeCommand (BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(borrowerId);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!model.hasBorrowerId(borrowerId)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_BORROWER_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        model.setServingBorrower(borrowerId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, borrower), false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || (other instanceof ServeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 borrowerId.equals(((ServeCommand) other).borrowerId));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 52,
      "Cronyxx": 17,
      "seeziyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINE_INCREMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOAN_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_RENEWS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RENEW_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.usersettings.MaxRenews;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Sets the user configuration of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets custom user settings of the application. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"[\" + PREFIX_LOAN_PERIOD + \"LOAN_PERIOD] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"[\" + PREFIX_RENEW_PERIOD + \"RENEW_PERIOD]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"[\" + PREFIX_FINE_INCREMENT + \"FINE_INCREMENT]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"[\" + PREFIX_MAX_RENEWS + \"MAX_RENEWS]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + PREFIX_LOAN_PERIOD + \"14 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + PREFIX_RENEW_PERIOD + \"14 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_SET_USER_SETTINGS_SUCCESS \u003d \"Set User Settings: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final SetUserSettingsDescriptor setUserSettingsDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Creates a SetCommand to set the {@code LoanPeriod}, {@code RenewPeriod} and {@code FineIncrement}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param setUserSettingsDescriptor details of the new user settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetCommand(SetUserSettingsDescriptor setUserSettingsDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.setUserSettingsDescriptor \u003d new SetUserSettingsDescriptor(setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings userSettingsToEdit \u003d model.getUserSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings editedUserSettings \u003d createEditedUserSettings(userSettingsToEdit, setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.setUserSettings(editedUserSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new SetCommand(getSettingsDescriptor(userSettingsToEdit));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_SET_USER_SETTINGS_SUCCESS, model.getUserSettings()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns a {@code SetUserSettingsDescriptor} from {@code UserSettings}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private SetUserSettingsDescriptor getSettingsDescriptor(UserSettings userSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor settingsDescriptor \u003d new SetUserSettingsDescriptor();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        settingsDescriptor.setLoanPeriod(new LoanPeriod(userSettings.getLoanPeriod()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        settingsDescriptor.setRenewPeriod(new RenewPeriod(userSettings.getRenewPeriod()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        settingsDescriptor.setFineIncrement(new FineIncrement(userSettings.getFineIncrement()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return settingsDescriptor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static UserSettings createEditedUserSettings(UserSettings userSettingsToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                                                      SetUserSettingsDescriptor setUserSettingsDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        LoanPeriod loanPeriod \u003d setUserSettingsDescriptor.getLoanPeriod()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .orElse(new LoanPeriod(userSettingsToEdit.getLoanPeriod()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        RenewPeriod renewPeriod \u003d setUserSettingsDescriptor.getRenewPeriod()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .orElse(new RenewPeriod(userSettingsToEdit.getRenewPeriod()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        FineIncrement fineIncrement \u003d setUserSettingsDescriptor.getFineIncrement()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .orElse(new FineIncrement(userSettingsToEdit.getFineIncrement()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        MaxRenews maxRenews \u003d setUserSettingsDescriptor.getMaxRenews()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .orElse(new MaxRenews(userSettingsToEdit.getMaxRenews()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new UserSettings(loanPeriod.getLoanPeriod(), renewPeriod.getRenewPeriod(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                fineIncrement.getFineIncrement(), maxRenews.getMaxRenews());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(other instanceof SetCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand e \u003d (SetCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return setUserSettingsDescriptor.equals(e.setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Stores the user settings to change. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static class SetUserSettingsDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        private LoanPeriod loanPeriod;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        private RenewPeriod renewPeriod;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        private FineIncrement fineIncrement;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        private MaxRenews maxRenews;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public SetUserSettingsDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public SetUserSettingsDescriptor(SetUserSettingsDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setLoanPeriod(toCopy.loanPeriod);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setRenewPeriod(toCopy.renewPeriod);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setFineIncrement(toCopy.fineIncrement);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            setMaxRenews(toCopy.maxRenews);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(loanPeriod, renewPeriod, fineIncrement, maxRenews);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void setLoanPeriod(LoanPeriod loanPeriod) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            this.loanPeriod \u003d loanPeriod;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public Optional\u003cLoanPeriod\u003e getLoanPeriod() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return Optional.ofNullable(loanPeriod);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void setRenewPeriod(RenewPeriod renewPeriod) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            this.renewPeriod \u003d renewPeriod;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public Optional\u003cRenewPeriod\u003e getRenewPeriod() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return Optional.ofNullable(renewPeriod);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void setFineIncrement(FineIncrement fineIncrement) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            this.fineIncrement \u003d fineIncrement;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public Optional\u003cFineIncrement\u003e getFineIncrement() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return Optional.ofNullable(fineIncrement);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void setMaxRenews(MaxRenews maxRenews) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            this.maxRenews \u003d maxRenews;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public Optional\u003cMaxRenews\u003e getMaxRenews() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return Optional.ofNullable(maxRenews);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            if (!(other instanceof SetUserSettingsDescriptor)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            SetUserSettingsDescriptor e \u003d (SetUserSettingsDescriptor) other;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return getLoanPeriod().equals(e.getLoanPeriod())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    \u0026\u0026 getRenewPeriod().equals(e.getRenewPeriod())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    \u0026\u0026 getFineIncrement().equals(e.getFineIncrement())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    \u0026\u0026 getMaxRenews().equals(e.getMaxRenews());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 189,
      "seeziyang": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CANNOT_UNDO_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Undoes most recent {@code ReversibleCommand}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undoes the most recent reversible command. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undone most recent command: \\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!model.canUndoCommand()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_UNDO_COMMAND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        CommandResult commandResult \u003d model.undoCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String msgSuccess \u003d MESSAGE_SUCCESS + commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new CommandResult(msgSuccess, commandResult.isShowHelp(), commandResult.isExit(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                commandResult.isServe(), commandResult.isDone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return (other \u003d\u003d this || other instanceof UndoCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnloanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Unloans a {@code Book}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * This class is meant to be the reverse of {@code LoanCommand} and is used only for the purpose of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * a undo/redo Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UnloanCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book: %1$s\\nunloaned from\\nBorrower: %2$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Book bookToBeUnloaned;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Book unloanedBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Loan loanToBeRemoved;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Creates an UnloanCommand to unloan the specified {@code Book} to the Borrower currently served."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * This is only used as an undo command for {@code LoanCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param bookToBeUnloaned {@code Book} to be unloaned."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param unloanedBook resultant {@code Book} when unloaned."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanToBeRemoved loan to be removed from {@code LoanRecords} and borrower\u0027s loans."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UnloanCommand(Book bookToBeUnloaned, Book unloanedBook, Loan loanToBeRemoved) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireAllNonNull(bookToBeUnloaned, unloanedBook, loanToBeRemoved);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.bookToBeUnloaned \u003d bookToBeUnloaned;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.unloanedBook \u003d unloanedBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanToBeRemoved \u003d loanToBeRemoved;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Executes the UnloanCommand and returns the result message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assert(model.isServeMode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assert(model.hasBook(bookToBeUnloaned));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assert(bookToBeUnloaned.isCurrentlyLoanedOut());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // replace the previous Book object with a new Book object that does not have the loan"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.setBook(bookToBeUnloaned, unloanedBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.removeLoan(loanToBeRemoved); // remove Loan object from LoanRecords in model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.servingBorrowerRemoveLoan(loanToBeRemoved); // remove Loan object from Borrower\u0027s currentLoanList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, unloanedBook, model.getServingBorrower()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(o instanceof UnloanCommand)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UnloanCommand otherUnloanCommand \u003d (UnloanCommand) o;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this.bookToBeUnloaned.equals(otherUnloanCommand.bookToBeUnloaned)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 this.unloanedBook.equals(otherUnloanCommand.unloanedBook)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 this.loanToBeRemoved.equals(otherUnloanCommand.loanToBeRemoved);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnregisterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BORROWER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Unregisters a borrower from the borrower record."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UnregisterCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unregister\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unregisters a borrower from the library \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"record identified by the borrower ID. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Parameters: BORROWER_ID (Must be a valid \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"borrower ID) \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" id/K0001\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Borrower unregistered: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final BorrowerId id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Creates an UnregisterCommand to add the specified {@code Borrower}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param id of the {@code Borrower} to unregister."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public UnregisterCommand(BorrowerId id) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!model.hasBorrowerId(id)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_BORROWER_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower toUnregister \u003d model.getBorrowerFromId(id);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        model.unregisterBorrower(toUnregister);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        undoCommand \u003d new RegisterCommand(toUnregister);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        redoCommand \u003d this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toUnregister.toFullString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || (other instanceof UnregisterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 id.equals(((UnregisterCommand) other).id));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 52,
      "Cronyxx": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnrenewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Unrenews a {@code Book}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * This class is meant to be the reverse of {@code RenewCommand} and is used only for the purpose of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * a undo/redo Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UnrenewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book: %1$s\\nunrenewed for\\nBorrower: %2$s\\nDue date: %3$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Book bookToBeUnrenewed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Book unrenewedBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Loan loanToBeUnrenewed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Loan unrenewedLoan;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Creates an RenewCommand to renew the currently served Borrower\u0027s {@code Book}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param bookToBeUnrenewed book which loan is renewed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param unrenewedBook resultant book after loan is unrenewed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanToBeUnrenewed loan that is to be unrenewed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param unrenewedLoan previous loan before renew."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UnrenewCommand(Book bookToBeUnrenewed, Book unrenewedBook, Loan loanToBeUnrenewed, Loan unrenewedLoan) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireAllNonNull(bookToBeUnrenewed, unrenewedBook, loanToBeUnrenewed, unrenewedLoan);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.bookToBeUnrenewed \u003d bookToBeUnrenewed;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.unrenewedBook \u003d unrenewedBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanToBeUnrenewed \u003d loanToBeUnrenewed;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.unrenewedLoan \u003d unrenewedLoan;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Executes the RenewCommand and returns the result message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // update Book in model to have Loan due date return to previous due date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.setBook(bookToBeUnrenewed, unrenewedBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // update Loan in Borrower\u0027s currentLoanList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.servingBorrowerUnrenewLoan(loanToBeUnrenewed, unrenewedLoan);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // update Loan in LoanRecords to previous due date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.updateLoan(loanToBeUnrenewed, unrenewedLoan);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                String.format(MESSAGE_SUCCESS, unrenewedBook, model.getServingBorrower(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        unrenewedLoan.getDueDate()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(o instanceof UnrenewCommand)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UnrenewCommand otherUnrenewCommand \u003d (UnrenewCommand) o;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this.bookToBeUnrenewed.equals(otherUnrenewCommand.bookToBeUnrenewed)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 this.unrenewedBook.equals(otherUnrenewCommand.unrenewedBook)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 this.loanToBeUnrenewed.equals(otherUnrenewCommand.loanToBeUnrenewed)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 this.unrenewedLoan.equals(otherUnrenewCommand.unrenewedLoan);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnreturnCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Unreturns a {@code Book}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * This class is meant to be the reverse of {@code ReturnCommand} and is used only for the purpose of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * a undo/redo Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UnreturnCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book: %1$s\\nunreturned from\\nBorrower: %2$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Book bookToBeUnreturned;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Book unreturnedBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Loan loanToBeUnreturned;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Loan unreturnedLoan;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Creates an UnreturnCommand to unreturn the currently served Borrower\u0027s {@code Book}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UnreturnCommand(Book bookToBeUnreturned, Book unreturnedBook, Loan loanToBeUnreturned, Loan unreturnedLoan) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireAllNonNull(bookToBeUnreturned, unreturnedBook, loanToBeUnreturned, unreturnedLoan);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.bookToBeUnreturned \u003d bookToBeUnreturned;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.unreturnedBook \u003d unreturnedBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanToBeUnreturned \u003d loanToBeUnreturned;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.unreturnedLoan \u003d unreturnedLoan;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Executes the ReturnCommand and returns the result message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // update Book in model to have Loan removed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.setBook(bookToBeUnreturned, unreturnedBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // remove Loan from Borrower\u0027s currentLoanList and move to Borrower\u0027s returnedLoanList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.servingBorrowerUnreturnLoan(loanToBeUnreturned, unreturnedLoan);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // update Loan in LoanRecords with returnDate and remainingFineAmount"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.updateLoan(loanToBeUnreturned, unreturnedLoan);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, unreturnedBook, model.getServingBorrower()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(o instanceof UnreturnCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UnreturnCommand otherUnreturnCommand \u003d (UnreturnCommand) o;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this.bookToBeUnreturned.equals(otherUnreturnCommand.bookToBeUnreturned)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 this.unreturnedBook.equals(otherUnreturnCommand.unreturnedBook)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 this.loanToBeUnreturned.equals(otherUnreturnCommand.loanToBeUnreturned)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 this.unreturnedLoan.equals(otherUnreturnCommand.unreturnedLoan);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_AUTHOR_NAME_TOO_LONG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_TITLE_TOO_LONG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Loan NULL_LOAN \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return AddCommand object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_SERIAL_NUMBER, PREFIX_AUTHOR,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        PREFIX_GENRE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_AUTHOR)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (title.toString().length() \u003e 30) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(MESSAGE_BOOK_TITLE_TOO_LONG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author author \u003d ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (author.toString().length() \u003e 30) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(MESSAGE_AUTHOR_NAME_TOO_LONG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        boolean haveSerialNumber \u003d argMultimap.getValue(PREFIX_SERIAL_NUMBER).isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber serialNumber;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (haveSerialNumber) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            serialNumber \u003d ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIAL_NUMBER).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            serialNumber \u003d SerialNumberGenerator.generateSerialNumber();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Set\u003cGenre\u003e genreList \u003d ParserUtil.parseGenres(argMultimap.getAllValues(PREFIX_GENRE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new Book(title, serialNumber, author, NULL_LOAN, genreList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new AddCommand(book);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 36,
      "seeziyang": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CatalogParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.EditBorrowerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.RenewCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class CatalogParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        case EditBorrowerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return new ClearCommand(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case LoanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new LoanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        case InfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return new InfoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case RegisterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new RegisterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case ServeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new ServeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return new DoneCommand(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case ReturnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new ReturnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case RenewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new RenewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case PayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new PayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return new UndoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return new RedoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 2,
      "hoholyin": 7,
      "seeziyang": 27,
      "Cronyxx": 11,
      "-": 67,
      "shiyao821": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Prefix PREFIX_SERIAL_NUMBER \u003d new Prefix(\"sn/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Prefix PREFIX_GENRE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Prefix PREFIX_BORROWER_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final Prefix PREFIX_LOAN_PERIOD \u003d new Prefix(\"lp/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final Prefix PREFIX_RENEW_PERIOD \u003d new Prefix(\"rp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final Prefix PREFIX_FINE_INCREMENT \u003d new Prefix(\"fi/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Prefix PREFIX_MAX_RENEWS \u003d new Prefix(\"mr/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final Prefix PREFIX_FLAG \u003d new Prefix(\"-\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Prefix PREFIX_DOLLAR \u003d new Prefix(\"$\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 2,
      "hoholyin": 4,
      "Cronyxx": 3,
      "seeziyang": 2,
      "-": 11,
      "shiyao821": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteByIndexCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteBySerialNumberCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (isPrefixPresent(argMultimap, PREFIX_SERIAL_NUMBER)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                //attempting to delete by serial number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                SerialNumber sn \u003d ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIAL_NUMBER).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                return new DeleteBySerialNumberCommand(sn);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                //attempting to delete by index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                return new DeleteByIndexCommand(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (serialNumberProvided(args)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        String.format(MESSAGE_INVALID_SERIAL_NUMBER, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if user attempted to provide serial number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args arguments in string representation."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if serial number is contained within the input string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean serialNumberProvided(String args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Arguments that come to this method are part of a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Therefore, if the serial number prefix is present, the serial number provided is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return isPrefixPresent(argMultimap, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 40,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return DoneCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public DoneCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new DoneCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.EditBorrowerCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Parses input arguments and creates a new EditBorrowerCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditBorrowerCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBorrowerCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * and returns an EditBorrowerCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerCommand parse(String args) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand.EditBorrowerDescriptor editBorrowerDescriptor \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new EditBorrowerCommand.EditBorrowerDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            editBorrowerDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            editBorrowerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            editBorrowerDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!editBorrowerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new ParseException(EditBorrowerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new EditBorrowerCommand(editBorrowerDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 16,
      "hoholyin": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAY_LIMIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final int MAX_LOANSTATE_FLAGS \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        int displayLimit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_SERIAL_NUMBER, PREFIX_AUTHOR,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        PREFIX_GENRE, PREFIX_FLAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!argMultimap.getPreamble().equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                displayLimit \u003d Integer.parseInt(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                if (displayLimit \u003c 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                predicate.setDisplayLimit(displayLimit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DISPLAY_LIMIT, nfe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            predicate.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()).value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SERIAL_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            predicate.setSerialNumber(ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIAL_NUMBER)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    .get()).value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            predicate.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()).value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        parseGenresForFind(argMultimap.getAllValues(PREFIX_GENRE)).ifPresent(predicate::setGenres);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        parseLoanStateForFind(argMultimap.getAllValues(PREFIX_FLAG)).ifPresent(predicate::setLoanState);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!predicate.isValid()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e genres} into a {@code Set\u003cGenre\u003e} if {@code genres} is non-empty."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Automatically converts lowercase {@code genreNames} to UPPERCASE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * If {@code genres} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * {@code Set\u003cGenre\u003e} containing zero genres."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Optional\u003cSet\u003cGenre\u003e\u003e parseGenresForFind(Collection\u003cString\u003e genres) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(genres);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (genres.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Collection\u003cString\u003e genreSet \u003d genres.size() \u003d\u003d 1 \u0026\u0026 genres.contains(\"\") ? Collections.emptySet() : genres;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return Optional.of(ParserUtil.parseGenres(genreSet));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e flags} into a {@code Set\u003cFlag\u003e} if {@code flags} is non-empty."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Automatically converts lowercase {@code flagNames} to UPPERCASE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * If {@code flags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * {@code Set\u003cFlag\u003e} containing zero flags."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Optional\u003cFlag\u003e parseLoanStateForFind(Collection\u003cString\u003e flags) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(flags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (flags.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Collection\u003cFlag\u003e flagSet \u003d flags.size() \u003d\u003d 1 \u0026\u0026 flags.contains(\"\") ? Collections.emptySet()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                : ParserUtil.parseFlags(flags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        List\u003cFlag\u003e loanStates \u003d flagSet.stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .filter(flag -\u003e flag \u003d\u003d Flag.AVAILABLE || flag \u003d\u003d Flag.OVERDUE || flag \u003d\u003d Flag.LOANED)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (loanStates.size() \u003e MAX_LOANSTATE_FLAGS) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_LOAN_STATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.of(loanStates.get(0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "-": 30,
      "shiyao821": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Flag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * A class for all flags users input to find books"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public enum Flag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    AVAILABLE, LOANED, OVERDUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The only available flags are\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"-available\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"-loaned\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"-overdue\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InfoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class InfoCommandParser implements Parser\u003cInfoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int VALID_NUMBER_OF_ARGUMENTS \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public InfoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isInfoCommand(args)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InfoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        index \u003d ParserUtil.parseIndex(extractIndex(args));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new InfoCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Extracts index from given string of arguments."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args {@code String} of arguments."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return {@code String} representation of index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private String extractIndex(String args) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return args.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if arguments are in a valid format of an info command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args {@code String} of arguments."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if arguments are in a valid format of an info command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean isInfoCommand(String args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return correctNumberOfArguments(args) //assert correct number of arguments here"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 argumentIsValidInteger(args); //asserted correct number of arguments before accessing array in here"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if number of arguments correspond to that of a valid info command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args {@code String} of arguments."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if number of arguments correspond to that of a valid info command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean correctNumberOfArguments(String args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String[] argsArr \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return argsArr.length \u003d\u003d VALID_NUMBER_OF_ARGUMENTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if the given index argument is a valid integer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args {@code String} of arguments."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if the given index argument is a valid integer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean argumentIsValidInteger(String args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String arg \u003d args.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Integer.parseInt(arg);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Parses input arguments and creates a new LoanCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanCommandParser implements Parser\u003cLoanCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoanCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * and returns a LoanCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param args User input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return LoanCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Optional\u003cString\u003e optionalSnString \u003d argMultimap.getValue(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (optionalSnString.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber bookSn \u003d ParserUtil.parseSerialNumber(optionalSnString.get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanCommand(bookSn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    T parse(String userInput) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 2,
      "hoholyin": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.usersettings.MaxRenews;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_INVALID_DOLLAR_AMOUNT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            \"Dollar amount should be a non-zero number with at most 2 decimal places.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Parses {@code dollarAmount} into a {@code double} representing the amount in dollars and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not a non-zero number with at most 2 decimal places)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static double parseDollar(String dollarAmount) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String trimmedAmount \u003d dollarAmount.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!StringUtil.isValidDollarAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DOLLAR_AMOUNT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return Double.parseDouble(trimmedAmount);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses a {@code String title} into a {@code Name}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String trimmedName \u003d title.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!Title.isValidTitle(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Title(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses a {@code String serialNumber} into a {@code SerialNumber}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws ParseException if the given {@code serialNumber} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static SerialNumber parseSerialNumber(String serialNumber) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String trimmedSerialNumber \u003d serialNumber.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(trimmedSerialNumber)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new SerialNumber(trimmedSerialNumber);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses a {@code String author} into an {@code Author}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Author object from remark string"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static Author parseAuthor(String author) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String trimmedAuthor \u003d author.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Author.isValidAuthor(trimmedAuthor)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new ParseException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Author(trimmedAuthor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses a {@code String genre} into a {@code Genre}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed, and genre will be converted to UPPERCASE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws ParseException if the given {@code genre} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Genre parseGenre(String genre) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(genre);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String trimmedGenre \u003d genre.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String uppercaseGenre \u003d trimmedGenre.toUpperCase();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Genre.isValidGenreName(uppercaseGenre)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return new Genre(uppercaseGenre);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e genres} into a {@code Set\u003cGenre\u003e}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Set\u003cGenre\u003e parseGenres(Collection\u003cString\u003e genres) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(genres);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        final Set\u003cGenre\u003e genreSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (String genreName : genres) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            genreSet.add(parseGenre(genreName));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return genreSet;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses a {@code String Borrower ID} into an {@code Borrower ID}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws ParseException if the given {@code borrower ID} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static BorrowerId parseBorrowerId(String id) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!BorrowerId.isValidBorrowerId(trimmedId)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new ParseException(BorrowerId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new BorrowerId(trimmedId);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses {@code loanPeriod} into an {@code LoanPeriod} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws ParseException if the specified loanPeriod is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static LoanPeriod parseLoanPeriod(String loanPeriod) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(loanPeriod);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String trimmedLoanPeriod \u003d loanPeriod.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedLoanPeriod)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new LoanPeriod(trimmedLoanPeriod);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses {@code renewPeriod} into an {@code renewPeriod} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws ParseException if the specified renewPeriod is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static RenewPeriod parseRenewPeriod(String renewPeriod) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(renewPeriod);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String trimmedRenewPeriod \u003d renewPeriod.trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedRenewPeriod)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(RenewPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new RenewPeriod(trimmedRenewPeriod);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses {@code fineIncrement} into an {@code FineIncrement} and returns it. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * be trimmed."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws ParseException if the specified fineIncrement is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static FineIncrement parseFineIncrement(String fineIncrement) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(fineIncrement);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String trimmedFineIncrement \u003d fineIncrement.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedFineIncrement)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(FineIncrement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new FineIncrement(trimmedFineIncrement);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Parses {@code maxRenews} into an {@code RenewCount} and returns it. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws ParseException if the specified maxRenews is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static MaxRenews parseMaxRenews(String maxRenews) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(maxRenews);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String trimmedMaxRenews \u003d maxRenews.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedMaxRenews)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException(MaxRenews.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new MaxRenews(trimmedMaxRenews);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Parses {@code flag} into {@code Flag}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed, and flag will be converted to UPPERCASE"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws ParseException if the flag is invalid (case-insensitive)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static Flag parseFlag(String flag) throws ParseException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(flag);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String trimmedFlag \u003d flag.trim();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String uppercaseFlag \u003d trimmedFlag.toUpperCase();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Flag.valueOf(uppercaseFlag);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new ParseException(Flag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e flags} into a {@code Set\u003cFlag\u003e}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static Set\u003cFlag\u003e parseFlags(Collection\u003cString\u003e flags) throws ParseException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(flags);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Set\u003cFlag\u003e flagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (String flagName : flags) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            flagSet.add(parseFlag(flagName));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return flagSet;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 16,
      "hoholyin": 35,
      "Cronyxx": 45,
      "seeziyang": 31,
      "-": 119,
      "shiyao821": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PayCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOLLAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.FineUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Parses input arguments and creates a new PayCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class PayCommandParser implements Parser\u003cPayCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PayCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * and returns a PayCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return PayCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public PayCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_DOLLAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Optional\u003cString\u003e optionalDollarAmount \u003d argMultimap.getValue(PREFIX_DOLLAR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (optionalDollarAmount.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            double dollarAmount \u003d ParserUtil.parseDollar(optionalDollarAmount.get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            int centAmount \u003d FineUtil.dollarsToCents(dollarAmount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new PayCommand(centAmount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    PayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RedoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Parses input arguments and creates a new {@code RedoCommand} object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class RedoCommandParser implements Parser\u003cRedoCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RedoCommand}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * and returns a {@code RedoCommand} object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return {@code RedoCommand} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public RedoCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new RedoCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Parses input arguments and creates a new RegisterCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class RegisterCommandParser implements Parser\u003cRegisterCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RegisterCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * and returns an RegisterCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return RegisterCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public RegisterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower \u003d new Borrower(name, phone, email);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new RegisterCommand(borrower);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RenewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.RenewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Parses input arguments and creates a RenewCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class RenewCommandParser implements Parser\u003cRenewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RenewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * and returns a RenewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return RenewCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public RenewCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new RenewCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReturnCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Parses input arguments and creates a new ReturnCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class ReturnCommandParser implements Parser\u003cReturnCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReturnCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * and returns a ReturnCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return ReturnCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public ReturnCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new ReturnCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReturnCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ServeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Parses input arguments and creates a new ServeCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class ServeCommandParser implements Parser\u003cServeCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ServeCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * and returns a ServeCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return ServeCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public ServeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BORROWER_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_BORROWER_ID).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                    ServeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId borrowerId \u003d ParserUtil.parseBorrowerId(argMultimap.getValue(PREFIX_BORROWER_ID).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new ServeCommand(borrowerId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINE_INCREMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOAN_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_RENEWS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RENEW_PERIOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Parses input arguments and creates a new SetCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * and returns an SetCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LOAN_PERIOD, PREFIX_RENEW_PERIOD,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                PREFIX_FINE_INCREMENT, PREFIX_MAX_RENEWS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor setUserSettingsDescriptor \u003d new SetCommand.SetUserSettingsDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOAN_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setUserSettingsDescriptor.setLoanPeriod(ParserUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    .parseLoanPeriod(argMultimap.getValue(PREFIX_LOAN_PERIOD).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RENEW_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setUserSettingsDescriptor.setRenewPeriod(ParserUtil"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    .parseRenewPeriod(argMultimap.getValue(PREFIX_RENEW_PERIOD).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FINE_INCREMENT).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setUserSettingsDescriptor.setFineIncrement(ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    .parseFineIncrement(argMultimap.getValue(PREFIX_FINE_INCREMENT).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAX_RENEWS).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            setUserSettingsDescriptor.setMaxRenews(ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    .parseMaxRenews(argMultimap.getValue(PREFIX_MAX_RENEWS).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!setUserSettingsDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(SetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new SetCommand(setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 56,
      "seeziyang": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UndoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Parses input arguments and creates a new {@code UndoCommand} object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code UndoCommand}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * and returns a {@code UndoCommand} object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return {@code UndoCommand} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UndoCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new UndoCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnregisterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.UnregisterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Parses input arguments and creates a new UnregisterCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class UnregisterCommandParser implements Parser\u003cUnregisterCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public UnregisterCommand parse(String userInput) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_BORROWER_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_BORROWER_ID).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnregisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId id \u003d ParserUtil.parseBorrowerId(argMultimap.getValue(PREFIX_BORROWER_ID).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new UnregisterCommand(id);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BorrowerRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerIdGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.exceptions.BorrowerNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.exceptions.DuplicateBorrowerException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Wraps all data at the catalog level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class BorrowerRecords implements ReadOnlyBorrowerRecords {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // Placeholder for UniqueBorrowerList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private ObservableList\u003cBorrower\u003e listOfBorrowers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private HashMap\u003cBorrowerId, Borrower\u003e borrowersMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BorrowerRecords() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Creates BorrowerRecords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param toBeCopied is the records to be copied"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerRecords(ReadOnlyBorrowerRecords toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if a borrower is in the borrower records."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param borrower Borrower to be checked."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean hasBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return listOfBorrowers.stream().anyMatch(current -\u003e current.getPhone().equals(borrower.getPhone())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || current.getEmail().equals(borrower.getEmail()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a borrower to the borrower records."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param borrower Borrower to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void addBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        listOfBorrowers.add(borrower);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrowersMap.put(borrower.getBorrowerId(), borrower);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private void resetData(ReadOnlyBorrowerRecords newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        setBorrowers(FXCollections.observableArrayList(newData.getBorrowerList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private void setBorrowers(ObservableList\u003cBorrower\u003e borrowerList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.listOfBorrowers \u003d borrowerList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.borrowersMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrowerList.stream().forEach(borrower -\u003e borrowersMap.put(borrower.getBorrowerId(), borrower));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(this);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * to check if borrower id exists."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param id is the borrower id."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return a boolean true or false of whether the id exists."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean checkIfBorrowerIdExists(BorrowerId id) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return borrowersMap.containsKey(id);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a borrower based on its BorrowerId."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param id the \u003ccode\u003eBorrowerId\u003c/code\u003e of the \u003ccode\u003eBorrower\u003c/code\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return \u003ccode\u003eBorrower\u003c/code\u003e which corresponds to the given \u003ccode\u003eBorrowerId\u003c/code\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws NullPointerException if borrower is not present in the borrower records."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Borrower getBorrowerFromId(BorrowerId id) throws NullPointerException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!borrowersMap.containsKey(id)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new NullPointerException(\"Borrower \" + id.toString() + \" does not exists\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return borrowersMap.get(id);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if the list contains an equivalent borrower as the given argument."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean listContains(Borrower toCheck) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return listOfBorrowers.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Replaces the borrower {@code target} in the list with {@code editedBorrower}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * The borrower identity of {@code editedBorrower} must not be the same as another existing borrower in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setBorrower(Borrower target, Borrower editedBorrower) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireAllNonNull(target, editedBorrower);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int index \u003d listOfBorrowers.indexOf(target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new BorrowerNotFoundException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!target.equals(editedBorrower) \u0026\u0026 listContains(editedBorrower)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new DuplicateBorrowerException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        listOfBorrowers.set(index, editedBorrower);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowersMap.remove(target.getBorrowerId());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowersMap.put(editedBorrower.getBorrowerId(), editedBorrower);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ObservableList\u003cBorrower\u003e getBorrowerList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return FXCollections.unmodifiableObservableList(listOfBorrowers);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || (other instanceof BorrowerRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 listOfBorrowers.equals(((BorrowerRecords) other).listOfBorrowers)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 borrowersMap.equals(((BorrowerRecords) other).borrowersMap));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return listOfBorrowers.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Checks if a borrower has duplicated phone or email in the borrower records."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param editedBorrower Borrower to be checked."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean hasDuplicateBorrower(Borrower editedBorrower) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return listOfBorrowers.stream().anyMatch(current -\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                current.getBorrowerId() !\u003d editedBorrower.getBorrowerId()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                        \u0026\u0026 (current.getPhone().equals(editedBorrower.getPhone())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                        || current.getEmail().equals(editedBorrower.getEmail())));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Removes a borrower from the borrower records."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param borrower Borrower to be removed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void removeBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        listOfBorrowers.remove(borrower);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowersMap.remove(borrower.getBorrowerId());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 59,
      "hoholyin": 35,
      "seeziyang": 34,
      "shiyao821": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Catalog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.UniqueBookList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Wraps all data at the catalog level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Duplicates are not allowed (by .isSameBook comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Catalog implements ReadOnlyCatalog {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final UniqueBookList books;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        books \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Catalog() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates a Catalog using the Books in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Catalog(ReadOnlyCatalog toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Replaces the contents of the book list with {@code books}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.books.setBooks(books);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Resets the existing data of this {@code Catalog} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData(ReadOnlyCatalog newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        setBooks(newData.getBookList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a book with the same serial number as {@code book} exists in the catalog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return checkIfSerialNumberExists(book.getSerialNumber());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a book to the catalog."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book must not already exist in the catalog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addBook(Book p) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        books.add(p);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code target} must exist in the catalog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the catalog."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(editedBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        books.setBook(target, editedBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean checkIfSerialNumberExists(SerialNumber sn) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return books.containsSerialNumber(sn);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Removes {@code key} from this {@code Catalog}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code key} must exist in the catalog."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void removeBook(Book key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        books.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a list of loaned books from the current catalog."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an ObservableList of books that are loaned out."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getLoanedBooks() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e loanedBooks \u003d getBookList()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.isCurrentlyLoanedOut())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return FXCollections.observableArrayList(loanedBooks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a list of overdue books from the current catalog."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an ObservableList of books that are overdue."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getOverdueBooks() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e loanedBooks \u003d getBookList()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.isOverdue())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return FXCollections.observableArrayList(loanedBooks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a list of available books from the current catalog."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an ObservableList of books that are available."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getAvailableBooks() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e availableBooks \u003d getBookList()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e !book.isCurrentlyLoanedOut())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return FXCollections.observableArrayList(availableBooks);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book getBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return books.getBook(bookSn);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return books.asUnmodifiableObservableList().size() + \" books\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return books.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof Catalog // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 books.equals(((Catalog) other).books));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return books.hashCode();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 86,
      "seeziyang": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.ReversibleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * The history manager that keeps track of the application {@code ReversibleCommand} history."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * This class is used for the undo/redo feature."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final List\u003cReversibleCommand\u003e commandHistoryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    // Points to next undoable command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private int currentCommandPointer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandHistoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        currentCommandPointer \u003d -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Saves a copy of a {@code ReversibleCommand} at the end of the {@code commandHistoryList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Undone {@code Reversible} are removed from the {@code commandHistoryList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void commit(ReversibleCommand command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandHistoryList.add(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        currentCommandPointer++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandHistoryList.subList(currentCommandPointer + 1, commandHistoryList.size()).clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Undoes the latest command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param model which the command is executed on."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return {@code CommandResult} from the executed command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new NoUndoableCommandException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        ReversibleCommand commandToUndo \u003d commandHistoryList.get(currentCommandPointer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // Execute the reverse command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandToUndo.getUndoCommand().execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        currentCommandPointer--;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandToUndo.getCommandResult();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Redoes the previously undone Command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param model which the command is executed on."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return {@code CommandResult} from the executed command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new NoRedoableCommandException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        currentCommandPointer++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandHistoryList.get(currentCommandPointer).getRedoCommand().execute(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns true if {@code undo(Model model)} has commands to undo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return currentCommandPointer \u003e\u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns true if {@code redo(Model model)} has commands to redo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return currentCommandPointer \u003c commandHistoryList.size() - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(other instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        CommandHistory otherCommandHistory \u003d (CommandHistory) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandHistoryList.equals(otherCommandHistory.commandHistoryList)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 currentCommandPointer \u003d\u003d otherCommandHistory.currentCommandPointer;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static class NoUndoableCommandException extends RuntimeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        private NoUndoableCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            super(\"Current command pointer does not point to any reversible command, unable to undo.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static class NoRedoableCommandException extends RuntimeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        private NoRedoableCommandException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            super(\"Current command pointer is at end of command history list, no command to redo.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LoanRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Wraps all {@code Loan} data at the LoanRecords level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class LoanRecords implements ReadOnlyLoanRecords {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private HashMap\u003cLoanId, Loan\u003e loansMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Creates a LoanRecords using the Loans in the {@code toBeCopied}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public LoanRecords(ReadOnlyLoanRecords toBeCopied) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loansMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        toBeCopied.getLoanCollection().forEach(loan -\u003e loansMap.put(loan.getLoanId(), loan));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public LoanRecords() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loansMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Gets all the Loan objects tracked by LoanRecords."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return All the Loans in a {@code Collection\u003cLoan\u003e}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Collection\u003cLoan\u003e getLoanCollection() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loansMap.values();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Gets all the Loan objects tracked by LoanRecords."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return All the Loans in a {@code HashMap\u003cLoanId, Loan\u003e}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public HashMap\u003cLoanId, Loan\u003e getLoansMap() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loansMap;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Checks if the LoanRecords contains this {@code loan} object or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan Loan object to be checked."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if LoanRecords contains this {@code loan} object, false otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean hasLoan(Loan loan) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return hasLoan(loan.getLoanId());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Checks if the LoanRecords contains a {@code loan} object with this {@code loanId} or not."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanId Loan ID of loan object to be checked."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if LoanRecords contains a {@code loan} object with this {@code loanId}, false otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean hasLoan(LoanId loanId) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loansMap.containsKey(loanId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Adds a {@code loan} object into the LoanRecords."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan Loan object to be added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loansMap.put(loan.getLoanId(), loan);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Removes a {@code loan} object from the LoanRecords."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loan Loan object to be removed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void removeLoan(Loan loan) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        loansMap.remove(loan.getLoanId());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns the number of loans in {@code loansMap}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Used to find the next LoanId in LoanIdGenerator."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Precondition: Loans will never be deleted or removed from storage."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Number of loans in LoanRecords."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getLoanCount() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loansMap.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Replaces an existing {@code Loan} object in the loansMap with an edited one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param existingLoan Existing {@code Loan} object to be replaced."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param updatedLoan Updated {@code Loan} object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void updateLoan(Loan existingLoan, Loan updatedLoan) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loansMap.remove(existingLoan.getLoanId());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        addLoan(updatedLoan);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || (other instanceof LoanRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 loansMap.equals(((LoanRecords) other).loansMap));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 76,
      "Cronyxx": 12,
      "shiyao821": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.ReversibleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns the user prefs\u0027 User settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    UserSettings getUserSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the user prefs\u0027 User settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    void setUserSettings(UserSettings userSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Catalog"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getCatalogFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the user prefs\u0027 catalog file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setCatalogFilePath(Path catalogFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /** Returns the Catalog */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    ReadOnlyCatalog getCatalog();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the user prefs\u0027 loan records file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void setCatalog(ReadOnlyCatalog catalog);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the catalog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    boolean hasBook(Book book);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if a book with the same serial number as {@code bookSn} exists in the catalog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    boolean hasBook(SerialNumber bookSn);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the user prefs\u0027 catalog file path."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void deleteBook(Book target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void addBook(Book book);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Book getBook(SerialNumber bookSn);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void setBook(Book target, Book editedBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void resetFilteredBookList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void updateFilteredBookList(Predicate\u003cBook\u003e predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Model excludeBookBeingReplaced(Book toBeReplaced);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getOverdueBooks();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LoanRecords"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void setLoanRecordsFilePath(Path loanRecordsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns the LoanRecords."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    ReadOnlyLoanRecords getLoanRecords();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Adds a new Loan to LoanRecords."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void addLoan(Loan loan);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Removes a Loan from LoanRecords."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    void removeLoan(Loan loan);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void updateLoan(Loan existingLoan, Loan returnedLoan);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    int payFines(int amountInCents);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BorrowerRecords"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the user prefs\u0027 borrower records file path."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Sets the user prefs\u0027 address borrower records path."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void setBorrowerRecordsFilePath(Path borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /** Returns the BorrowerRecords*/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    ReadOnlyBorrowerRecords getBorrowerRecords();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * If in serve mode, returns borrower that is being served."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Else, returns empty optional."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Borrower that is being Served."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    Borrower getServingBorrower();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if Liberry is currently in Serve mode, false otherwise."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if Liberry is currently in Serve mode."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    boolean isServeMode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    boolean hasBorrower(Borrower borrower);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void registerBorrower(Borrower borrower);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void resetGenerator();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void setServingBorrower(BorrowerId borrowerId);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void setServingBorrower(Borrower borrower);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void servingBorrowerNewLoan(Loan newLoan);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    void servingBorrowerRemoveLoan(Loan removeLoan);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void servingBorrowerReturnLoan(Loan loanToBeReturned, Loan returnedLoan);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    void servingBorrowerUnreturnLoan(Loan loanToBeUnreturned, Loan unturnedLoan);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void servingBorrowerRenewLoan(Loan loanToBeRenewed, Loan renewedLoan);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    void servingBorrowerUnrenewLoan(Loan loanToBeUnrenewed, Loan unrenewLoan);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    boolean hasBorrowerId(BorrowerId borrowerId);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void exitsServeMode();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    List\u003cBook\u003e getBorrowerBooks();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    Borrower getBorrowerFromId(BorrowerId borrowerId);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void setBorrower(Borrower borrowerToEdit, Borrower editedBorrower);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    boolean hasDuplicatedBorrower(Borrower editedBorrower);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void unregisterBorrower(Borrower toUnregister);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandHistory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Checks whether there is {@code Command} to undo."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return true if there is {@code Command} to undo, else false."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    boolean canUndoCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Checks whether there is {@code Command} to redo."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return true if there is {@code Command} to redo, else false."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    boolean canRedoCommand();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Commits {@code ReversibleCommand} to the {@code CommandHistory}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    void commitCommand(ReversibleCommand command);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Undoes the most recent committed {@code ReversibleCommand}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    CommandResult undoCommand() throws CommandException;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Redoes the most recent undone {@code ReversibleCommand}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    CommandResult redoCommand() throws CommandException;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 25,
      "hoholyin": 12,
      "Cronyxx": 54,
      "seeziyang": 34,
      "-": 65,
      "shiyao821": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.ReversibleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerIdGenerator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.exceptions.NotInServeModeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanIdGenerator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Represents the in-memory model of the Library data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final LoanRecords loanRecords;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final Catalog catalog;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final BorrowerRecords borrowerRecords;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final FilteredList\u003cBook\u003e filteredBooks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Optional\u003cBorrower\u003e servingBorrower;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Initializes a ModelManager with the given catalog, loan records, borrower records and userPrefs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ModelManager(ReadOnlyCatalog catalog,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        ReadOnlyLoanRecords loanRecords,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        ReadOnlyBorrowerRecords borrowerRecords,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireAllNonNull(userPrefs, loanRecords, catalog, borrowerRecords);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        logger.fine(\"Initializing with catalog: \" + catalog + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // testing loan records"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loanRecords \u003d new LoanRecords(loanRecords);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.setLoanRecords(this.loanRecords);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // testing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.catalog \u003d new Catalog(catalog);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog((Catalog) catalog);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // testing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.borrowerRecords \u003d new BorrowerRecords(borrowerRecords);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        filteredBooks \u003d new FilteredList\u003c\u003e(this.catalog.getBookList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.servingBorrower \u003d Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this(new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return userPrefs.getUserSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(userSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        userPrefs.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return userPrefs.getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setLoanRecordsFilePath(Path loanRecordsFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(loanRecordsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        userPrefs.setLoanRecordsFilePath(loanRecordsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return userPrefs.getCatalogFilePath();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setCatalogFilePath(Path catalogFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(catalogFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        userPrefs.setCatalogFilePath(catalogFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return userPrefs.getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setBorrowerRecordsFilePath(Path borrowerRecordsFilePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        userPrefs.setBorrowerRecordsFilePath(borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ReadOnlyLoanRecords getLoanRecords() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecords;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a \u003ccode\u003eLoan\u003c/code\u003e object to the loan records."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param loan \u003ccode\u003eLoan\u003c/code\u003e object to be added."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(loan);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loanRecords.addLoan(loan);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Removes a \u003ccode\u003eLoan\u003c/code\u003e object from the loan records."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loan \u003ccode\u003eLoan\u003c/code\u003e object to be removed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void removeLoan(Loan loan) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(loan);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        loanRecords.removeLoan(loan);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Replaces an existing {@code Loan} object in LoanRecords with an edited one."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param existingLoan Existing {@code Loan} object to be replaced."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param updatedLoan Updated {@code Loan} object."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void updateLoan(Loan existingLoan, Loan updatedLoan) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireAllNonNull(existingLoan, updatedLoan);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.updateLoan(existingLoan, updatedLoan);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Pays the outstanding fines of the servingBorrower."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param amountInCents Amount borrower is paying in cents."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Leftover amount in cents, i.e., change to be given."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int payFines(int amountInCents) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower serving \u003d getServingBorrower();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList updatedReturnedLoanList \u003d new LoanList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int change \u003d payLoansFine(serving.getReturnedLoanList(), updatedReturnedLoanList, amountInCents);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower updatedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getBorrowerId(), serving.getCurrentLoanList(), updatedReturnedLoanList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.setBorrower(serving, updatedBorrower);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        setServingBorrower(updatedBorrower);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return change;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Private helper method to help iterate through each Loan in the returnedLoanList and then to update each Loan"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * object with the maximum possible amount paid."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns the leftover amount, i.e., the change."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private int payLoansFine(LoanList origReturnedLoanList, LoanList updatedReturnedLoanList, int amountInCents) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int payingAmount \u003d amountInCents;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        for (Loan loan : origReturnedLoanList) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            int remainingFineAmount \u003d loan.getRemainingFineAmount();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            if (payingAmount \u003d\u003d 0 || remainingFineAmount \u003d\u003d 0) { // no payingAmount left or no remainingFine to pay"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                updatedReturnedLoanList.add(loan); // just add to new copy"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                Loan updatedLoan;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                if (payingAmount \u003e\u003d remainingFineAmount) { // can fully pay off this fine"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    updatedLoan \u003d loan.payFine(remainingFineAmount);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    payingAmount -\u003d remainingFineAmount;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    updatedLoan \u003d loan.payFine(payingAmount);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    payingAmount \u003d 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                updatedReturnedLoanList.add(updatedLoan);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                updateLoan(loan, updatedLoan);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return payingAmount;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Catalog \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setCatalog(ReadOnlyCatalog catalog) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.catalog.resetData(catalog);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ReadOnlyCatalog getCatalog() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog.hasBook(book);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean hasBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(bookSn);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return catalog.checkIfSerialNumberExists(bookSn);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.removeBook(target);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(book);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book getBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return catalog.getBook(bookSn);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.setBook(target, editedBook);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a list of overdue books in the catalog."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an \u003ccode\u003eObservableList\u003c/code\u003e of overdue books."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getOverdueBooks() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog.getOverdueBooks();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return filteredBooks;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void resetFilteredBookList() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        filteredBooks.setPredicate(x -\u003e true);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Model excludeBookBeingReplaced(Book toBeReplaced) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog tempCatalog \u003d new Catalog(this.getCatalog());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        tempCatalog.removeBook(toBeReplaced);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new ModelManager(tempCatalog, this.getLoanRecords(), this.getBorrowerRecords(), this.getUserPrefs());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BorrowerRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ReadOnlyBorrowerRecords getBorrowerRecords() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecords;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower getServingBorrower() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return servingBorrower.get();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean isServeMode() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return servingBorrower.isPresent();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean hasBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerRecords.hasBorrower(borrower);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void registerBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerRecords.addBorrower(borrower);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 loanRecords.equals(other.loanRecords)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 catalog.equals(other.catalog)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 borrowerRecords.equals(other.borrowerRecords);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void resetGenerator() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(borrowerRecords);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void setServingBorrower(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Borrower borrower \u003d borrowerRecords.getBorrowerFromId(borrowerId);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        setServingBorrower(borrower);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setServingBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.servingBorrower \u003d Optional.of(borrower);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a new {@code Loan} object to a new copy of servingBorrower and its currentLoanList."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * This method is called only when in Serve mode."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param newLoan New {@code Loan} object to be added."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerNewLoan(Loan newLoan) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower serving \u003d servingBorrower.get();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanAddedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getBorrowerId(), serving.getAddedCurrentLoanList(newLoan), serving.getReturnedLoanList());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.setBorrower(serving, loanAddedBorrower);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        setServingBorrower(loanAddedBorrower);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Removes a {@code Loan} object from a new copy of servingBorrower and its currentLoanList."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * This method is called only when in Serve mode."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param removeLoan {@code Loan} object to be removed."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void servingBorrowerRemoveLoan(Loan removeLoan) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Borrower serving \u003d servingBorrower.get();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Borrower loanRemovedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                serving.getBorrowerId(), serving.getRemovedCurrentLoanList(removeLoan), serving.getReturnedLoanList());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        borrowerRecords.setBorrower(serving, loanRemovedBorrower);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        setServingBorrower(loanRemovedBorrower);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Removes {@code loanToBeReturned} from {@code servingBorrower}\u0027s currentLoanList and"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * adds {@code returnedLoan} to its returnedLoanList."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * This method is called only when in Serve mode."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * {@code servingBorrower} should have the {@code loanToBeReturned} object in its currentLoanList."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanToBeReturned {@code Loan} object in servingBorrower\u0027s currentLoanList."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param returnedLoan Updated {@code Loan} object to be added to servingBorrower\u0027s returnedLoanList."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerReturnLoan(Loan loanToBeReturned, Loan returnedLoan) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower serving \u003d servingBorrower.get();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert serving.hasCurrentLoan(loanToBeReturned) : \"Borrower does not have the loan to be returned.\";"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanReturnedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getBorrowerId(), serving.getRemovedCurrentLoanList(loanToBeReturned),"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getAddedReturnedLoanList(returnedLoan));"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.setBorrower(serving, loanReturnedBorrower);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        setServingBorrower(loanReturnedBorrower);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Adds {@code loanToBeUnreturned} to {@code servingBorrower}\u0027s currentLoanList and"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * removes {@code unreturnedLoan} to its returnedLoanList."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * This method is called only when in Serve mode."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * {@code servingBorrower} should have the {@code loanToBeUnreturned} object in its currentLoanList."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanToBeUnreturned {@code Loan} object in servingBorrower\u0027s currentLoanList."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param unreturnedLoan Updated {@code Loan} object to be removed to servingBorrower\u0027s returnedLoanList."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void servingBorrowerUnreturnLoan(Loan loanToBeUnreturned, Loan unreturnedLoan) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Borrower serving \u003d servingBorrower.get();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assert !serving.hasCurrentLoan(unreturnedLoan) : \"Borrower has the loan to be unreturned.\";"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Borrower loanUnreturnedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                serving.getBorrowerId(), serving.getAddedCurrentLoanList(unreturnedLoan),"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                serving.getRemovedReturnedLoanList(loanToBeUnreturned));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        borrowerRecords.setBorrower(serving, loanUnreturnedBorrower);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        setServingBorrower(loanUnreturnedBorrower);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Replaces the {@code loanToBeRenewed} in {@code servingBorrower}\u0027s currentLoanList"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * with {@code renewedLoan}."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * This method is called only when in Serve mode."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * {@code servingBorrower} should have the {@code loanToBeReturned} object in its currentLoanList."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanToBeRenewed {@code Loan} object in servingBorrower\u0027s currentLoanList."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param renewedLoan Updated {@code Loan} object with dueDate extended."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerRenewLoan(Loan loanToBeRenewed, Loan renewedLoan) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower serving \u003d servingBorrower.get();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert serving.hasCurrentLoan(loanToBeRenewed) : \"Borrower does not have the loan to be returned.\";"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanRenewedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getBorrowerId(), serving.getReplacedCurrentLoanList(loanToBeRenewed, renewedLoan),"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getReturnedLoanList());"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.setBorrower(serving, loanRenewedBorrower);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        setServingBorrower(loanRenewedBorrower);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Replaces the {@code loanToBeUnrenewed} in {@code servingBorrower}\u0027s currentLoanList"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * with {@code unrenewedLoan}."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * This method is called only when in Serve mode."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * {@code servingBorrower} should have the {@code loanToBeUnrenewed} object in its currentLoanList."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanToBeUnrenewed {@code Loan} object in servingBorrower\u0027s currentLoanList."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param unrenewedLoan updated {@code Loan} object with dueDate returned to previous state."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void servingBorrowerUnrenewLoan(Loan loanToBeUnrenewed, Loan unrenewedLoan) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Borrower serving \u003d servingBorrower.get();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assert serving.hasCurrentLoan(loanToBeUnrenewed) : \"Borrower does not have the loan to be returned.\";"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Borrower loanRenewedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                serving.getBorrowerId(), serving.getReplacedCurrentLoanList(loanToBeUnrenewed, unrenewedLoan),"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                serving.getReturnedLoanList());"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        borrowerRecords.setBorrower(serving, loanRenewedBorrower);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        setServingBorrower(loanRenewedBorrower);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean hasBorrowerId(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerRecords.checkIfBorrowerIdExists(borrowerId);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void exitsServeMode() {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.servingBorrower \u003d Optional.empty();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public List\u003cBook\u003e getBorrowerBooks() {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (servingBorrower.get().getCurrentLoanList().isEmpty()) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ArrayList\u003cLoan\u003e loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        servingBorrower.get()"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .getCurrentLoanList()"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .forEach(loan -\u003e loans.add(loan));"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return loans.stream()"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .map(loan -\u003e loan.getBookSerialNumber())"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .map(sn -\u003e catalog.getBook(sn))"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower getBorrowerFromId(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerRecords.getBorrowerFromId(borrowerId);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void setBorrower(Borrower borrowerToEdit, Borrower editedBorrower) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerRecords.removeBorrower(borrowerToEdit);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerRecords.addBorrower(editedBorrower);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean hasDuplicatedBorrower(Borrower editedBorrower) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerRecords.hasDuplicateBorrower(editedBorrower);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void unregisterBorrower(Borrower toUnregister) {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerRecords.removeBorrower(toUnregister);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandHistory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean canUndoCommand() {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandHistory.canUndo();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean canRedoCommand() {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandHistory.canRedo();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void commitCommand(ReversibleCommand command) {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandHistory.commit(command);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult undoCommand() throws CommandException {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandHistory.undo(this);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult redoCommand() throws CommandException {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return commandHistory.redo(this);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 70,
      "hoholyin": 65,
      "seeziyang": 164,
      "Cronyxx": 129,
      "-": 116,
      "shiyao821": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBorrowerRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface ReadOnlyBorrowerRecords {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    ObservableList\u003cBorrower\u003e getBorrowerList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 2,
      "shiyao821": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCatalog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public interface ReadOnlyCatalog {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getBookList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLoanRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface ReadOnlyLoanRecords {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Collection\u003cLoan\u003e getLoanCollection();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    HashMap\u003cLoanId, Loan\u003e getLoansMap();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "seeziyang": 7,
      "shiyao821": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    UserSettings getUserSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Path getCatalogFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "Cronyxx": 3,
      "-": 16,
      "shiyao821": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private UserSettings userSettings \u003d new UserSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Path loanRecordsFilePath \u003d Paths.get(\"data\", \"loanrecords.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Path catalogFilePath \u003d Paths.get(\"data\", \"catalog.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Path borrowerRecordsFilePath \u003d Paths.get(\"data\", \"borrowerrecords.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        setUserSettings(newUserPrefs.getUserSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        setLoanRecordsFilePath(newUserPrefs.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        setCatalogFilePath(newUserPrefs.getCatalogFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        setBorrowerRecordsFilePath(newUserPrefs.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return userSettings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(userSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.userSettings \u003d userSettings;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecordsFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setLoanRecordsFilePath(Path loanRecordsFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(loanRecordsFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loanRecordsFilePath \u003d loanRecordsFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return catalogFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setCatalogFilePath(Path catalogFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(catalogFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.catalogFilePath \u003d catalogFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecordsFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setBorrowerRecordsFilePath(Path borrowerRecordsFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.borrowerRecordsFilePath \u003d borrowerRecordsFilePath;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 userSettings.equals(o.userSettings)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 loanRecordsFilePath.equals(o.loanRecordsFilePath)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 catalogFilePath.equals(o.catalogFilePath)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 borrowerRecordsFilePath.equals(o.borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Objects.hash(guiSettings, userSettings, catalogFilePath, loanRecordsFilePath, borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        sb.append(\"\\nUser Settings : \" + userSettings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        sb.append(\"\\nLocal LoanRecords data file location : \" + loanRecordsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        sb.append(\"\\nLocal Catalog data file location : \" + catalogFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        sb.append(\"\\nLocal BorrowerRecords data file location : \" + borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "Cronyxx": 14,
      "-": 77,
      "shiyao821": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Author.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Author {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Author\u0027s name must start with an alphanumeric letter,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\p{Punct} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructs an {@code Author}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param author an Author\u0027s name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Author(String author) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidAuthor(author), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        value \u003d author;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static boolean isValidAuthor(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof Author // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 value.equals(((Author) other).value)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 39,
      "shiyao821": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Book.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Book in the Catalog."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Book implements Comparable\u003cBook\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Loan NULL_LOAN \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final SerialNumber serialNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Set\u003cGenre\u003e genres \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Optional\u003cLoan\u003e loan;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final LoanList loanHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Book(Title title, SerialNumber serialNumber, Author author, Loan loan, Set\u003cGenre\u003e genres) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this(title, serialNumber, author, loan, genres, new LoanList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructor when loading the file from history or when loading sample data/tests."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Book(Title title, SerialNumber serialNumber, Author author,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                Loan loan, Set\u003cGenre\u003e genres, LoanList loanHistory) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireAllNonNull(title, serialNumber, author, genres);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.genres.addAll(genres);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.loan \u003d Optional.ofNullable(loan);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.loanHistory \u003d loanHistory;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public SerialNumber getSerialNumber() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns an immutable genre set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Set\u003cGenre\u003e getGenres() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Collections.unmodifiableSet(genres);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns an optional of Loan object. If book is not loaned, Optional will be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Optional of Loan object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Optional\u003cLoan\u003e getLoan() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return loan;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public LoanList getLoanHistory() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return loanHistory;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if book is currently on loan."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if book is currently on loan."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isCurrentlyLoanedOut() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this.loan.isPresent();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Check if a book is currently overdue."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if book is on loan and overdue."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (this.loan.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            //a book without loan cannot be overdue"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return this.loan.get().getDueDate().compareTo(DateUtil.getTodayDate()) \u003c 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Marks a book as loaned out with the given {@code Loan}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param loan {@code Loan} object associated with the loan."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a new {@code Book} object marked as loaned out."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Book loanOut(Loan loan) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert !this.isCurrentlyLoanedOut() : \"Book is already on loan.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getTitle(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getSerialNumber(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getAuthor(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                loan,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getGenres(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getLoanHistory());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Marks a book as returned."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a new {@code Book} object marked as returned."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Book returnBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert this.isCurrentlyLoanedOut() : \"Book is not on loan.\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getTitle(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getSerialNumber(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getAuthor(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                NULL_LOAN,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getGenres(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getLoanHistory());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Updates the loan history of a book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param loan {@code Loan} to be added into the history."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a new {@code Book} with the added loan history."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Book updateLoanHistory(Loan loan) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanList newHistory \u003d new LoanList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.getLoanHistory().forEach(currentLoan -\u003e newHistory.add(currentLoan));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        newHistory.add(loan);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getTitle(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getSerialNumber(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getAuthor(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getLoan().orElse(NULL_LOAN),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                this.getGenres(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                newHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int compareTo(Book b) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this.getSerialNumber().compareTo(b.getSerialNumber());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if a book is same, regardless of serial number."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param b Book to be checked against"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if both books are the same, even if they are different copies"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isSameBook(Object b) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (b \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!(b instanceof Book)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book otherBook \u003d (Book) b;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //same book different copy"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return otherBook.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getGenres().equals(getGenres());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if both books have the same identity and data fields."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * This defines a stronger notion of equality between two books."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!(other instanceof Book)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book otherBook \u003d (Book) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //strictly same book, ignoring loan"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return otherBook.getSerialNumber().equals(getSerialNumber())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getGenres().equals(getGenres());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Objects.hash(title, serialNumber, author, genres);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Method to return the full string representation of the book, if required."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Full string representation of book."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public String toFullString() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\", Serial Number: \")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(getSerialNumber())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\", Author: \")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(getAuthor());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!getGenres().isEmpty()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            builder.append(\", Genres: \");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            getGenres().forEach(genre -\u003e builder.append(genre + \" \"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns display string of Book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return display string of book."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        builder.append(\"[\" + getSerialNumber() + \"] \")"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(\"\\\"\" + getTitle() + \"\\\"\")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(\" by \")"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(getAuthor());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 239,
      "seeziyang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.model.book.Author.isValidAuthor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.model.book.SerialNumber.isValidSerialNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.model.book.Title.isValidTitle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.model.genre.Genre.isValidGenreName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.logic.parser.Flag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Tests that a {@code Book} matches all of the conditions given."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Increases performance by returning whenever a condition is not met"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class BookPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String author;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String serialNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Set\u003cGenre\u003e genres;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Flag loanState;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private int displayLimit \u003d -1; // default for show all"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.author \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.serialNumber \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genres \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loanState \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return title !\u003d null || author !\u003d null || serialNumber !\u003d null || genres !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || loanState !\u003d null || displayLimit !\u003d -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (title !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 !Arrays.stream(title.split(\" \"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPartialWordIgnoreCase(book.getTitle().value, keyword))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (author !\u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 !Arrays.stream(author.split(\" \"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsPartialWordIgnoreCase(book.getAuthor().value, keyword))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (serialNumber !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 !Stream.of(serialNumber)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getSerialNumber().value, keyword))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (genres !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 !genres.stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .allMatch(keyword -\u003e book.getGenres().contains(keyword))) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if ((loanState \u003d\u003d Flag.AVAILABLE \u0026\u0026 book.isCurrentlyLoanedOut())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || (loanState \u003d\u003d Flag.LOANED \u0026\u0026 !book.isCurrentlyLoanedOut())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || (loanState \u003d\u003d Flag.OVERDUE \u0026\u0026 !book.isOverdue())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (displayLimit \u003e 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            displayLimit--;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return displayLimit \u003d\u003d -1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add a title predicate to the book predicate"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setTitle(String title) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidTitle(title), Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add an author predicate to the book predicate"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param author"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setAuthor(String author) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidAuthor(author), Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add a serial number predicate to the book predicate"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param serialNumber"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidSerialNumber(serialNumber), SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add genre predicates to the book predicate"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param genres in the form of varargs"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setGenres(String... genres) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (String genre : genres) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            String formattedGenre \u003d genre.trim().toUpperCase();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            checkArgument(isValidGenreName(formattedGenre), Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genres \u003d SampleDataUtil.getGenreSet(genres);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add genre predicate to the book predicate"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param genres in the form of Collections.Set"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setGenres(Set\u003cGenre\u003e genres) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (genres.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genres \u003d genres;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add loan state predicate to the book predicate"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param loanState"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setLoanState(Flag loanState) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loanState \u003d loanState;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setDisplayLimit(int displayLimit) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assert(displayLimit \u003e 0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.displayLimit \u003d displayLimit;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || (other instanceof BookPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (title \u003d\u003d null || title.equals(((BookPredicate) other).title)) // state check"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (author \u003d\u003d null || author.equals(((BookPredicate) other).author)) // state check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (serialNumber \u003d\u003d null || serialNumber.equals(((BookPredicate) other).serialNumber)) // state check"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (genres \u003d\u003d null || genres.equals(((BookPredicate) other).genres)) // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (loanState \u003d\u003d null || loanState.equals(((BookPredicate) other).loanState))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 displayLimit \u003d\u003d ((BookPredicate) other).displayLimit);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/SerialNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Book\u0027s serial number in the catalog."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSerialNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class SerialNumber implements Comparable\u003cSerialNumber\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            \"Serial numbers should start with prefix \\\"B\\\", followed by 5 digits. They should be unique.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"B\\\\d{5}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructs a {@code SerialNumber}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param serialNumber A valid serial number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public SerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        checkArgument(isValidSerialNumber(serialNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        value \u003d serialNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a given string is a valid serial number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static boolean isValidSerialNumber(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Converts a serial number to an integer (for comparing)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an integer represented by the given serial number."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int serialNumberToInt() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert this.value.length() \u003e 0 : \"Invalid serial number\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Integer.parseInt(this.toString().substring(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof SerialNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 value.equals(((SerialNumber) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int compareTo(SerialNumber b) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Integer.compare(this.serialNumberToInt(), b.serialNumberToInt());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 31,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/SerialNumberGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Serial Number generator when user does not input a preferred serial number."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class SerialNumberGenerator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final int SERIAL_NUMBER_LENGTH \u003d 5; //excluding prefix \u0027B\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String PREFIX \u003d \"B\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static int currentSerialNumberIndex \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static Catalog catalog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Populates the serial number tree from a catalog."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param catalog catalog to retrieve books from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void setCatalog(Catalog catalog) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.catalog \u003d catalog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentSerialNumberIndex \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Generates a new serial number based on the current serial number index."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static SerialNumber generateSerialNumber() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentSerialNumberIndex++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String padding \u003d getPadding(currentSerialNumberIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn \u003d new SerialNumber(PREFIX + padding + currentSerialNumberIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        while (catalog.checkIfSerialNumberExists(sn)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentSerialNumberIndex++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            padding \u003d getPadding(currentSerialNumberIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            sn \u003d new SerialNumber(PREFIX + padding + currentSerialNumberIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return sn;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static String getPadding(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String stringRepresentation \u003d Integer.toString(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        int paddingLength \u003d SERIAL_NUMBER_LENGTH - stringRepresentation.length();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return IntStream.rangeClosed(1, paddingLength)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .mapToObj(x -\u003e \"0\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .reduce(\"\", (a, b) -\u003e a + b);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 48,
      "seeziyang": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            \"Titles should start with alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\p{Punct} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 14,
      "-": 39,
      "shiyao821": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/UniqueBookList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A list of books that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A book is considered unique by comparing using {@code Book#equals(Book)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * books uses Book#equals(Book) for equality so as to ensure that the book being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * unique in terms of identity in the UniqueBookList. However, the removal of a book uses Book#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * as to ensure that the book with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class UniqueBookList implements Iterable\u003cBook\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final HashMap\u003cSerialNumber, Book\u003e booksMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean contains(Book toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if the list contains a book with the same serial number as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean containsSerialNumber(SerialNumber toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return booksMap.containsKey(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a book to the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book must not already exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void add(Book toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.put(toAdd.getSerialNumber(), toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book getBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return booksMap.get(bookSn);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Replaces the book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!target.equals(editedBook) \u0026\u0026 contains(editedBook)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        internalList.set(index, editedBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.remove(target.getSerialNumber());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.put(editedBook.getSerialNumber(), editedBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Removes the equivalent book from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void remove(Book toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.remove(toRemove.getSerialNumber());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks(UniqueBookList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        replacement.forEach(book -\u003e booksMap.put(book.getSerialNumber(), book));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireAllNonNull(books);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!booksAreUnique(books)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        internalList.setAll(books);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.clear();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        books.forEach(book -\u003e booksMap.put(book.getSerialNumber(), book));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Iterator\u003cBook\u003e iterator() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof UniqueBookList // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookList) other).internalList)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                        \u0026\u0026 booksMap.equals(((UniqueBookList) other).booksMap));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if {@code books} contains only unique books."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean booksAreUnique(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size() - 1; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c books.size(); j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                if (books.get(i).equals(books.get(j))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 58,
      "seeziyang": 16,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/BookNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BookNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "seeziyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/DuplicateBookException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the operation will result in duplicate Books (Books are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * identity fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class DuplicateBookException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public DuplicateBookException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        super(\"Operation would result in duplicate books\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 9,
      "seeziyang": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/Borrower.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Represents a Borrower."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class Borrower {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final BorrowerId borrowerId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LoanList currentLoanList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LoanList returnedLoanList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower(Name name, Phone phone, Email email) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this(name, phone, email, BorrowerIdGenerator.generateBorrowerId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * only for test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param name name of borrower"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param phone phone of borrower"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param email email of borrower"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param borrowerId is manually input for testing purpose."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower(Name name, Phone phone, Email email, BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this(name, phone, email, borrowerId, new LoanList(), new LoanList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Borrower(Name name, Phone phone, Email email, BorrowerId borrowerId,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanList currentLoanList, LoanList returnedLoanList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.currentLoanList \u003d currentLoanList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.returnedLoanList \u003d returnedLoanList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerId getBorrowerId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getCurrentLoanList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getReturnedLoanList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return returnedLoanList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a new Loan object to a new copy of the currentLoanList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param newLoan New {@code Loan} object to be added to currentLoanList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of currentLoanList with new Loan object added in to it."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getAddedCurrentLoanList(Loan newLoan) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList.addToNewCopy(newLoan);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Removes a Loan object from a new copy of the currentLoanList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param returnedLoan {@code Loan} object to be removed from the currentLoanList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of the currentLoanList with the returned Loan object removed from it."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getRemovedCurrentLoanList(Loan returnedLoan) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList.removeFromNewCopy(returnedLoan);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Replaces a a Loan object in a new copy of the currentLoanList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanToBeRenewed {@code Loan} object to be removed from the currentLoanList."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param renewedLoan A updated {@code Loan} object replacing the removed one."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of the currentLoanList with the Loan object replaced."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getReplacedCurrentLoanList(Loan loanToBeRenewed, Loan renewedLoan) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList.replaceInNewCopy(loanToBeRenewed, renewedLoan);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a returned Loan object to a new copy of the returnedLoanList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param returnedLoan {@code Loan} object to be added to returnedLoanList."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of currentLoanList with returned Loan object added in to it."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getAddedReturnedLoanList(Loan returnedLoan) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return returnedLoanList.addToNewCopy(returnedLoan);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Removes a returned Loan object to a new copy of the returnedLoanList."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param returnedLoan {@code Loan} object to be removed to returnedLoanList."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return A new copy of currentLoanList with returned Loan object removed it."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public LoanList getRemovedReturnedLoanList(Loan returnedLoan) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return returnedLoanList.removeFromNewCopy(returnedLoan);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if Borrower currently loans a Book represented by the given Loan object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean hasCurrentLoan(Loan loan) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList.contains(loan);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Gets the total outstanding fine amount from Borrower\u0027s returnedLoanList."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Total remaining fine amount in cents/"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getOutstandingFineAmount() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return returnedLoanList.calculateOutstandingFineAmount();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if Borrower has unpaid fines."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean hasOutstandingFine() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return getOutstandingFineAmount() \u003e 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Returns true if both borrowers have the same borrower_id."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean isSameBorrower(Borrower otherBorrower) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (otherBorrower \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return otherBorrower !\u003d null"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 otherBorrower.getBorrowerId().equals(getBorrowerId());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!(other instanceof Borrower)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower otherBorrower \u003d (Borrower) other;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return otherBorrower.getName().equals(getName())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 otherBorrower.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 otherBorrower.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 otherBorrower.getBorrowerId().equals(getBorrowerId());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Objects.hash(name, phone, email, borrowerId, currentLoanList, returnedLoanList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Method to return the full string representation of the borrower, if required."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return Full string representation of borrower."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public String toFullString() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\", Phone: \")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\", Email: \")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\", Borrower ID: \")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(getBorrowerId());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Returns display string of Borrower."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return display string of borrower."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        builder.append(\"[\" + getBorrowerId() + \"] \")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(getName());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 95,
      "hoholyin": 1,
      "seeziyang": 95,
      "Cronyxx": 10,
      "shiyao821": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/BorrowerId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Represents a Borrower\u0027s ID in borrowers records"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class BorrowerId {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Borrower\u0027s ID should start with prefix \\\"K\\\", \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"followed by 4 digits. They should be unique.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"K\\\\d{4}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerId(String borrowerId) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(borrowerId);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        checkArgument(isValidBorrowerId(borrowerId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        value \u003d borrowerId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static boolean isValidBorrowerId(String borrowerId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerId.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || (other instanceof BorrowerId // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 value.equals(((BorrowerId) other).value)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 22,
      "hoholyin": 1,
      "seeziyang": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/BorrowerIdGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Borrower ID generator that generates a borrower ID when a new borrower is registered."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerIdGenerator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final int BORROWER_ID_LENGTH \u003d 4; //excluding prefix \u0027K\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String PREFIX \u003d \"K\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static int currentBorrowerIdIndex \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static BorrowerRecords borrowers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static void setBorrowers(BorrowerRecords borrowers) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.borrowers \u003d borrowers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBorrowerIdIndex \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Generates a new borrower ID based on the current borrower ID index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static BorrowerId generateBorrowerId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        currentBorrowerIdIndex++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String padding \u003d getPadding(currentBorrowerIdIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId id \u003d new BorrowerId(PREFIX + padding + currentBorrowerIdIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        while (borrowerIdExists(id)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            currentBorrowerIdIndex++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            id \u003d new BorrowerId(PREFIX + padding + currentBorrowerIdIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Checks if a certain borrower ID is already in the borrowers record."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static boolean borrowerIdExists(BorrowerId id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowers.checkIfBorrowerIdExists(id);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static String getPadding(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String stringRepresentation \u003d Integer.toString(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        int paddingLength \u003d BORROWER_ID_LENGTH - stringRepresentation.length();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return IntStream.rangeClosed(1, paddingLength)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .mapToObj(x -\u003e \"0\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .reduce(\"\", (a, b) -\u003e a + b);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 42,
      "hoholyin": 7,
      "seeziyang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Represents a Borrower\u0027s email in the Borrowers Record."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Represents a Borrower\u0027s name in the Borrowers Record."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 8,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/exceptions/BorrowerNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the operation is unable to find the specified borrower."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class BorrowerNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/exceptions/DuplicateBorrowerException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the operation will result in duplicate Borrowers (Borrowers are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class DuplicateBorrowerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public DuplicateBorrowerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        super(\"Operation would result in duplicate borrowers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/NotInServeModeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the Serve mode operation that is supposed to be carried out cannot be carried out"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * as the model is not in Serve mode."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class NotInServeModeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public NotInServeModeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        super(\"Not in Serve mode!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/genre/Genre.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.genre;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Genre in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidGenreName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Genre {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Genre names should be alphanumeric \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"\u0026 hyphenated if needed\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[[A-Z]\\\\d][\\\\-[A-Z]\\\\d]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public final String genreName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructs a {@code Genre}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param genreName A valid genre name - will be converted to uppercase"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Genre(String genreName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(genreName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String uppercaseGenreName \u003d genreName.toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidGenreName(uppercaseGenreName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genreName \u003d uppercaseGenreName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a given string is a valid genre name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static boolean isValidGenreName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof Genre // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 genreName.equals(((Genre) other).genreName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return genreName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return \u0027[\u0027 + genreName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 6,
      "-": 35,
      "shiyao821": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/loan/Loan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Loan."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class Loan {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LoanId loanId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final SerialNumber bookSerialNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final BorrowerId borrowerId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LocalDate dueDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LocalDate returnDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final int renewCount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final int remainingFineAmount; // in cents"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final int paidFineAmount; // in cents"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan(LoanId loanId, SerialNumber bookSerialNumber, BorrowerId borrowerId,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                LocalDate startDate, LocalDate dueDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this(loanId, bookSerialNumber, borrowerId, startDate, dueDate, null, 0, 0, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // returnDate can be null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan(LoanId loanId, SerialNumber bookSerialNumber, BorrowerId borrowerId,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                LocalDate startDate, LocalDate dueDate, LocalDate returnDate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                int renewCount, int remainingFineAmount, int paidFineAmount) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireAllNonNull(loanId, bookSerialNumber, borrowerId, startDate, dueDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loanId \u003d loanId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.bookSerialNumber \u003d bookSerialNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.returnDate \u003d returnDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.renewCount \u003d renewCount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.remainingFineAmount \u003d remainingFineAmount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.paidFineAmount \u003d paidFineAmount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanId getLoanId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public SerialNumber getBookSerialNumber() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return bookSerialNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerId getBorrowerId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return borrowerId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LocalDate getDueDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // may return null if book is not returned yet"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LocalDate getReturnDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return returnDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getRenewCount() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return renewCount;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getRemainingFineAmount() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return remainingFineAmount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getPaidFineAmount() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return paidFineAmount;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a new copy of the Loan object after its book is returned."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param returnDate Date which loan is returned."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param fineIncurred Fine incurred for returning the loaned book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of the Loan object with returnDate and remainingFineAmount updated."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan returnLoan(LocalDate returnDate, int fineIncurred) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Loan(this.loanId, this.bookSerialNumber, this.borrowerId, this.startDate, this.dueDate,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                returnDate, this.renewCount, fineIncurred, 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a new copy of the Loan object after it is renewed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param extendedDueDate New dueDate after being extended."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of the Loan object with dueDate and renewCount updated."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan renewLoan(LocalDate extendedDueDate) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Loan(this.loanId, this.bookSerialNumber, this.borrowerId, this.startDate, extendedDueDate,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                this.returnDate, this.renewCount + 1, this.remainingFineAmount, this.paidFineAmount);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a new copy of the loan object after any amount of its remaining fine is paid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param paidAmount Amount given to pay the remainingFineAmount."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of the Loan object with remainingFineAmount and paidFineAmount updated."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan payFine(int paidAmount) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Loan(this.loanId, this.bookSerialNumber, this.borrowerId, this.startDate, this.dueDate,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                this.returnDate, this.renewCount, this.remainingFineAmount - paidAmount,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                this.paidFineAmount + paidAmount);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(other instanceof Loan)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan otherLoan \u003d (Loan) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return otherLoan.getLoanId().equals(loanId)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getBookSerialNumber().equals(bookSerialNumber)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getBorrowerId().equals(borrowerId)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getStartDate().equals(startDate)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getDueDate().equals(dueDate)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 (otherLoan.getReturnDate() \u003d\u003d null || otherLoan.getReturnDate().equals(returnDate))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getRenewCount() \u003d\u003d renewCount"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getRemainingFineAmount() \u003d\u003d remainingFineAmount"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getPaidFineAmount() \u003d\u003d paidFineAmount;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return Objects.hash(loanId, bookSerialNumber, borrowerId, startDate, dueDate, returnDate,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                renewCount, remainingFineAmount, paidFineAmount);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        builder.append(\"Loan ID: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(loanId)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\" Book Serial Number: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(bookSerialNumber)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\" Borrower ID: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(borrowerId)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\" Loaned from \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(startDate)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\" to \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(dueDate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (returnDate !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            builder.append(\". Returned on \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    .append(returnDate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "seeziyang": 153,
      "shiyao821": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/loan/LoanId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Represents a loan\u0027s ID in LoanRecords."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@Link #isValidLoanId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            \"Loan ID should start with prefix \\\"L\\\", followed by 6 digits. They should be unique.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String PREFIX \u003d \"L\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d PREFIX + \"\\\\d{6}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructs a {@code LoanId}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanId A valid string of loan ID."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanId(String loanId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(loanId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        checkArgument(isValidLoanId(loanId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        value \u003d loanId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if the given string is a valid loan ID."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param test String to be tested."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if {@code test} is a valid loan ID."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static boolean isValidLoanId(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                || (other instanceof LoanId // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 value.equals(((LoanId) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/loan/LoanIdGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Loan ID generator that generates a {@code LoanId} when a new {@code Loan} is created."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanIdGenerator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final int LOAN_ID_LENGTH \u003d 6; // excluding prefix \u0027L\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String PREFIX \u003d LoanId.PREFIX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String LOAN_ID_FORMATTER \u003d PREFIX + \"%0\" + LOAN_ID_LENGTH + \"d\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static LoanRecords loanRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static void setLoanRecords(LoanRecords loanRecords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.loanRecords \u003d loanRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Generates a loan ID based on the current loan ID index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A unused {@code LoanId}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LoanId generateLoanId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int nextLoanIdDigits \u003d (loanRecords \u003d\u003d null ? 0 : loanRecords.getLoanCount()) + 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanId(String.format(LOAN_ID_FORMATTER, nextLoanIdDigits));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/loan/LoanList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * A list of {@code Loan} objects that represents the loans a borrower currently has."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanList implements Iterable\u003cLoan\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final ArrayList\u003cLoan\u003e loanList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanList(ArrayList\u003cLoan\u003e newList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loanList \u003d newList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a {@code Loan} object into the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan {@code Loan} object to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void add(Loan loan) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList.add(loan);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a {@code Loan} object into a copy of list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan {@code Loan} object to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new LoanList with the Loan object added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList addToNewCopy(Loan loan) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArrayList\u003cLoan\u003e newList \u003d new ArrayList\u003c\u003e(this.loanList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newList.add(loan);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanList(newList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns the number of {@code Loan} objects in the {@code LoanList}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if the {@code LoanList} is empty."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return loanList.isEmpty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean contains(Loan loan) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanList.contains(loan);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Removes a {@code Loan} object from a copy of the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan {@code Loan} object to be removed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new LoanList with the Loan object removed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList removeFromNewCopy(Loan loan) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArrayList\u003cLoan\u003e newList \u003d new ArrayList\u003c\u003e(this.loanList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newList.remove(loan);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanList(newList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Replaces a {@code Loan} object in a copy of the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * {@code currentLoanList} should contain {@code loanToBeReplaced}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanToBeReplaced {@code Loan} object to be removed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param replacingLoan Replacing {@code Loan} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new LoanList with the Loan object replaced."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList replaceInNewCopy(Loan loanToBeReplaced, Loan replacingLoan) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert loanList.contains(loanToBeReplaced) : \"loanList does not contain loanToBeReplaced!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArrayList\u003cLoan\u003e newList \u003d new ArrayList\u003c\u003e(this.loanList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newList.set(newList.indexOf(loanToBeReplaced), replacingLoan);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanList(newList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds up all the remaining fine of the loans."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Total remaining fine amount in cents."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int calculateOutstandingFineAmount() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int total \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        for (Loan loan : loanList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            total +\u003d loan.getRemainingFineAmount();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Iterator\u003cLoan\u003e iterator() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanList.iterator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(o instanceof LoanList)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList otherLoanList \u003d (LoanList) o;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this.loanList.equals(otherLoanList.loanList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 8,
      "seeziyang": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/usersettings/FineIncrement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Represents the default fine amount in cents of a overdue book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFineIncrement(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class FineIncrement {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \"Fine increment should be positive and should not exceed Integer.MAX_VALUE cents.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public final int fineIncrement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code FineIncrement}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param fineIncrement A valid fine increment in String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public FineIncrement(String fineIncrement) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(fineIncrement);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        checkArgument(isValidFineIncrement(fineIncrement), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.fineIncrement \u003d Integer.parseInt(fineIncrement);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code FineIncrement}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param fineIncrement A valid fine increment in integer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public FineIncrement(int fineIncrement) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.fineIncrement \u003d fineIncrement;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getFineIncrement() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return fineIncrement;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns true if a given string is a valid fine amount."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static boolean isValidFineIncrement(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return String.format(\"%d\", fineIncrement);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                || (other instanceof FineIncrement // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 fineIncrement \u003d\u003d (((FineIncrement) other).fineIncrement)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Integer.hashCode(fineIncrement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/usersettings/LoanPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Represents the default loan period of a book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLoanPeriod(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class LoanPeriod {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \"Loan period should be positive and should not exceed Integer.MAX_VALUE days.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public final int loanPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code LoanPeriod}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanPeriod A valid loan period in String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public LoanPeriod(String loanPeriod) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(loanPeriod);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        checkArgument(isValidLoanPeriod(loanPeriod), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanPeriod \u003d Integer.parseInt(loanPeriod);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code LoanPeriod}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanPeriod A valid loan period in integer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public LoanPeriod(int loanPeriod) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanPeriod \u003d loanPeriod;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getLoanPeriod() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return loanPeriod;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns true if a given string is a valid loan period."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static boolean isValidLoanPeriod(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return String.format(\"%d\", loanPeriod);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                || (other instanceof LoanPeriod // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 loanPeriod \u003d\u003d (((LoanPeriod) other).loanPeriod)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Integer.hashCode(loanPeriod);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/usersettings/MaxRenews.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Represents the default maximum renew count of a book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@Link #isValidMaxRenews(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class MaxRenews {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            \"Maximum renew count should be positive and should not exceed Integer.MAX_VALUE.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public final int maxRenews;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructs a {@code RenewCount}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param maxRenews A valid renew count in String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public MaxRenews(String maxRenews) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(maxRenews);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        checkArgument(isValidMaxRenews(maxRenews), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.maxRenews \u003d Integer.parseInt(maxRenews);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructs a {@code MaxRenews}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param maxRenews A valid maximum renew count in integer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public MaxRenews(int maxRenews) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.maxRenews \u003d maxRenews;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getMaxRenews() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return maxRenews;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if a given string is a valid maximum renew count."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static boolean isValidMaxRenews(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return String.format(\"%d\", maxRenews);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                || (other instanceof MaxRenews"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 maxRenews \u003d\u003d ((MaxRenews) other).maxRenews);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return Integer.hashCode(maxRenews);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/usersettings/RenewPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Represents the default renew period of a book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRenewPeriod(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class RenewPeriod {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \"Renew period should be positive and should not exceed Integer.MAX_VALUE days.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public final int renewPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code RenewPeriod}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param renewPeriod A valid renew period in String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public RenewPeriod(String renewPeriod) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(renewPeriod);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        checkArgument(isValidRenewPeriod(renewPeriod), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.renewPeriod \u003d Integer.parseInt(renewPeriod);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code RenewPeriod}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param renewPeriod A valid renew period in integer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public RenewPeriod(int renewPeriod) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.renewPeriod \u003d renewPeriod;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getRenewPeriod() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return renewPeriod;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns true if a given string is a valid renew period."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static boolean isValidRenewPeriod(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return String.format(\"%d\", renewPeriod);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                || (other instanceof RenewPeriod // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 renewPeriod \u003d\u003d (((RenewPeriod) other).renewPeriod)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Integer.hashCode(renewPeriod);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Book[] getSampleBooks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new Book(new Title(\"Harry Botter\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"J K Rowling\"), null, getGenreSet(\"FICTION\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new Book(new Title(\"Legend of the Condor Heroes\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Jin Yong\"), null, getGenreSet(\"FICTION\", \"HISTORY\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new Book(new Title(\"Animal the Farm\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"George Orwell\"), null, getGenreSet(\"FICTION\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new Book(new Title(\"Harry Botter and the Full Blood Prince\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"J K Rowling\"), null, getGenreSet(\"FICTION\", \"ACTION\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"Man\u0027s Search for Munning\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Viktor Frankel\"), null, getGenreSet(\"NON-FICTION\", \"BIOGRAPHY\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"Stefe Jobz\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Walter Izakson\"), null, getGenreSet(\"NON-FICTION\", \"BIOGRAPHY\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"Behaves\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Robert Sapoloksy\"), null, getGenreSet(\"NON-FICTION\", \"POPULAR-SCIENCE\", \"PSYCHOLOGY\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"A Brief History of Space\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Stephen Birding\"), null, getGenreSet(\"NON-FICTION\", \"POPULAR-SCIENCE\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"Painting with Bobby Ross\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Bobby Ross\"), null, getGenreSet(\"NON-FICTION\", \"ART\", \"HOW-TO\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static ReadOnlyCatalog getSampleCatalog() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog sampleAb \u003d new Catalog();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Arrays.stream(getSampleBooks()).forEach(book -\u003e sampleAb.addBook(book));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns a genre set containing the list of strings given,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * after formatting the strings to UPPERCASE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static Set\u003cGenre\u003e getGenreSet(String... strings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .map(genreName -\u003e genreName.trim().toUpperCase())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .map(Genre::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // Technically not needed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static ReadOnlyLoanRecords getSampleLoanRecords() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecords;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static ReadOnlyBorrowerRecords getSampleBorrowerRecords() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecords;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 11,
      "seeziyang": 2,
      "-": 24,
      "shiyao821": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.BorrowerRecordsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.CatalogStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.LoanRecordsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface Storage extends UserPrefsStorage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecordsStorage, CatalogStorage, BorrowerRecordsStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // UserPrefStorage methods"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // LoanRecordsStorage methods"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveLoanRecords(ReadOnlyLoanRecords loanRecords) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void storeNewLoanSlip() throws LoanSlipException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // CatalogStorage methods"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Path getCatalogFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyCatalog\u003e readCatalog(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveCatalog(ReadOnlyCatalog catalog) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // BorrowerRecordsStorage methods"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords) throws IOException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "seeziyang": 5,
      "-": 29,
      "shiyao821": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.LoanSlipUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.BorrowerRecordsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.CatalogStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.LoanRecordsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private LoanRecordsStorage loanRecordsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private CatalogStorage catalogStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private BorrowerRecordsStorage borrowerRecordsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                          LoanRecordsStorage loanRecordsStorage, CatalogStorage catalogStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                          BorrowerRecordsStorage borrowerRecordsStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loanRecordsStorage \u003d loanRecordsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.catalogStorage \u003d catalogStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.borrowerRecordsStorage \u003d borrowerRecordsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Records methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecordsStorage.getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return readLoanRecords(loanRecordsStorage.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecordsStorage.readLoanRecords(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveLoanRecords(ReadOnlyLoanRecords loanRecords) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveLoanRecords(loanRecords, loanRecordsStorage.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveLoanRecords(ReadOnlyLoanRecords loanRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        loanRecordsStorage.saveLoanRecords(loanRecords, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void storeNewLoanSlip() throws LoanSlipException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.createLoanSlipInDirectory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Catalog methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalogStorage.getCatalogFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyCatalog\u003e readCatalog(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return readCatalog(catalogStorage.getCatalogFilePath(), initialLoanRecords);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyCatalog\u003e readCatalog(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return catalogStorage.readCatalog(filePath, initialLoanRecords);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveCatalog(ReadOnlyCatalog catalog) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveCatalog(catalog, catalogStorage.getCatalogFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveCatalog(ReadOnlyCatalog catalog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        catalogStorage.saveCatalog(catalog, filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BorrowerRecords methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecordsStorage.getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return readBorrowerRecords(borrowerRecordsStorage.getBorrowerRecordsFilePath(), initialLoanRecords);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return borrowerRecordsStorage.readBorrowerRecords(filePath, initialLoanRecords);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords) throws IOException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveBorrowerRecords(borrowerRecords, borrowerRecordsStorage.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        borrowerRecordsStorage.saveBorrowerRecords(borrowerRecords, filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 9,
      "seeziyang": 11,
      "-": 63,
      "shiyao821": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/borrowerrecords/BorrowerRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.borrowerrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Represents a storage for {@link BorrowerRecords}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface BorrowerRecordsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns BorrowerRecords data as a {@link ReadOnlyBorrowerRecords}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #getBorrowerRecordsFilePath()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Saves the given {@link ReadOnlyBorrowerRecords} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param borrowerRecords cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #saveBorrowerRecords(ReadOnlyBorrowerRecords)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 5,
      "shiyao821": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/borrowerrecords/JsonAdaptedBorrower.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.borrowerrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LOAN_ID_DOES_NOT_EXISTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Jackson-friendly version of {@link Borrower}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "class JsonAdaptedBorrower {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Borrower\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final String borrowerId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final List\u003cString\u003e currentLoanList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final List\u003cString\u003e returnedLoanList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Constructs a {@code JsonAdaptedBorrower} with the given borrower detail."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public JsonAdaptedBorrower(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"borrowerId\") String borrowerId,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"currentLoanList\") List\u003cString\u003e currentLoanList,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"returnedLoanList\") List\u003cString\u003e returnedLoanList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.currentLoanList.addAll(currentLoanList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.returnedLoanList.addAll(returnedLoanList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts a given {@code Borrower} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonAdaptedBorrower(Borrower source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerId \u003d source.getBorrowerId().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        source.getCurrentLoanList().forEach(loan -\u003e currentLoanList.add(loan.getLoanId().toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        source.getReturnedLoanList().forEach(loan -\u003e returnedLoanList.add(loan.getLoanId().toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Borrower} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Borrower toModelType(ReadOnlyLoanRecords initialLoanRecords) throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (borrowerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                    BorrowerId.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!BorrowerId.isValidBorrowerId(borrowerId)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        final BorrowerId modelBorrowerId \u003d new BorrowerId(borrowerId);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (currentLoanList \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanList.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LoanList modelCurrentLoanList \u003d getModelLoanList(currentLoanList, initialLoanRecords);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (returnedLoanList \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanList.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LoanList modelReturnedLoanList \u003d getModelLoanList(returnedLoanList, initialLoanRecords);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Borrower(modelName, modelPhone, modelEmail, modelBorrowerId,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                modelCurrentLoanList, modelReturnedLoanList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanList getModelLoanList(List\u003cString\u003e loanList, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList modelLoanList \u003d new LoanList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        for (String loanIdString : loanList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            if (!LoanId.isValidLoanId(loanIdString)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                throw new IllegalValueException(LoanId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            LoanId loanId \u003d new LoanId(loanIdString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Loan modelLoan \u003d initialLoanRecords.getLoansMap().get(loanId);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            if (modelLoan \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                throw new IllegalValueException(String.format(MESSAGE_LOAN_ID_DOES_NOT_EXISTS, loanId));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelLoanList.add(modelLoan);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return modelLoanList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 27,
      "seeziyang": 57,
      "shiyao821": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/borrowerrecords/JsonBorrowerRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.borrowerrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * A class to access BorrowerRecords data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonBorrowerRecordsStorage implements BorrowerRecordsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBorrowerRecordsStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonBorrowerRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return readBorrowerRecords(filePath, initialLoanRecords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Similar to {@link #readBorrowerRecords(ReadOnlyLoanRecords)}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cJsonSerializableBorrowerRecords\u003e jsonBorrowerRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                filePath, JsonSerializableBorrowerRecords.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!jsonBorrowerRecords.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return Optional.of(jsonBorrowerRecords.get().toModelType(initialLoanRecords));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveBorrowerRecords(borrowerRecords, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Similar to {@link #saveBorrowerRecords(ReadOnlyBorrowerRecords)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(borrowerRecords);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBorrowerRecords(borrowerRecords), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 8,
      "shiyao821": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/borrowerrecords/JsonSerializableBorrowerRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.borrowerrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * An Immutable BorrowerRecords that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@JsonRootName(value \u003d \"BorrowerRecords\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "class JsonSerializableBorrowerRecords {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BORROWER \u003d \"borrowers list contains duplicate borrower(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final List\u003cJsonAdaptedBorrower\u003e borrowers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Constructs a {@code JsonSerializableBorrowerRecords} with the given borrowers."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableBorrowerRecords(@JsonProperty(\"borrowers\") List\u003cJsonAdaptedBorrower\u003e borrowers) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.borrowers.addAll(borrowers);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts a given {@code ReadOnlyBorrowerRecords} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBorrowerRecords}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableBorrowerRecords(ReadOnlyBorrowerRecords source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        borrowers.addAll(source.getBorrowerList().stream().map(JsonAdaptedBorrower::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts this address borrower into the model\u0027s {@code BorrowerRecords} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerRecords toModelType(ReadOnlyLoanRecords initialLoanRecords) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (JsonAdaptedBorrower jsonAdaptedBorrower : borrowers) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Borrower borrower \u003d jsonAdaptedBorrower.toModelType(initialLoanRecords);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (borrowerRecords.hasBorrower(borrower)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BORROWER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            borrowerRecords.addBorrower(borrower);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecords;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 3,
      "shiyao821": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/CatalogStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Represents a storage for {@link Catalog}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface CatalogStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getCatalogFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns Catalog data as a {@link ReadOnlyCatalog}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param initialLoanRecords Initial {@code ReadOnlyLoanRecords} loaded when ModelManage is initialized."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyCatalog\u003e readCatalog(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #getCatalogFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyCatalog\u003e readCatalog(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Saves the given {@link ReadOnlyCatalog} to the storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param catalog cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveCatalog(ReadOnlyCatalog catalog) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #saveCatalog(ReadOnlyCatalog)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveCatalog(ReadOnlyCatalog catalog, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 7,
      "shiyao821": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/JsonAdaptedBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LOAN_ID_DOES_NOT_EXISTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Jackson-friendly version of {@link Book}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonAdaptedBook {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final String serialNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final String author;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final String loan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final List\u003cJsonAdaptedGenre\u003e genres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructs a {@code JsonAdaptedBook} with the given person details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public JsonAdaptedBook(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"serialNumber\") String serialNumber,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                           @JsonProperty(\"author\") String author,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                           @JsonProperty(\"loan\") String loan,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                           @JsonProperty(\"genres\") List\u003cJsonAdaptedGenre\u003e genres) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (genres !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            this.genres.addAll(genres);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.loan \u003d loan;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonAdaptedBook(Book source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        serialNumber \u003d source.getSerialNumber().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        author \u003d source.getAuthor().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (source.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            loan \u003d source.getLoan().get().getLoanId().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            loan \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        genres.addAll(source.getGenres().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .map(JsonAdaptedGenre::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Uses an empty LoanRecords."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return toModelType(new LoanRecords());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Loan objects of the Book is taken from the initialLoanRecords."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book toModelType(ReadOnlyLoanRecords initialLoanRecords) throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final List\u003cGenre\u003e personGenres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        for (JsonAdaptedGenre tag : genres) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            personGenres.add(tag.toModelType());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (serialNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    SerialNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(serialNumber)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final SerialNumber modelSerialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (author \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Author modelAuthor \u003d new Author(author);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final Loan modelLoan;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (loan \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelLoan \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } else if (!LoanId.isValidLoanId(loan)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(LoanId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            LoanId loanId \u003d new LoanId(loan);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelLoan \u003d initialLoanRecords.getLoansMap().get(loanId);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            if (modelLoan \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                throw new IllegalValueException(String.format(MESSAGE_LOAN_ID_DOES_NOT_EXISTS, loanId));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Set\u003cGenre\u003e modelGenres \u003d new HashSet\u003c\u003e(personGenres);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book(modelTitle, modelSerialNumber, modelAuthor, modelLoan, modelGenres);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 17,
      "seeziyang": 37,
      "shiyao821": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/JsonAdaptedGenre.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Jackson-friendly version of {@link Genre}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class JsonAdaptedGenre {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final String genreName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructs a {@code JsonAdaptedGenre} with the given {@code genreName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public JsonAdaptedGenre(String genreName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.genreName \u003d genreName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Converts a given {@code Genre} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public JsonAdaptedGenre(Genre source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        genreName \u003d source.genreName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public String getGenreName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return genreName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Converts this Jackson-friendly adapted genre object into the model\u0027s {@code Genre} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted genre."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Genre toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!Genre.isValidGenreName(genreName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new IllegalValueException(Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Genre(genreName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 18,
      "-": 29,
      "shiyao821": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/JsonCatalogStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * A class to access Catalog data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonCatalogStorage implements CatalogStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCatalogStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonCatalogStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyCatalog\u003e readCatalog(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return readCatalog(filePath, initialLoanRecords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Similar to {@link #readCatalog(ReadOnlyLoanRecords)}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyCatalog\u003e readCatalog(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cJsonSerializableCatalog\u003e jsonCatalog \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                filePath, JsonSerializableCatalog.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (jsonCatalog.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return Optional.of(jsonCatalog.get().toModelType(initialLoanRecords));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveCatalog(ReadOnlyCatalog catalog) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveCatalog(catalog, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Similar to {@link #saveCatalog(ReadOnlyCatalog)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveCatalog(ReadOnlyCatalog catalog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(catalog);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCatalog(catalog), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "seeziyang": 8,
      "shiyao821": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/JsonSerializableCatalog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * An Immutable Catalog that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@JsonRootName(value \u003d \"Catalog\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonSerializableCatalog {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"books list contains duplicate book(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final List\u003cJsonAdaptedBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Constructs a {@code JsonSerializableCatalog} with the given books."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableCatalog(@JsonProperty(\"books\") List\u003cJsonAdaptedBook\u003e books) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.books.addAll(books);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts a given {@code ReadOnlyCatalog} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCatalog}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableCatalog(ReadOnlyCatalog source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        books.addAll(source.getBookList().stream().map(JsonAdaptedBook::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts this catalog into the model\u0027s {@code Catalog} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Uses an empty LoanRecords."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Catalog toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return toModelType(new LoanRecords());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts this catalog into the model\u0027s {@code Catalog} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Loan objects of the Books are taken from the initialLoanRecords."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Catalog toModelType(ReadOnlyLoanRecords initialLoanRecords) throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (JsonAdaptedBook jsonAdaptedBook : books) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Book book \u003d jsonAdaptedBook.toModelType(initialLoanRecords);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (catalog.hasBook(book)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            catalog.addBook(book);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return catalog;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 16,
      "shiyao821": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/loanrecords/JsonAdaptedLoan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.storage.loanrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Jackson-friendly version of {@link Loan}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class JsonAdaptedLoan {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Loan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DATE_MESSAGE_CONSTRAINTS \u003d \"Date should be in the ISO-8601 format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String INTEGER_VALUE_CONSTRAINTS \u003d \"%s should be an integer!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String START_DATE \u003d \"Start Date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DUE_DATE \u003d \"Due Date\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String RETURN_DATE \u003d \"Return Date\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String RENEW_COUNT \u003d \"Renew Count\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String REMAINING_FINE_AMOUNT \u003d \"Remaining Fine Amount\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String PAID_FINE_AMOUNT \u003d \"Paid Fine Amount\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String loanId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String bookSerialNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String borrowerId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String dueDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String returnDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String renewCount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String remainingFineAmount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String paidFineAmount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructs a {@code JsonAdaptedLoan} with the given Loan details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public JsonAdaptedLoan(@JsonProperty(\"loanId\") String loanId,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"bookSerialNumber\") String bookSerialNumber,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"borrowerId\") String borrowerId,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"dueDate\") String dueDate,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"returnDate\") String returnDate,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"renewCount\") String renewCount,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"remainingFineAmount\") String remainingFineAmount,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"paidFineAmount\") String paidFineAmount) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loanId \u003d loanId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.bookSerialNumber \u003d bookSerialNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.returnDate \u003d returnDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.renewCount \u003d renewCount;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.remainingFineAmount \u003d remainingFineAmount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.paidFineAmount \u003d paidFineAmount;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts a given {@code Loan} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public JsonAdaptedLoan(Loan source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanId \u003d source.getLoanId().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        bookSerialNumber \u003d source.getBookSerialNumber().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerId \u003d source.getBorrowerId().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        dueDate \u003d source.getDueDate().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        returnDate \u003d source.getReturnDate() \u003d\u003d null ? \"\" : source.getReturnDate().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        renewCount \u003d String.valueOf(source.getRenewCount());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        remainingFineAmount \u003d String.valueOf(source.getRemainingFineAmount());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        paidFineAmount \u003d String.valueOf(source.getPaidFineAmount());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts this Jackson-friendly adapted Loan object into the model\u0027s {@code Loan} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Loan."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (loanId \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanId.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!LoanId.isValidLoanId(loanId)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(LoanId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LoanId modelBookLoanId \u003d new LoanId(loanId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (bookSerialNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    SerialNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(bookSerialNumber)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final SerialNumber modelBookSerialNumber \u003d new SerialNumber(bookSerialNumber);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (borrowerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    BorrowerId.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!BorrowerId.isValidBorrowerId(borrowerId)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(BorrowerId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final BorrowerId modelBorrowerId \u003d new BorrowerId(borrowerId);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LocalDate modelStartDate;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LocalDate modelDueDate;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LocalDate modelReturnDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, START_DATE)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, DUE_DATE)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (returnDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, RETURN_DATE)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelStartDate \u003d LocalDate.parse(startDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelDueDate \u003d LocalDate.parse(dueDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelReturnDate \u003d returnDate.equals(\"\") ? null : LocalDate.parse(returnDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(DATE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final int modelRenewCount \u003d getModelInt(renewCount, RENEW_COUNT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final int modelRemainingFineAmount \u003d getModelInt(remainingFineAmount, REMAINING_FINE_AMOUNT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final int modelPaidFineAmount \u003d getModelInt(paidFineAmount, PAID_FINE_AMOUNT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Loan(modelBookLoanId, modelBookSerialNumber, modelBorrowerId, modelStartDate, modelDueDate,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                modelReturnDate, modelRenewCount, modelRemainingFineAmount, modelPaidFineAmount);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static int getModelInt(String field, String fieldName) throws IllegalValueException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final int modelInt;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (field \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, fieldName)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelInt \u003d Integer.parseInt(field);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(INTEGER_VALUE_CONSTRAINTS, fieldName));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return modelInt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/loanrecords/JsonLoanRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.storage.loanrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonLoanRecordsStorage implements LoanRecordsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLoanRecordsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonLoanRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return readLoanRecords(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Similar to {@link #readLoanRecords()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cJsonSerializableLoanRecords\u003e jsonLoanRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                filePath, JsonSerializableLoanRecords.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!jsonLoanRecords.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.of(jsonLoanRecords.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveLoanRecords(ReadOnlyLoanRecords loanRecords) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveLoanRecords(loanRecords, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Similar to {@link #saveLoanRecords(ReadOnlyLoanRecords)}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveLoanRecords(ReadOnlyLoanRecords loanRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(loanRecords);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLoanRecords(loanRecords), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 1,
      "-": 60,
      "shiyao821": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/loanrecords/JsonSerializableLoanRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.storage.loanrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * An Immutable LoanRecords that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@JsonRootName(value \u003d \"loanrecords\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonSerializableLoanRecords {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // NOT IMPORTANT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOAN \u003d \"loans list contains duplicate loan(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final List\u003cJsonAdaptedLoan\u003e loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Constructs a {@code JsonSerializableLoanRecords} with the given loans."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableLoanRecords(@JsonProperty(\"loans\") List\u003cJsonAdaptedLoan\u003e loans) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loans.addAll(loans);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts a given {@code ReadOnlyLoanRecords} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLoanRecords}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableLoanRecords(ReadOnlyLoanRecords source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loans.addAll(source.getLoanCollection().stream().map(JsonAdaptedLoan::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts this loan record into the model\u0027s {@code LoanRecords} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public LoanRecords toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (JsonAdaptedLoan jsonAdaptedLoan : loans) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            Loan loan \u003d jsonAdaptedLoan.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (loanRecords.hasLoan(loan)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            loanRecords.addLoan(loan);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecords;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 2,
      "shiyao821": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/loanrecords/LoanRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.storage.loanrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Represents a storage for {@link seedu.address.model.LoanRecords}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface LoanRecordsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns LoanRecords data as a {@link ReadOnlyLoanRecords}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #getLoanRecordsFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Saves the given {@link ReadOnlyLoanRecords} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param loanRecords cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveLoanRecords(ReadOnlyLoanRecords loanRecords) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #saveLoanRecords(ReadOnlyLoanRecords, Path)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveLoanRecords(ReadOnlyLoanRecords loanRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 1,
      "shiyao821": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class BookCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final String FXML \u003d \"BookListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label serialNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private FlowPane genres;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Label loanStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private Label dueDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private Label renewCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        title.setText(book.getTitle().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        serialNumber.setText(book.getSerialNumber().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        author.setText(book.getAuthor().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        book.getGenres().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.genreName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .forEach(tag -\u003e genres.getChildren().add(new Label(tag.genreName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (book.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            loanStatus.setText(\"On Loan\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            dueDate.setText(\"Due: \" + book.getLoan().get().getDueDate());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            renewCount.setText(\"Renewed: \" + book.getLoan().get().getRenewCount() + \" times\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(other instanceof BookCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        BookCard card \u003d (BookCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 12,
      "Cronyxx": 11,
      "seeziyang": 7,
      "-": 51,
      "shiyao821": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Panel containing the list of books."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class BookListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final String FXML \u003d \"BookListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public BookListPanel(ObservableList\u003cBook\u003e bookList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BookListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code BookCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class BookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                setGraphic(new BookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 4,
      "Cronyxx": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BorrowerPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.FineUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A Ui component containing the borrower\u0027s information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BorrowerPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String FXML \u003d \"BorrowerPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private Label fines;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /** Constructor when not in Serve Mode */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BorrowerPanel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        name.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        id.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        fines.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        VBox.setVgrow(bookListView, Priority.ALWAYS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets a borrower when transiting into serve mode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param borrower Borrower being served/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param observableBookList List of books the borrower loaned from the library."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBorrower(Borrower borrower, ObservableList\u003cBook\u003e observableBookList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(borrower);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        name.setText(\"Borrower: \" + borrower.getName().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        id.setText(\"ID: \" + borrower.getBorrowerId().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        fines.setText(\"Fines: \" + FineUtil.centsToDollarString(borrower.getOutstandingFineAmount()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        bookListView.setItems(observableBookList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BorrowerPanel.BookListViewCell());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Resets the borrower panel when Done command is invoked."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        name.setText(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        id.setText(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        fines.setText(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ObservableList\u003cBook\u003e nullList \u003d FXCollections.observableArrayList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        bookListView.setItems(nullList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BorrowerPanel.BookListViewCell());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Updates the list of books whenever the borrower loans/returns a book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param observableBookList List of books the borrower loaned from the library."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void updateBooks(ObservableList\u003cBook\u003e observableBookList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        bookListView.setItems(observableBookList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BorrowerPanel.BookListViewCell());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code BookCard}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    class BookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                setGraphic(new BookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 93,
      "seeziyang": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpTableEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Represents the data for each row in the table within the {@code HelpWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class HelpTableEntry {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final SimpleStringProperty command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final SimpleStringProperty usage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    HelpTableEntry(String command, String usage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.command \u003d new SimpleStringProperty(command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.usage \u003d new SimpleStringProperty(usage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return command.get();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String getUsage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return usage.get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.EditBorrowerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.RenewCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.UnregisterCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e implements Initializable {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private TableView\u003cHelpTableEntry\u003e helpTable;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private TableColumn\u003cHelpTableEntry, String\u003e commandCol;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private TableColumn\u003cHelpTableEntry, String\u003e usageCol;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Initialises the table of commands and usages within the HelpWindow."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void initialize(URL url, ResourceBundle rb) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        final ObservableList\u003cHelpTableEntry\u003e data \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(AddCommand.COMMAND_WORD, AddCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(ClearCommand.COMMAND_WORD, ClearCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(DeleteCommand.COMMAND_WORD, DeleteCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(DoneCommand.COMMAND_WORD, DoneCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new HelpTableEntry(EditBorrowerCommand.COMMAND_WORD, EditBorrowerCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(ExitCommand.COMMAND_WORD, ExitCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(FindCommand.COMMAND_WORD, FindCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(HelpCommand.COMMAND_WORD, HelpCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(InfoCommand.COMMAND_WORD, InfoCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(LoanCommand.COMMAND_WORD, LoanCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(PayCommand.COMMAND_WORD, PayCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(RedoCommand.COMMAND_WORD, RedoCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(RegisterCommand.COMMAND_WORD, RegisterCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(RenewCommand.COMMAND_WORD, RenewCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(ReturnCommand.COMMAND_WORD, ReturnCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(ServeCommand.COMMAND_WORD, ServeCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(SetCommand.COMMAND_WORD, SetCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(UndoCommand.COMMAND_WORD, UndoCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new HelpTableEntry(UnregisterCommand.COMMAND_WORD, UnregisterCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        commandCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"command\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        usageCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"usage\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        helpTable.setItems(data);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "Cronyxx": 63,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String SERVE_MODE \u003d \"Serve Mode\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String NORMAL_MODE \u003d \"Normal Mode\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private BorrowerPanel borrowerPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private AnchorPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Pane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private StackPane bookListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private StackPane borrowerPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label mode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (logic.isServeMode()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            mode.setText(SERVE_MODE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            mode.setText(NORMAL_MODE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        resultDisplayPlaceholder.setStyle(\"-fx-background-color: #2b2b2b#2b2b2b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrowerPanel \u003d new BorrowerPanel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrowerPanelPlaceholder.getChildren().add(borrowerPanel.getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (guiSettings.isDefault()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            primaryStage.setHeight(getDefaultHeight());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            primaryStage.setWidth(getDefaultWidth());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private double getDefaultWidth() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Screen.getPrimary().getVisualBounds().getWidth();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private double getDefaultHeight() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Screen.getPrimary().getVisualBounds().getHeight();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Updates the borrower panel and sets the label to Serve Mode."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void handleServe() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        mode.setText(SERVE_MODE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Updates the borrower panel."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void updateBorrowerPanel() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert logic.isServeMode() : \"Not in serve mode\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrowerPanel.setBorrower(logic.getServingBorrower(), logic.getServingBorrowerBookList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Resets the borrower panel and sets the label to Normal Mode."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void handleDone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        mode.setText(NORMAL_MODE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrowerPanel.reset();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public BookListPanel getBookListPanel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else if (commandResult.isServe()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                handleServe();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else if (commandResult.isDone()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                handleDone();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (logic.isServeMode() \u0026\u0026 !commandResult.isDone()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                updateBorrowerPanel();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 62,
      "Cronyxx": 11,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private ScrollPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label resultDisplay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        resultDisplay.setTextFill(Color.web(\"#FFFFFF\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        resultDisplay.setWrapText(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 9,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/LiBerryLogo_square.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/BookListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"Infinity\" minWidth\u003d\"10.0\" prefWidth\u003d\"205.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"genres\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"serialNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$serialNumber\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "   \u003cPane maxWidth\u003d\"100.0\" minHeight\u003d\"105.0\" minWidth\u003d\"120.0\" prefHeight\u003d\"105.0\" prefWidth\u003d\"120.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "          \u003cLabel fx:id\u003d\"loanStatus\" layoutY\u003d\"41.0\" text\u003d\"\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "          \u003cLabel fx:id\u003d\"dueDate\" layoutY\u003d\"62.0\" text\u003d\"\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "          \u003cLabel fx:id\u003d\"renewCount\" layoutY\u003d\"78.0\" text\u003d\"\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "   \u003c/Pane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 3,
      "Cronyxx": 15,
      "seeziyang": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/BookListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 8
    }
  },
  {
    "path": "src/main/resources/view/BorrowerPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003cVBox fx:id\u003d\"borrowerPanel\" prefWidth\u003d\"500.0\" minWidth\u003d\"500\" maxWidth\u003d\"500\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "       \u003cLabel fx:id\u003d\"name\" prefHeight\u003d\"60.0\" styleClass\u003d\"result-display\" text\u003d\"Borrower: \"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "       \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "       \u003cLabel fx:id\u003d\"id\" prefHeight\u003d\"60.0\" styleClass\u003d\"result-display\" text\u003d\"ID:\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "       \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        \u003cLabel fx:id\u003d\"fines\" prefHeight\u003d\"60.0\" styleClass\u003d\"result-display\" text\u003d\"ID:\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 20,
      "seeziyang": 5
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cTextField fx:id\u003d\"commandTextField\" maxHeight\u003d\"35.0\" maxWidth\u003d\"Infinity\" minHeight\u003d\"35.0\" minWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "           onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"35.0\" prefWidth\u003d\"600.0\" promptText\u003d\"Enter command here...\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "           AnchorPane.leftAnchor\u003d\"5\" AnchorPane.rightAnchor\u003d\"5\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 5,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    -fx-background-color: transparent, #C8D3D5, transparent, #C8D3D5;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "#genres {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "#genres .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 4,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003cTableView fx:id\u003d\"helpTable\" prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"commandCol\" editable\u003d\"false\" prefWidth\u003d\"75.0\" resizable\u003d\"false\" sortable\u003d\"false\" text\u003d\"Command\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"usageCol\" editable\u003d\"false\" prefWidth\u003d\"305.0\" resizable\u003d\"false\" sortable\u003d\"false\" text\u003d\"Usage\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "               \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003c/columnResizePolicy\u003e\u003c/TableView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 18,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"650.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"LiBerry\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"510.0\" prefWidth\u003d\"615.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003cbottom\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    \u003cAnchorPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"35.0\" minHeight\u003d\"35.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"35.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"pane-with-border\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003c/bottom\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003cright\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    \u003cVBox maxWidth\u003d\"500.0\" minWidth\u003d\"500.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #d8dae3#d8dae3;\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                            \u003cVBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"borrowerPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003c/right\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    \u003cVBox fx:id\u003d\"bookList\" minWidth\u003d\"500.0\" prefWidth\u003d\"500.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                        \u003cPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150.0\" minHeight\u003d\"150.0\" prefHeight\u003d\"120.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                                \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                            \u003c/padding\u003e\u003c/Pane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003ctop\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    \u003cHBox prefHeight\u003d\"47.0\" prefWidth\u003d\"615.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                            \u003cImageView fitHeight\u003d\"47.0\" fitWidth\u003d\"118.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                                \u003cimage\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/LiBerryLogo.png\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                                \u003c/image\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                                    \u003cInsets left\u003d\"7.0\" top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                            \u003cPane prefHeight\u003d\"47.0\" prefWidth\u003d\"286.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                            \u003cLabel fx:id\u003d\"mode\" prefHeight\u003d\"47.0\" prefWidth\u003d\"201.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003c/top\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 14,
      "Cronyxx": 35,
      "seeziyang": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003cLabel fx:id\u003d\"resultDisplay\" maxHeight\u003d\"150.0\" minHeight\u003d\"150.0\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"150.0\" styleClass\u003d\"result-display\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "      \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 7,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class DateUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void extendDate_validDays_returnsTrue() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.extendDate(today, 14).equals(today.plusDays(14)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.extendDate(today, 789).equals(today.plusDays(789)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.extendDate(today, 0).equals(today));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void extendDate_validDays_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.extendDate(today, 123).equals(today.plusDays(456)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.extendDate(today, 123).equals(today.plusDays(-123)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void extendDate_invalidDays_throwsAssertionError() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e DateUtil.extendDate(today, -23));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void extendDate_invalidDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateUtil.extendDate(null, 23));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getTodayPlusDays_validDays_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getTodayPlusDays(30).equals(today.plusDays(30)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getTodayPlusDays(567).equals(today.plusDays(567)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getTodayPlusDays(0).equals(today));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getTodayPlusDays_validDays_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.getTodayPlusDays(9876).equals(today.plusDays(9877)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.getTodayPlusDays(123).equals(today.plusDays(0)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getNumOfDaysBetween_validDates_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getNumOfDaysBetween(DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(40)) \u003d\u003d 40);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getNumOfDaysBetween(today.plusDays(23), today.plusDays(50)) \u003d\u003d 27);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getNumOfDaysBetween(today.minusDays(10), today) !\u003d 11);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getNumOfDaysBetween(today, DateUtil.extendDate(today, 100)) !\u003d 99);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getNumOfDaysBetween_invalidDates_throwsAssertionError() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(AssertionError.class, ()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            -\u003e DateUtil.getNumOfDaysBetween(DateUtil.extendDate(today, 30), today));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getNumOfDaysBetween_invalidDates_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d DateUtil.getTodayDate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateUtil.getNumOfDaysBetween(null, today));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getNumOfDaysOverdue_validDates_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(DateUtil.getNumOfDaysOverdue(LocalDate.of(2019, 10, 25),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                LocalDate.of(2019, 10, 30)), 5);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(DateUtil.getNumOfDaysOverdue(LocalDate.of(2019, 10, 25),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                LocalDate.of(2019, 10, 12)), 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getNumOfDaysOverdue_invalidDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateUtil.getNumOfDaysOverdue(null, LocalDate.now()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isDateBeforeToday() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.isDateBeforeToday(DateUtil.getTodayMinusDays(1)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.isDateBeforeToday(DateUtil.getTodayMinusDays(20)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.isDateBeforeToday(DateUtil.getTodayDate()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.isDateBeforeToday(DateUtil.getTodayPlusDays(1)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.isDateBeforeToday(DateUtil.getTodayPlusDays(999)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void formatDate() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(DateUtil.formatDate(LocalDate.of(2019, 10, 25)), \"25/10/2019\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FineUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class FineUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void centsToDollarString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(FineUtil.centsToDollarString(500), \"$5.00\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(FineUtil.centsToDollarString(0), \"$0.00\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(FineUtil.centsToDollarString(1234), \"$12.34\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void dollarsToCents() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(FineUtil.dollarsToCents(99.99), 9999);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(FineUtil.dollarsToCents(0.01), 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(FineUtil.dollarsToCents(12.00), 1200);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(FineUtil.dollarsToCents(743.12), 74312);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/LoanSlipUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class LoanSlipUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Borrower borrower;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Book book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Loan loan;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Loan loan2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Loan loan3;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrower \u003d ALICE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        book \u003d BOOK_1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loan \u003d new Loan("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new LoanId(\"L999999\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                book.getSerialNumber(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                borrower.getBorrowerId(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayDate(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayPlusDays(14));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loan2 \u003d new Loan("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new LoanId(\"L000002\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                BOOK_2.getSerialNumber(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                BOB.getBorrowerId(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayPlusDays(10),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayPlusDays(24));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loan3 \u003d new Loan("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new LoanId(\"L000002\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                BOOK_2.getSerialNumber(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                borrower.getBorrowerId(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayPlusDays(10),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayPlusDays(24));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void mountLoanSlip_noLoanSlipMounted_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan, book, borrower));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void mountLoanSlip_inconsistentLoanAndFields_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.mountLoan(loan, BOOK_2, borrower));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.mountLoan(loan, book, BOB));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void mountLoanSlip_loanSlipMountedDifferentBorrower_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount first loan"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan, book, borrower));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount second loan"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Check that second loan cannot be mounted since it is a different borrower"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e LoanSlipUtil.mountLoan(loan2, BOOK_2, BOB));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void mountLoanSlip_loanSlipMountedSameBorrower_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount first loan"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan, book, borrower));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount second loan"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Check that second loan cannot be mounted since it is a different borrower"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan3, BOOK_2, borrower));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void createLoanSlipInDirectory_multipleLoanSlipMounted_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        File file \u003d new File(\"./data/loan_slips/L999999.pdf\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan, book, borrower));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan3, BOOK_2, borrower));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(file.exists());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.createLoanSlipInDirectory());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(file.exists());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(file.exists());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void openLoanSlip_loanSlipNotReady_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.openGeneratedLoanSlip());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan, book, borrower));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.openGeneratedLoanSlip());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void unmountSpecificLoan_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Unmount loan, loan not mounted, nothing happens"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount first loan"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan, book, borrower));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.unmountSpecificLoan(loan2, BOOK_2));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Unmount loan, only 1 loan mounted, entire LoanSlipUtil is unmounted"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount first loan"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan, book, borrower));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.unmountSpecificLoan(loan, book));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Unmount loan, still have other loans mounted, LoanSlipUtil is still mounted"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount first loan two loans"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan, book, borrower));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoan(loan3, BOOK_2, borrower));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Unmount first loan"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.unmountSpecificLoan(loan, book));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Unmount second loan"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.unmountSpecificLoan(loan3, BOOK_2));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    //---------------- Tests for isValidDollarAmount --------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isValidDollarAmount() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"\")); // Boundary value"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"  \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"a\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"aaa\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"0\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"0.00\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(StringUtil.isValidDollarAmount(\"010\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(StringUtil.isValidDollarAmount(\"01.20\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // EP: numbers with more than 2d.p."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"-1.000\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"-1.001\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"-80.540\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // EP: numbers when converted to cents is larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(Long.toString(Long.MAX_VALUE / 1000)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"-1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"-1.00\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"+1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(StringUtil.isValidDollarAmount(\"+8.45\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(StringUtil.isValidDollarAmount(\"0.01\")); // Boundary value"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(StringUtil.isValidDollarAmount(\"10\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(StringUtil.isValidDollarAmount(\"2358023.70\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 40,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.JsonBorrowerRecordsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.JsonCatalogStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.JsonLoanRecordsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonCatalogStorage catalogStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonCatalogStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonLoanRecordsStorage loanRecordsStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonLoanRecordsStorage(temporaryFolder.resolve(\"loanRecords.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonBorrowerRecordsStorage borrowerRecordsStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonBorrowerRecordsStorage(temporaryFolder.resolve(\"borrowerRecords.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                userPrefsStorage, loanRecordsStorage, catalogStorage, borrowerRecordsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Setup LogicManager with JsonCatalogIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonCatalogStorage catalogStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonCatalogIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCatalog.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonBorrowerRecordsStorage borrowerRecordsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonBorrowerRecordsStorage(temporaryFolder.resolve(\"ioExceptionBorrowerRecords.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonLoanRecordsStorage loanRecordsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonLoanRecordsStorage(temporaryFolder.resolve(\"ioExceptionLoanRecords.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                userPrefsStorage, loanRecordsStorage, catalogStorage, borrowerRecordsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + TITLE_DESC_BOOK_1 + SERIAL_NUMBER_DESC_BOOK_1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + AUTHOR_DESC_BOOK_1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOOK_1).withGenres().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.addBook(expectedBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getCatalog_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getCatalog(), model.getCatalog());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getFilteredBookList_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getFilteredBookList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getCatalogFilePath_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getCatalogFilePath(), model.getCatalogFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getGuiSettings_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getGuiSettings(), model.getGuiSettings());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setGuiSettings_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(2.2, 2.2, 1, 3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getGuiSettings(), guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(logic.getGuiSettings(), new GuiSettings());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static class JsonCatalogIoExceptionThrowingStub extends JsonCatalogStorage {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private JsonCatalogIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public void saveCatalog(ReadOnlyCatalog addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 49,
      "seeziyang": 1,
      "-": 129,
      "shiyao821": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // TODO implement and add getTypicalLoanRecords() and getTypicalBorrowerRecords()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_newBook_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book validBook \u003d new BookBuilder().withTitle(\"Hari\").withSerialNumber(\"B00005\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.addBook(validBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(new AddCommand(validBook), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validBook), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookInList \u003d model.getCatalog().getBookList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(new AddCommand(bookInList), model, MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 12,
      "-": 32,
      "shiyao821": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelStubAcceptingBookAdded modelStub \u003d new ModelStubAcceptingBookAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validBook).execute(modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBook), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(Arrays.asList(validBook), modelStub.booksAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBook(validBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_BOOK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book a \u003d new BookBuilder().withTitle(\"A\").withSerialNumber(\"B00001\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(\"B\").withSerialNumber(\"B00002\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addACommand \u003d new AddCommand(a);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addBCommand \u003d new AddCommand(b);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(addACommand.equals(addACommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addACommandCopy \u003d new AddCommand(a);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(addACommand.equals(addACommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(addACommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(addACommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(addACommand.equals(addBCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setCatalogFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public Book getBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setCatalog(ReadOnlyCatalog newData) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ReadOnlyCatalog getCatalog() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public boolean hasBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ObservableList\u003cBook\u003e getOverdueBooks() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public void resetFilteredBookList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public void setLoanRecordsFilePath(Path loanRecordsFilePath) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public ReadOnlyLoanRecords getLoanRecords() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void removeLoan(Loan loan) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void updateLoan(Loan existingLoan, Loan returnedLoan) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public int payFines(int amountInCents) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public void setBorrowerRecordsFilePath(Path borrowerRecordsFilePath) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public BorrowerRecords getBorrowerRecords() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Model excludeBookBeingReplaced(Book toBeReplaced) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new AssertionError(\" This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public Borrower getServingBorrower() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\" This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public boolean isServeMode() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\" This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public boolean hasBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void registerBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void resetGenerator() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void setServingBorrower(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void setServingBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void servingBorrowerNewLoan(Loan newLoan) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void servingBorrowerRemoveLoan(Loan removeLoan) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void servingBorrowerReturnLoan(Loan loanToBeReturned, Loan returnedLoan) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void servingBorrowerUnreturnLoan(Loan loanToBeReturned, Loan returnedLoan) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void servingBorrowerRenewLoan(Loan loanToBeRenewed, Loan renewedLoan) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void servingBorrowerUnrenewLoan(Loan loanToBeUnrenewed, Loan unrenewedLoan) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public boolean hasBorrowerId(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void exitsServeMode() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public List\u003cBook\u003e getBorrowerBooks() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public Borrower getBorrowerFromId(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void setBorrower(Borrower borrowerToEdit, Borrower editedBorrower) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public boolean hasDuplicatedBorrower(Borrower editedBorrower) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void unregisterBorrower(Borrower toUnregister) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void commitCommand(ReversibleCommand command) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public CommandResult undoCommand() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public CommandResult redoCommand() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public boolean canUndoCommand() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public boolean canRedoCommand() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private class ModelStubWithBook extends ModelStub {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private final Book book;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelStubWithBook(Book book) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.book \u003d book;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return this.book.equals(book);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private class ModelStubAcceptingBookAdded extends ModelStub {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        final ArrayList\u003cBook\u003e booksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return booksAdded.stream().anyMatch(book::equals);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            booksAdded.add(book);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ReadOnlyCatalog getCatalog() {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return new Catalog();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 44,
      "hoholyin": 68,
      "Cronyxx": 38,
      "seeziyang": 48,
      "-": 182,
      "shiyao821": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void execute_emptyCatalog_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new ModelManager(new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void execute_nonEmptyCatalog_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // filter the model with a predicate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(\"harry\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "-": 23,
      "shiyao821": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different serve value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different done value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, false, true)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different serve value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new CommandResult(\"feedback\", false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different done value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new CommandResult(\"feedback\", false, false, false, true).hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isShowHelp() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        CommandResult commandResult1 \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(commandResult1.isShowHelp());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        CommandResult commandResult2 \u003d new CommandResult(\"feedback\", true, false, false, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(commandResult2.isShowHelp());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        CommandResult commandResult1 \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(commandResult1.isExit());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        CommandResult commandResult2 \u003d new CommandResult(\"feedback\", false, true, false, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(commandResult2.isExit());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isServe() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        CommandResult commandResult1 \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(commandResult1.isServe());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        CommandResult commandResult2 \u003d new CommandResult(\"feedback\", false, false, true, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(commandResult2.isServe());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isDone() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        CommandResult commandResult1 \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(commandResult1.isDone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        CommandResult commandResult2 \u003d new CommandResult(\"feedback\", false, false, false, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(commandResult2.isDone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 21,
      "seeziyang": 35,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINE_INCREMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOAN_PERIOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RENEW_PERIOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.EditBorrowerDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.SetUserSettingsDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String VALID_ID_AMY \u003d \"K1234\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String VALID_ID_BOB \u003d \"K2345\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String BORROWER_ID_DESC_BOB \u003d \" \" + PREFIX_BORROWER_ID + VALID_ID_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"$123\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"yo\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_TITLE_BOOK_1 \u003d \"Harry Botter\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_TITLE_BOOK_2 \u003d \"Legend of the Condor Heroes\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_TITLE_BOOK_3 \u003d \"Heavenly Sword and Dragon Saber\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BOOK_1 \u003d \"B00001\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BOOK_2 \u003d \"B00002\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BOOK_3 \u003d \"B00005\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BOOK_4 \u003d \"B00007\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_AUTHOR_BOOK_1 \u003d \"J K Rowling\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_AUTHOR_BOOK_2 \u003d \"Jin Yong\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String VALID_GENRE_ACTION \u003d \"ACTION\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_GENRE_FICTION \u003d \"FICTION\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_GENRE_NONFICTION \u003d \"NON-FICTION\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALID_BORROWER_ID_1 \u003d \"K0001\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALID_BORROWER_ID_2 \u003d \"K0002\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String TITLE_DESC_BOOK_1 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOOK_1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String TITLE_DESC_BOOK_2 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String SERIAL_NUMBER_DESC_BOOK_1 \u003d \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String SERIAL_NUMBER_DESC_BOOK_2 \u003d \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String AUTHOR_DESC_BOOK_1 \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_BOOK_1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String AUTHOR_DESC_BOOK_2 \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String GENRE_DESC_FICTION \u003d \" \" + PREFIX_GENRE + VALID_GENRE_FICTION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String GENRE_DESC_ACTION \u003d \" \" + PREFIX_GENRE + VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String INVALID_SERIAL_NUMBER_DESC \u003d \" \" + PREFIX_SERIAL_NUMBER + \"9a\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String INVALID_GENRE_DESC \u003d \" \" + PREFIX_GENRE + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALID_LOAN_ID \u003d \"L000001\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_LOAN_PERIOD_1 \u003d \"14\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_LOAN_PERIOD_2 \u003d \"7\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_RENEW_PERIOD_1 \u003d \"14\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_RENEW_PERIOD_2 \u003d \"7\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_FINE_INCREMENT_1 \u003d \"30\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_FINE_INCREMENT_2 \u003d \"40\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALID_MAX_RENEWS_1 \u003d \"2\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALID_MAX_RENEWS_2 \u003d \"3\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String INVALID_LOAN_PERIOD_DESC \u003d \" \" + PREFIX_LOAN_PERIOD + \"7a\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String INVALID_RENEW_PERIOD_DESC \u003d \" \" + PREFIX_RENEW_PERIOD + \"7b\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String INVALID_FINE_INCREMENT_DESC \u003d \" \" + PREFIX_FINE_INCREMENT + \"10c\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_LOAN_PERIOD_1_DESC \u003d \" \" + PREFIX_LOAN_PERIOD + VALID_LOAN_PERIOD_1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_RENEW_PERIOD_1_DESC \u003d \" \" + PREFIX_RENEW_PERIOD + VALID_RENEW_PERIOD_1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_FINE_INCREMENT_1_DESC \u003d \" \" + PREFIX_FINE_INCREMENT + VALID_FINE_INCREMENT_1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_LOAN_PERIOD_2_DESC \u003d \" \" + PREFIX_LOAN_PERIOD + VALID_LOAN_PERIOD_2;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_RENEW_PERIOD_2_DESC \u003d \" \" + PREFIX_RENEW_PERIOD + VALID_RENEW_PERIOD_2;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_FINE_INCREMENT_2_DESC \u003d \" \" + PREFIX_FINE_INCREMENT + VALID_FINE_INCREMENT_2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final int VALID_CENT_AMOUNT \u003d 120;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final SetCommand.SetUserSettingsDescriptor DESC_USER_SETTINGS_1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final SetCommand.SetUserSettingsDescriptor DESC_USER_SETTINGS_2;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        DESC_USER_SETTINGS_1 \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_1)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .withMaxRenews(VALID_MAX_RENEWS_1)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        DESC_USER_SETTINGS_2 \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_2)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_2)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_2)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .withMaxRenews(VALID_MAX_RENEWS_2)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final EditBorrowerCommand.EditBorrowerDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final EditBorrowerCommand.EditBorrowerDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        DESC_AMY \u003d new EditBorrowerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .withBorrowerId(VALID_ID_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        DESC_BOB \u003d new EditBorrowerDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .withBorrowerId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog expectedCatalog \u003d new Catalog(actualModel.getCatalog());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedCatalog, actualModel.getCatalog());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void showBookAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final String title \u003d book.getTitle().value;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        model.updateFilteredBookList(new BookPredicate().setTitle(title));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 17,
      "hoholyin": 37,
      "Cronyxx": 40,
      "seeziyang": 9,
      "-": 90,
      "shiyao821": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteByIndexCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * {@code DeleteByIndexCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class DeleteByIndexCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // TODO implement and add getTypicalLoanRecords() and getTypicalBorrowerRecords()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteByIndexCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteByIndexCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showNoBook(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCatalog().getBookList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteFirstCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteSecondCommand \u003d new DeleteByIndexCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteFirstCommandCopy \u003d new DeleteByIndexCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void showNoBook(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.updateFilteredBookList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(model.getFilteredBookList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 33,
      "-": 72,
      "shiyao821": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteBySerialNumberCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * {@code DeleteByIndexCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class DeleteBySerialNumberCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // TODO implement and add getTypicalLoanRecords() and getTypicalBorrowerRecords()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_validSerialNumber_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // B00001 exists in typicalCatalog"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d retrieveBookFromCatalog(model, sn);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteBySerialNumberCommand \u003d new DeleteBySerialNumberCommand(sn);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(deleteBySerialNumberCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(deleteBySerialNumberCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_invalidSerialNumber_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber outOfBoundSerialNumber \u003d new SerialNumber(\"B99999\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteBySerialNumberCommand \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new DeleteBySerialNumberCommand(outOfBoundSerialNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(deleteBySerialNumberCommand, model, Messages.MESSAGE_NO_SUCH_BOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn1 \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn2 \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteFirstCommand \u003d new DeleteBySerialNumberCommand(sn1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteSecondCommand \u003d new DeleteBySerialNumberCommand(sn2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteFirstCommandCopy \u003d new DeleteBySerialNumberCommand(sn1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns Book from Catalog under the model."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param model Model to retrieve Book from."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param serialNumber Serial number of target book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Book object, the target book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Book retrieveBookFromCatalog(Model model, SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return (Book) model.getCatalog()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .getBookList()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.getSerialNumber().equals(serialNumber))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .toArray()[0];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_exitsServeMode_successful() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //registers BOB"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new RegisterCommand(BOB).execute(modelManager);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //serves BOB"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new ServeCommand(new BorrowerId(VALID_ID_BOB)).execute(modelManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertNotNull(modelManager.getServingBorrower());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        doneCommand.execute(modelManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Assert.assertThrows(CommandException.class, MESSAGE_NOT_IN_SERVE_MODE, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                doneCommand.execute(modelManager));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        DoneCommand standardCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBorrowerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BORROWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.FIONA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.getTypicalBorrowerRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.EditBorrowerDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class EditBorrowerCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Model model \u003d new ModelManager(new Catalog(), new"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            LoanRecords(), getTypicalBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_allFieldsSpecified_success() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //serves BOB"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new ServeCommand(new BorrowerId(VALID_ID_BOB)).execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower editedBorrower \u003d new BorrowerBuilder(BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand.EditBorrowerDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new EditBorrowerDescriptorBuilder(editedBorrower).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand editBorrowerCommand \u003d new EditBorrowerCommand(descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String expectedMessage \u003d String.format(EditBorrowerCommand.MESSAGE_EDIT_BORROWER_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                editedBorrower.toFullString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new Catalog(new Catalog()), new LoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        expectedModel.setBorrower(model.getServingBorrower(), editedBorrower);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertCommandSuccess(editBorrowerCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_someFieldsSpecified_success() throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //serves BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new ServeCommand(new BorrowerId(VALID_ID_BOB)).execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerBuilder borrowerInList \u003d new BorrowerBuilder(borrower);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower editedBorrower \u003d borrowerInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand.EditBorrowerDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new EditBorrowerDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand editCommand \u003d new EditBorrowerCommand(descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String expectedMessage \u003d String.format(EditBorrowerCommand.MESSAGE_EDIT_BORROWER_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                editedBorrower.toFullString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new Catalog(), new LoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        expectedModel.setBorrower(borrower, editedBorrower);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_noFieldSpecified_success() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //serves BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new ServeCommand(new BorrowerId(VALID_ID_BOB)).execute(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand editCommand \u003d new EditBorrowerCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new EditBorrowerCommand.EditBorrowerDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower editedBorrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String expectedMessage \u003d String.format(EditBorrowerCommand.MESSAGE_EDIT_BORROWER_SUCCESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                editedBorrower.toFullString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new Catalog(), new LoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_duplicateBorrower_failure() throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //serves BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new ServeCommand(new BorrowerId(VALID_ID_BOB)).execute(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand.EditBorrowerDescriptor descriptor \u003d new EditBorrowerDescriptorBuilder(FIONA).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand editCommand \u003d new EditBorrowerCommand(descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_DUPLICATE_BORROWER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void equals() throws CommandException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        final EditBorrowerCommand standardCommand \u003d new EditBorrowerCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                DESC_AMY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand.EditBorrowerDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new EditBorrowerCommand.EditBorrowerDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new EditBorrowerCommand(copyDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different borrowerId -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBorrowerCommand(DESC_BOB)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBorrowerCommand(DESC_BOB)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new BookPredicate().setTitle(VALID_TITLE_BOOK_1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new BookPredicate().setTitle(VALID_TITLE_BOOK_2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void execute_oneKeyword_multipleBooksFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(\"the\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(Arrays.asList(BOOK_2, BOOK_3, BOOK_4), model.getFilteredBookList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void execute_multipleKeywords_multipleBooksFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setGenres(\"FICTION\", \"ACTION\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertEquals(Arrays.asList(BOOK_2, BOOK_4), model.getFilteredBookList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 10,
      "-": 53,
      "shiyao821": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InfoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class InfoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_validArguments_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InfoCommand infoCommand \u003d new InfoCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book target \u003d model.getFilteredBookList().get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(InfoCommand.MESSAGE_BOOK_INFO, target.getTitle());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new Catalog(model.getCatalog()), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(target.getTitle().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(infoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InfoCommand infoCommand \u003d new InfoCommand(Index.fromOneBased(10));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(infoCommand, model, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoanCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_ON_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_7;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.HOON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.UserSettingsBuilder.DEFAULT_LOAN_PERIOD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.LoanSlipUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_nullSerialNumber_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_validUnloanedBook_loanSuccessful() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber toLoan \u003d BOOK_1.getSerialNumber();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d HOON.getBorrowerId();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand \u003d new LoanCommand(toLoan);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loan \u003d new Loan(new LoanId(\"L000001\"), toLoan, servingBorrowerId,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(DEFAULT_LOAN_PERIOD));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book loanedOutBook \u003d BOOK_1.loanOut(loan);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book updatedLoanedOutBook \u003d loanedOutBook.updateLoanHistory(loan);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d loanCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(LoanCommand.MESSAGE_SUCCESS, updatedLoanedOutBook,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                model.getServingBorrower());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanList updatedHistory \u003d new LoanList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        updatedHistory.add(loan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(model.getServingBorrower().hasCurrentLoan(loan));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(updatedLoanedOutBook.getLoanHistory(), updatedHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_notInServeMode_loanUnsuccessful() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber toLoan \u003d BOOK_1.getSerialNumber();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand \u003d new LoanCommand(toLoan);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d loanCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_noSuchBook_loanUnsuccessful() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber toLoan \u003d BOOK_1.getSerialNumber();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d HOON.getBorrowerId();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(new Catalog(), new LoanRecords(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand \u003d new LoanCommand(toLoan);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d loanCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_SUCH_BOOK;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_bookAlreadyOnLoan_loanUnsuccessful() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber toLoan \u003d BOOK_7.getSerialNumber();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d HOON.getBorrowerId();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book onLoan \u003d new BookBuilder(BOOK_7).withLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(onLoan);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, new LoanRecords(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand \u003d new LoanCommand(toLoan);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d loanCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            LoanSlipUtil.unmountLoans();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOK_ON_LOAN, BOOK_7);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand1 \u003d new LoanCommand(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand2 \u003d new LoanCommand(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand3 \u003d new LoanCommand(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_2));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanCommand1.equals(loanCommand1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanCommand1.equals(loanCommand2));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanCommand1.equals(loanCommand3));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanCommand1.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanCommand1.equals(1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 23,
      "seeziyang": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PayCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_OUTSTANDING_FINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CENT_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.IDA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.JANNA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_8;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_9;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.FineUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class PayCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_outstandingFines_paymentSuccessful() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(JANNA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_8);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_9);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model actualModel \u003d new ModelManager(new Catalog(), loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        actualModel.setServingBorrower(JANNA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Catalog(), new LoanRecords(loanRecords),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerRecords(borrowerRecords), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        expectedModel.setServingBorrower(JANNA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        PayCommand payCommand \u003d new PayCommand(VALID_CENT_AMOUNT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int change \u003d expectedModel.payFines(VALID_CENT_AMOUNT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String amountPaidInDollars \u003d FineUtil.centsToDollarString(VALID_CENT_AMOUNT - change);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String outstandingFineInDollars \u003d FineUtil.centsToDollarString("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                expectedModel.getServingBorrower().getOutstandingFineAmount());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String changeInDollars \u003d FineUtil.centsToDollarString(change);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(PayCommand.MESSAGE_SUCCESS, amountPaidInDollars, JANNA,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                outstandingFineInDollars, changeInDollars);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertCommandSuccess(payCommand, actualModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_notInServeMode_paymentUnsuccessful() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(JANNA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_8);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_9);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(new Catalog(), loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        PayCommand payCommand \u003d new PayCommand(VALID_CENT_AMOUNT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d payCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_noOutstandingFines_paymentUnsuccessful() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(new Catalog(), new LoanRecords(), borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(IDA);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        PayCommand payCommand \u003d new PayCommand(VALID_CENT_AMOUNT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d payCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_OUTSTANDING_FINE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        PayCommand payCommand1 \u003d new PayCommand(VALID_CENT_AMOUNT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        PayCommand payCommand2 \u003d new PayCommand(VALID_CENT_AMOUNT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        PayCommand payCommand3 \u003d new PayCommand(VALID_CENT_AMOUNT + 10);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(payCommand1.equals(payCommand1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(payCommand1.equals(payCommand2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(payCommand1.equals(payCommand3));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(payCommand1.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(payCommand1.equals(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BORROWER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class RegisterCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_nullBorrower_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RegisterCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_borrowerAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower validBorrower \u003d new BorrowerBuilder().actualBuild();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        CommandResult commandResult \u003d new RegisterCommand(validBorrower).execute(modelManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(String.format(RegisterCommand.MESSAGE_SUCCESS, validBorrower.toFullString()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(Arrays.asList(validBorrower), modelManager.getBorrowerRecords().getBorrowerList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_duplicateBorrower_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower validBorrower \u003d new BorrowerBuilder().actualBuild();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerCommand \u003d new RegisterCommand(validBorrower);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        registerCommand.execute(modelManager);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerCommand2 \u003d new RegisterCommand(validBorrower);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_BORROWER, () -\u003e registerCommand2.execute(modelManager));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower a \u003d new BorrowerBuilder().withName(\"A\").actualBuild();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower b \u003d new BorrowerBuilder().withName(\"B\").actualBuild();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerACommand \u003d new RegisterCommand(a);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerBCommand \u003d new RegisterCommand(b);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(registerACommand.equals(registerACommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerACommandCopy \u003d new RegisterCommand(a);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(registerACommand.equals(registerACommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(registerACommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(registerACommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(registerACommand.equals(registerBCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 70,
      "seeziyang": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RenewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_CANNOT_BE_RENEWED_ANYMORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_IS_OVERDUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_7;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.IDA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.UserSettingsBuilder.DEFAULT_RENEW_PERIOD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class RenewCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RenewCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_validLoanedBook_renewSuccessful() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d IDA.getBorrowerId();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book onLoan \u003d new BookBuilder(BOOK_7).withLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(onLoan);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model actualModel \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        actualModel.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Catalog(catalog), new LoanRecords(loanRecords),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerRecords(borrowerRecords), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        expectedModel.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand renewCommand \u003d new RenewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate extendedDueDate \u003d DateUtil.extendDate(LOAN_7.getDueDate(), DEFAULT_RENEW_PERIOD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan renewedLoan \u003d new LoanBuilder(LOAN_7).withDueDate(extendedDueDate.toString())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .withRenewCount(1).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book renewedBook \u003d new BookBuilder(BOOK_7).withLoan(renewedLoan).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.setBook(BOOK_7, renewedBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        expectedModel.servingBorrowerRenewLoan(LOAN_7, renewedLoan);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        expectedModel.updateLoan(LOAN_7, renewedLoan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(RenewCommand.MESSAGE_SUCCESS, renewedBook,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                expectedModel.getServingBorrower(), extendedDueDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertCommandSuccess(renewCommand, actualModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_notInServeMode_renewUnsuccessful() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book onLoan \u003d new BookBuilder(BOOK_7).withLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(onLoan);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand renewCommand \u003d new RenewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d renewCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_noSuchIndex_renewUnsuccessful() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d IDA.getBorrowerId();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book onLoan \u003d new BookBuilder(BOOK_7).withLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(onLoan);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand renewCommand \u003d new RenewCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d renewCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_maxRenewsMet_renewUnsuccessful() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan maxRenewedLoan \u003d new LoanBuilder(LOAN_7).withRenewCount(3).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(maxRenewedLoan);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book maxRenewedBook \u003d new BookBuilder(BOOK_7).withLoan(maxRenewedLoan).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.addBook(maxRenewedBook);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower borrower \u003d new BorrowerBuilder(IDA).withCurrentLoan(maxRenewedLoan).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(borrower);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(borrower);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand renewCommand \u003d new RenewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d renewCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOK_CANNOT_BE_RENEWED_ANYMORE, maxRenewedBook);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_bookOverdue_renewUnsuccessful() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan overdueLoan \u003d new LoanBuilder(LOAN_7).withStartDate(\"2000-10-10\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .withDueDate(\"2000-10-24\").build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(overdueLoan);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book overdueBook \u003d new BookBuilder(BOOK_7).withLoan(overdueLoan).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.addBook(overdueBook);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower borrower \u003d new BorrowerBuilder(IDA).withCurrentLoan(overdueLoan).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(borrower);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(borrower);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand renewCommand \u003d new RenewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d renewCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOK_IS_OVERDUE, overdueBook);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand renewCommand1 \u003d new RenewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand renewCommand2 \u003d new RenewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        RenewCommand renewCommand3 \u003d new RenewCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(renewCommand1.equals(renewCommand1));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(renewCommand1.equals(renewCommand2));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(renewCommand1.equals(renewCommand3));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(renewCommand1.equals(null));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(renewCommand1.equals(1));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 11,
      "seeziyang": 206
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReturnCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_7;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.HOON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.IDA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.FineUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class ReturnCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReturnCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_validLoanedBook_returnSuccessful() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d IDA.getBorrowerId();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book onLoan \u003d new BookBuilder(BOOK_7).withLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(onLoan);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book returnedBook \u003d onLoan.returnBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d returnCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(ReturnCommand.MESSAGE_SUCCESS, returnedBook, model.getServingBorrower(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                FineUtil.centsToDollarString(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(model.getServingBorrower().hasCurrentLoan(LOAN_7));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_notInServeMode_returnUnsuccessful() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book onLoan \u003d new BookBuilder(BOOK_7).withLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(onLoan);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d returnCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_noSuchIndex_returnUnsuccessful() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(new Catalog(), new LoanRecords(), borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(HOON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d returnCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand1 \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand2 \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand3 \u003d new ReturnCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(returnCommand1.equals(returnCommand1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(returnCommand1.equals(returnCommand2));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(returnCommand1.equals(returnCommand3));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(returnCommand1.equals(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(returnCommand1.equals(1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 10,
      "seeziyang": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ServeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BORROWER_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class ServeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_nullBorrowerId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ServeCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_borrowerIdAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new RegisterCommand(BOB).execute(modelManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId validBorrowerId \u003d new BorrowerId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        CommandResult commandResult \u003d new ServeCommand(validBorrowerId).execute(modelManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(String.format(ServeCommand.MESSAGE_SUCCESS, BOB),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_borrowerIdNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId invalidId \u003d new BorrowerId(VALID_ID_AMY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ServeCommand serveCommand \u003d new ServeCommand(invalidId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Assert.assertThrows(CommandException.class, MESSAGE_NO_SUCH_BORROWER_ID, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                serveCommand.execute(modelManager));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_USER_SETTINGS_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_USER_SETTINGS_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.SetUserSettingsDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.TypicalUserSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.UserSettingsBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            new ModelManager(new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings editedUserSettings \u003d new UserSettingsBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder(editedUserSettings)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String expectedMessage \u003d String.format(SetCommand.MESSAGE_SET_USER_SETTINGS_SUCCESS, editedUserSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings userSettings \u003d new UserSettings(UserSettingsBuilder.DEFAULT_LOAN_PERIOD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                UserSettingsBuilder.DEFAULT_RENEW_PERIOD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                UserSettingsBuilder.DEFAULT_FINE_INCREMENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                UserSettingsBuilder.DEFAULT_MAX_RENEWS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedModel.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void execute_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedModel.setUserSettings(TypicalUserSettings.PARTIAL_USER_SETTINGS_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String expectedMessage \u003d String.format(SetCommand.MESSAGE_SET_USER_SETTINGS_SUCCESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                TypicalUserSettings.PARTIAL_USER_SETTINGS_1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void execute_noFieldSpecified_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(new SetCommand.SetUserSettingsDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String expectedMessage \u003d String.format(SetCommand.MESSAGE_SET_USER_SETTINGS_SUCCESS, new UserSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        final SetCommand standardCommand \u003d new SetCommand(DESC_USER_SETTINGS_1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new SetCommand.SetUserSettingsDescriptor(DESC_USER_SETTINGS_1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand commandWithSameValues \u003d new SetCommand(copyDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertNotEquals(standardCommand, new ClearCommand());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertNotEquals(standardCommand, new SetCommand(DESC_USER_SETTINGS_2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 105,
      "seeziyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnregisterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BORROWER_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ID_FIRST_BORROWER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.getTypicalBorrowerRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class UnregisterCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            new Catalog(), new LoanRecords(), getTypicalBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_nullBorrowerId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnregisterCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_validSerialNumber_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        UnregisterCommand command \u003d new UnregisterCommand(ID_FIRST_BORROWER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String expectedMessage \u003d String.format(UnregisterCommand.MESSAGE_SUCCESS, ALICE.toFullString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        expectedModel.unregisterBorrower(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_invalidSerialNumber_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId outOfBoundBorrowerId \u003d new BorrowerId(\"K9999\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        UnregisterCommand command \u003d new UnregisterCommand(outOfBoundBorrowerId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_NO_SUCH_BORROWER_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_TITLE_TOO_LONG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_ACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_FICTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENRE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SERIAL_NUMBER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_FICTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String EXTRA_CHAR \u003d \"a\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String LONG_TITLE_BOOK \u003d \"qwertyuiopasdfghjklzxcvbnmqwer\"; // 30 char long"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String LONG_TITLE_DESC_BOOK \u003d \" t/qwertyuiopasdfghjklzxcvbnmqwer\"; // 30 char long with prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_FICTION).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_BOOK_1 + SERIAL_NUMBER_DESC_BOOK_1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + AUTHOR_DESC_BOOK_1 + GENRE_DESC_FICTION, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //need to add test to check unique serial number"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // multiple genres - all accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBookMultipleTags \u003d new BookBuilder(BOOK_2).withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + GENRE_DESC_FICTION + GENRE_DESC_ACTION, new AddCommand(expectedBookMultipleTags));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOOK_1).withGenres().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOOK_1 + SERIAL_NUMBER_DESC_BOOK_1 + AUTHOR_DESC_BOOK_1,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // missing serial number"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOOK_1 + AUTHOR_DESC_BOOK_1,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // missing author prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + VALID_AUTHOR_BOOK_2,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOOK_2 + VALID_SERIAL_NUMBER_BOOK_2 + VALID_AUTHOR_BOOK_2,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // invalid serial number"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOOK_2 + INVALID_SERIAL_NUMBER_DESC + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + GENRE_DESC_ACTION + GENRE_DESC_FICTION, SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // invalid genre"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + INVALID_GENRE_DESC + VALID_GENRE_FICTION, Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOOK_2 + INVALID_SERIAL_NUMBER_DESC + AUTHOR_DESC_BOOK_2,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + AUTHOR_DESC_BOOK_2 + GENRE_DESC_ACTION + GENRE_DESC_FICTION,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_titleTooLong_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, LONG_TITLE_DESC_BOOK + EXTRA_CHAR + SERIAL_NUMBER_DESC_BOOK_1 + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + GENRE_DESC_ACTION + GENRE_DESC_FICTION, MESSAGE_BOOK_TITLE_TOO_LONG);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_titleCorrectLength_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book toAdd \u003d new BookBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withTitle(LONG_TITLE_BOOK)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_2)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, LONG_TITLE_DESC_BOOK + SERIAL_NUMBER_DESC_BOOK_1 + AUTHOR_DESC_BOOK_2,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new AddCommand(toAdd));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 77,
      "seeziyang": 1,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String argsString \u003d \"  some random string /t genre with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CatalogParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteByIndexCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteBySerialNumberCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.EditBorrowerCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.RenewCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerIdGenerator;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.EditBorrowerDescriptorBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.SetUserSettingsDescriptorBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.UserSettingsBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.UserSettingsUtil;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class CatalogParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String SPACE_AND_VALID_INDEX \u003d \" 3\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String SPACE_AND_VALID_DOLLAR_AMOUNT \u003d \" $1.23\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final CatalogParser parser \u003d new CatalogParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(BookUtil.getAddCommand(book));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new AddCommand(book), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + SPACE_AND_VALID_INDEX) instanceof ClearCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseCommand_deleteByIndex() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand command \u003d (DeleteByIndexCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DeleteByIndexCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new DeleteByIndexCommand(INDEX_FIRST_BOOK), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseCommand_deleteBySerialNumber() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand command \u003d (DeleteBySerialNumberCommand) parser.parseCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DeleteBySerialNumberCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        + \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new DeleteBySerialNumberCommand(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1)), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower \u003d new BorrowerBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand.EditBorrowerDescriptor descriptor \u003d new EditBorrowerDescriptorBuilder(borrower)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand command \u003d (EditBorrowerCommand) parser.parseCommand(EditBorrowerCommand"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .EditBorrowerDescriptor.COMMAND_WORD + \" \" + BorrowerUtil.getEditBorrowerDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(new EditBorrowerCommand(descriptor), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + SPACE_AND_VALID_INDEX) instanceof ExitCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(BookUtil.getFindCommand(book));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertEquals(new FindCommand(new BookPredicate()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .setTitle(book.getTitle().value)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .setAuthor(book.getAuthor().value)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .setSerialNumber(book.getSerialNumber().value)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .setGenres(book.getGenres())), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + SPACE_AND_VALID_INDEX) instanceof HelpCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_loan() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                LoanCommand.COMMAND_WORD + \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                instanceof LoanCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_register() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(new BorrowerRecords());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                RegisterCommand.COMMAND_WORD + \" \" + PREFIX_NAME + VALID_NAME_AMY + \" \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                        + PREFIX_PHONE + VALID_PHONE_AMY + \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                instanceof RegisterCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_serve() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                ServeCommand.COMMAND_WORD + \" \" + PREFIX_BORROWER_ID + VALID_BORROWER_ID_1)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                instanceof ServeCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(DoneCommand.COMMAND_WORD) instanceof DoneCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(DoneCommand.COMMAND_WORD + SPACE_AND_VALID_INDEX) instanceof DoneCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_return() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(ReturnCommand.COMMAND_WORD + SPACE_AND_VALID_INDEX) instanceof ReturnCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_renew() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(RenewCommand.COMMAND_WORD + SPACE_AND_VALID_INDEX) instanceof RenewCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parseCommand_set() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings userSettings \u003d new UserSettingsBuilder().build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder(userSettings).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand command \u003d (SetCommand) parser.parseCommand(SetCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                + UserSettingsUtil.getSetUserSettingsDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertEquals(new SetCommand(descriptor), command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_pay() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(PayCommand.COMMAND_WORD + SPACE_AND_VALID_DOLLAR_AMOUNT)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                instanceof PayCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 14,
      "hoholyin": 28,
      "seeziyang": 69,
      "Cronyxx": 14,
      "-": 58,
      "shiyao821": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new AssertionError(ce.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new AssertionError(ce.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 5,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteByIndexCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteBySerialNumberCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * outside of the DeleteByIndexCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * same path through the DeleteByIndexCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_validArgs_returnsIndexDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteByIndexCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_validArgs_returnsSerialNumberDeleteCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, SERIAL_NUMBER_DESC_BOOK_1, new DeleteBySerialNumberCommand(sn));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_invalidSerialNumber_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \" sn/B0001\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(MESSAGE_INVALID_SERIAL_NUMBER, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 25,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new DoneCommand());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.EditBorrowerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.EditBorrowerCommand.EditBorrowerDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.EditBorrowerDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_GENRE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBorrowerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE, EditBorrowerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, \"\", EditBorrowerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_notInServeMode_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE, EditBorrowerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //invalid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC + VALID_EMAIL_AMY,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_allFieldsSpecified_success() throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String userInput \u003d NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerDescriptor descriptor \u003d new EditBorrowerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand expectedCommand \u003d new EditBorrowerCommand(descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_someFieldsSpecified_success() throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String userInput \u003d NAME_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerDescriptor descriptor \u003d new EditBorrowerDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand expectedCommand \u003d new EditBorrowerCommand(descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_oneFieldSpecified_success() throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String userInput \u003d NAME_DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerDescriptor descriptor \u003d new EditBorrowerDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        EditBorrowerCommand expectedCommand \u003d new EditBorrowerCommand(descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        userInput \u003d PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor \u003d new EditBorrowerDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        expectedCommand \u003d new EditBorrowerCommand(descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        userInput \u003d EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor \u003d new EditBorrowerDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        expectedCommand \u003d new EditBorrowerCommand(descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 41,
      "hoholyin": 2,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_FICTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String SPACES \u003d \"     \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, SPACES,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new FindCommand(new BookPredicate()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        .setTitle(\"Harry Potter\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        .setAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        .setGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        .setLoanState(Flag.LOANED));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertParseSuccess(parser, \" t/Harry Potter\" + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + PREFIX_AUTHOR + VALID_AUTHOR_BOOK_1 + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_1 + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + PREFIX_GENRE + VALID_GENRE_FICTION + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + PREFIX_GENRE + VALID_GENRE_ACTION + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + \"-loaned\", expectedFindCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertParseSuccess(parser, SPACES + \" t/ Harry Potter \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + PREFIX_AUTHOR + SPACES + VALID_AUTHOR_BOOK_1 + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + PREFIX_SERIAL_NUMBER + SPACES + VALID_SERIAL_NUMBER_BOOK_1 + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + PREFIX_GENRE + SPACES + VALID_GENRE_FICTION + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + PREFIX_GENRE + VALID_GENRE_ACTION + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                + SPACES + \"-loaned\", expectedFindCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void parse_duplicateLoanState_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertParseFailure(parser, \" -loaned -available\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                Messages.MESSAGE_LOAN_STATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "-": 27,
      "shiyao821": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InfoCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class InfoCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_INDEX_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_INDEX_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String SPACES \u003d \"     \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InfoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private InfoCommandParser parser \u003d new InfoCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_nullArguments_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, SPACES, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_invalidArguments_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + \" \" + VALID_INDEX_ONE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + \" \" + VALID_INDEX_TWO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \" some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_validArgument_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InfoCommand expectedCommand1 \u003d new InfoCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_ONE, expectedCommand1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InfoCommand expectedCommand2 \u003d new InfoCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_TWO, expectedCommand2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoanCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SERIAL_NUMBER_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanCommandParser loanCommandParser \u003d new LoanCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber bookSn \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseSuccess(loanCommandParser, SERIAL_NUMBER_DESC_BOOK_1, new LoanCommand(bookSn));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(loanCommandParser, EMPTY_STRING,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(loanCommandParser, INVALID_SERIAL_NUMBER_DESC, SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_DOLLAR_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"\u0026HarryBotter\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String INVALID_SERIAL_NUMBER \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String INVALID_GENRE \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Harry Botter\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_SERIAL_NUMBER \u003d \"B03456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String VALID_AUTHOR \u003d \"J K Rowling\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String VALID_GENRE_1 \u003d \"FICTION\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String VALID_GENRE_2 \u003d \"ACTION\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseDollar_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDollar(\"9.1234\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDollar(\"0\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDollar(\"-2.43\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseDollar_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_DOLLAR_AMOUNT, ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            -\u003e ParserUtil.parseDollar(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseDollar_validInput_success() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(0.01, ParserUtil.parseDollar(\"0.01\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(99.99, ParserUtil.parseDollar(\"99.99\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(Integer.MAX_VALUE / 100,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                ParserUtil.parseDollar(Integer.toString(Integer.MAX_VALUE / 100)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(nameWithWhitespace));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseSerialNumber_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSerialNumber((String) null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseSerialNumber_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSerialNumber(INVALID_SERIAL_NUMBER));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseSerialNumber_validValueWithoutWhitespace_returnsSerialNumber() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber expectedSerialNumber \u003d new SerialNumber(VALID_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedSerialNumber, ParserUtil.parseSerialNumber(VALID_SERIAL_NUMBER));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseSerialNumber_validValueWithWhitespace_returnsTrimmedSerialNumber() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String serialNumberWithWhitespace \u003d WHITESPACE + VALID_SERIAL_NUMBER + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber expectedSerialNumber \u003d new SerialNumber(VALID_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedSerialNumber, ParserUtil.parseSerialNumber(serialNumberWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseAuthor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAuthor((String) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseAuthor_validValueWithoutWhitespace_returnsAuthor() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author expectedAuthor \u003d new Author(VALID_AUTHOR);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedAuthor, ParserUtil.parseAuthor(VALID_AUTHOR));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseAuthor_validValueWithWhitespace_returnsTrimmedAuthor() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String authorWithWhitespace \u003d WHITESPACE + VALID_AUTHOR + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author expectedAuthor \u003d new Author(VALID_AUTHOR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedAuthor, ParserUtil.parseAuthor(authorWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenre_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGenre(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenre_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGenre(INVALID_GENRE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenre_validValueWithoutWhitespace_returnsGenre() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Genre expectedGenre \u003d new Genre(VALID_GENRE_1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedGenre, ParserUtil.parseGenre(VALID_GENRE_1));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenre_validValueWithWhitespace_returnsTrimmedGenre() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String genreWithWhitespace \u003d WHITESPACE + VALID_GENRE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Genre expectedGenre \u003d new Genre(VALID_GENRE_1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedGenre, ParserUtil.parseGenre(genreWithWhitespace));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenres_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGenres(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenres_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGenres(Arrays.asList(VALID_GENRE_1, INVALID_GENRE)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenres_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(ParserUtil.parseGenres(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenres_collectionWithValidTags_returnsGenreSet() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Set\u003cGenre\u003e actualGenreSet \u003d ParserUtil.parseGenres(Arrays.asList(VALID_GENRE_1, VALID_GENRE_2));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Set\u003cGenre\u003e expectedGenreSet \u003d new HashSet\u003cGenre\u003e(Arrays.asList(new Genre(VALID_GENRE_1),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new Genre(VALID_GENRE_2)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedGenreSet, actualGenreSet);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 60,
      "seeziyang": 13,
      "-": 109,
      "shiyao821": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PayCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class PayCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String VALID_DOLLAR_AMOUNT \u003d \" $1.23\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final int VALID_DOLLAR_AMOUNT_IN_CENTS \u003d 123;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String INVALID_DOLLAR_AMOUNT \u003d \" $aa\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private PayCommandParser payCommandParser \u003d new PayCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseSuccess(payCommandParser, VALID_DOLLAR_AMOUNT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new PayCommand(VALID_DOLLAR_AMOUNT_IN_CENTS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(payCommandParser, EMPTY_STRING,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(payCommandParser, INVALID_DOLLAR_AMOUNT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RegisterCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerIdGenerator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class RegisterCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private RegisterCommandParser parser \u003d new RegisterCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(new BorrowerRecords());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower expectedBorrower \u003d new BorrowerBuilder(AMY).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                + EMAIL_DESC_AMY, new RegisterCommand(expectedBorrower));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, EMAIL_DESC_AMY + PHONE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + EMAIL_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + PHONE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 44,
      "seeziyang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RenewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.RenewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class RenewCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String VALID_INDEX_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private RenewCommandParser renewCommandParser \u003d new RenewCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Index index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseSuccess(renewCommandParser, VALID_INDEX_ONE, new RenewCommand(index));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(renewCommandParser, EMPTY_STRING,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(renewCommandParser, INVALID_INDEX,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ReturnCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class ReturnCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String VALID_INDEX_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private ReturnCommandParser returnCommandParser \u003d new ReturnCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Index index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseSuccess(returnCommandParser, VALID_INDEX_ONE, new ReturnCommand(index));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(returnCommandParser, EMPTY_STRING,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReturnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(returnCommandParser, INVALID_INDEX,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReturnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ServeCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BORROWER_ID_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class ServeCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private ServeCommandParser parser \u003d new ServeCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_allFieldsPresent_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId expectedBorrowerId \u003d new BorrowerId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + BORROWER_ID_DESC_BOB,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new ServeCommand(expectedBorrowerId));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ServeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FINE_INCREMENT_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOAN_PERIOD_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RENEW_PERIOD_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_1_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_2_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_2_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RENEW_PERIOD_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RENEW_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RENEW_PERIOD_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RENEW_PERIOD_2_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand.SetUserSettingsDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.SetUserSettingsDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private SetCommandParser parser \u003d new SetCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, \"\", SetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, \" some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, \" i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loan period"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_LOAN_PERIOD_DESC, LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid renew period"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_RENEW_PERIOD_DESC, RenewPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid fine increment"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_FINE_INCREMENT_DESC, FineIncrement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loan period followed by valid renew period"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_LOAN_PERIOD_DESC + VALID_RENEW_PERIOD_1_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid renew period followed by valid loan period"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_RENEW_PERIOD_DESC + VALID_LOAN_PERIOD_1_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                RenewPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // valid loan period followed by invalid renew period"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, VALID_LOAN_PERIOD_1_DESC + INVALID_RENEW_PERIOD_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                RenewPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // Invalid fine increment followed by valid renew period"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_FINE_INCREMENT_DESC + VALID_RENEW_PERIOD_1_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                FineIncrement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loan period followed by valid fine increment"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_LOAN_PERIOD_DESC + VALID_FINE_INCREMENT_1_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // multiple invalid values, but only the first invalid value that is checked by parser is captured"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_FINE_INCREMENT_DESC"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        + INVALID_LOAN_PERIOD_DESC + INVALID_RENEW_PERIOD_DESC, LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d VALID_LOAN_PERIOD_1_DESC + VALID_RENEW_PERIOD_1_DESC + VALID_FINE_INCREMENT_1_DESC;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_1)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d VALID_LOAN_PERIOD_1_DESC + VALID_FINE_INCREMENT_1_DESC;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // loan period"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d VALID_LOAN_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // renew period"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        userInput \u003d VALID_RENEW_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_1)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // fine increment"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        userInput \u003d VALID_FINE_INCREMENT_1_DESC;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d VALID_LOAN_PERIOD_1_DESC + VALID_RENEW_PERIOD_1_DESC"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                + VALID_FINE_INCREMENT_1_DESC + VALID_LOAN_PERIOD_2_DESC + VALID_RENEW_PERIOD_2_DESC"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                + VALID_FINE_INCREMENT_2_DESC;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_2)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_2)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d INVALID_LOAN_PERIOD_DESC + VALID_LOAN_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        userInput \u003d VALID_LOAN_PERIOD_1_DESC + INVALID_RENEW_PERIOD_DESC + VALID_RENEW_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_1)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnregisterCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ID_DESC_FIRST_BORROWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ID_FIRST_BORROWER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.UnregisterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class UnregisterCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private UnregisterCommandParser parser \u003d new UnregisterCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_validArgs_returnsUnregisterCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_FIRST_BORROWER, new UnregisterCommand(ID_FIRST_BORROWER));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, \"1234\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnregisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BorrowerRecordsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.IDA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.getTypicalBorrowerRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.exceptions.BorrowerNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.exceptions.DuplicateBorrowerException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerRecordsTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void checkIfBorrowerExists() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerRecords borrowers \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower borrower1 \u003d new BorrowerBuilder().actualBuild();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower2 \u003d new BorrowerBuilder().withPhone(\"12341234\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .withEmail(\"hello@yo.com\").actualBuild();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowers.addBorrower(borrower1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //return true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(borrowers.hasBorrower(borrower1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //return false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(borrowers.hasBorrower(borrower2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getBorrowerFromId_borrowerExists_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BorrowerRecords borrowers \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Borrower borrower \u003d borrowers.getBorrowerFromId(ALICE.getBorrowerId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(borrower, ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getBorrowerFromId_borrowerDoesNotExists_assertNullPointerExceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BorrowerRecords borrowers \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e borrowers.getBorrowerFromId(GEORGE.getBorrowerId()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(borrowerRecords.listContains(CARL));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(borrowerRecords.listContains(IDA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setBorrower_validTargetAndEdited_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanAddedCarl \u003d new Borrower(CARL.getName(), CARL.getPhone(), CARL.getEmail(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                CARL.getBorrowerId(), CARL.getAddedCurrentLoanList(LOAN_1), CARL.getReturnedLoanList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.setBorrower(CARL, loanAddedCarl);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(borrowerRecords.getBorrowerFromId(CARL.getBorrowerId()).hasCurrentLoan(LOAN_1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setBorrower_invalidTarget_throwsBorrowerNotFoundException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanAddedIda \u003d new Borrower(IDA.getName(), IDA.getPhone(), IDA.getEmail(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                IDA.getBorrowerId(), IDA.getAddedCurrentLoanList(LOAN_1), IDA.getReturnedLoanList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(BorrowerNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords.setBorrower(IDA, loanAddedIda));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setBorrower_invalidEdited_throwsDuplicateBorrowerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(DuplicateBorrowerException.class, () -\u003e borrowerRecords.setBorrower(ALICE, BENSON));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 22,
      "hoholyin": 18,
      "seeziyang": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CatalogTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.UserSettingsBuilder.DEFAULT_LOAN_PERIOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class CatalogTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(Collections.emptyList(), catalog.getBookList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e catalog.resetData(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData_withValidReadOnlyCatalog_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog newData \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(newData, catalog);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData_withDuplicateBookDifferentSerialNumber_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Two books with the same identity fields but different serial number"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook1 \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(BOOK_1, editedBook1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CatalogStub newData \u003d new CatalogStub(newBooks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData_withDuplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Two books with the same identity fields and same serial number"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook1 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(BOOK_1, editedBook1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CatalogStub newData \u003d new CatalogStub(newBooks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e catalog.resetData(newData));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e catalog.hasBook(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookNotInCatalog_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(catalog.hasBook(BOOK_1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookInCatalog_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(BOOK_1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(catalog.hasBook(BOOK_1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookWithSameIdentityFieldsInCatalog_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(BOOK_1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(catalog.hasBook(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e catalog.getBookList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getLoanedBooks_noBooksInCatalog_returnEmptyList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.resetData(new Catalog());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ObservableList\u003cBook\u003e loanedBooks \u003d catalog.getLoanedBooks();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(loanedBooks.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getAvailableBooks_noBooksInCatalog_returnEmptyList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.resetData(new Catalog());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ObservableList\u003cBook\u003e loanedBooks \u003d catalog.getAvailableBooks();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(loanedBooks.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getLoanedBooks_typicalCatalogWithLoanedBooks_returnsListOfLoanedBooks() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog newData \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId \u003d new LoanId(VALID_LOAN_ID);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber currentSerialNumber \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_4);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId currentBorrowerId \u003d new BorrowerId(VALID_BORROWER_ID_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan currentLoan \u003d new Loan(loanId, currentSerialNumber, currentBorrowerId,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(DEFAULT_LOAN_PERIOD));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedBook \u003d new BookBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_4).withLoan(currentLoan).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newData.addBook(loanedBook);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.resetData(newData);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ObservableList\u003cBook\u003e loanedBooks \u003d catalog.getLoanedBooks();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanedBooks.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanedBooks.get(0).equals(loanedBook));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getAvailableBooks_typicalCatalogWithLoanedBooks_returnsListOfAvailableBooks() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog newData \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId \u003d new LoanId(VALID_LOAN_ID);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber currentSerialNumber \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_4);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId currentBorrowerId \u003d new BorrowerId(VALID_BORROWER_ID_1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan currentLoan \u003d new Loan(loanId, currentSerialNumber, currentBorrowerId,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(DEFAULT_LOAN_PERIOD));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedBook \u003d new BookBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_4).withLoan(currentLoan).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newData.addBook(loanedBook);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.resetData(newData);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ObservableList\u003cBook\u003e availableBooks \u003d catalog.getAvailableBooks();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(availableBooks.size() \u003d\u003d 4);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(getTypicalCatalog().getBookList().equals(availableBooks));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameCatalog_returnsSameHashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog newData \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.resetData(newData);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(newData.hashCode(), catalog.hashCode());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static class CatalogStub implements ReadOnlyCatalog {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CatalogStub(Collection\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.books.setAll(books);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return books;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 131,
      "seeziyang": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/LoanRecordsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7_RETURNED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoans;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanRecordsTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_noArgument_emptyLoanRecords() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.getLoanCollection().isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.getLoansMap().isEmpty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords.getLoanCount(), 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void contructor_copiedLoanRecords_loanRecordsNotEmpty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords.getLoanCollection().size(), getTypicalLoans().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords.getLoansMap().size(), getTypicalLoans().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords.getLoanCount(), getTypicalLoans().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords, getTypicalLoanRecords());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getLoanCollection() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(new ArrayList\u003cLoan\u003e().addAll(loanRecords.getLoanCollection()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new ArrayList\u003cLoan\u003e().addAll(getTypicalLoans()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void hasLoan() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.hasLoan(LOAN_1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.hasLoan(LOAN_2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.hasLoan(LOAN_3.getLoanId()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanRecords.hasLoan(LOAN_7));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanRecords.hasLoan(LOAN_7.getLoanId()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void addLoan() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.hasLoan(LOAN_7));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void updateLoan() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.updateLoan(LOAN_7, LOAN_7_RETURNED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(loanRecords.getLoansMap().get(LOAN_7.getLoanId()).getReturnDate(), null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.JANNA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.getTypicalBorrowerRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_8;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_9;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoanRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.exceptions.NotInServeModeException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.CatalogBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new Catalog(), new Catalog(modelManager.getCatalog()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userPrefs.setCatalogFilePath(Paths.get(\"catalog/file/path\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userPrefs.setCatalogFilePath(Paths.get(\"new/catalog/file/path\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings_nullUserSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserSettings(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings_validUserSettings_setsUserSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        UserSettings userSettings \u003d new UserSettings(10, 10, 10, 10);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        modelManager.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertEquals(userSettings, modelManager.getUserSettings());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setCatalogFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCatalogFilePath(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setCatalogFilePath_validPath_setsCatalogFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Path path \u003d Paths.get(\"catalog/file/path\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        modelManager.setCatalogFilePath(path);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(path, modelManager.getCatalogFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setLoanRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLoanRecordsFilePath(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setLoanRecordsFilePath_validPath_setsLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Path path \u003d Paths.get(\"loan/record/file/path\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.setLoanRecordsFilePath(path);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(path, modelManager.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBorrowerRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setBorrowerRecordsFilePath(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBorrowerRecordsFilePath_validPath_setsBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Path path \u003d Paths.get(\"borrower/record/file/path\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        modelManager.setBorrowerRecordsFilePath(path);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(path, modelManager.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book book \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBook(book));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookNotInCatalog_returnsFalse() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(modelManager.hasBook(BOOK_1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookInCatalog_returnsTrue() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        modelManager.addBook(BOOK_1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(modelManager.hasBook(BOOK_1));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getOverdueBooks_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId \u003d new LoanId(VALID_LOAN_ID);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book toBeLoaned \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId currentBorrowerId \u003d new BorrowerId(VALID_BORROWER_ID_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loan \u003d new Loan(loanId, toBeLoaned.getSerialNumber(), currentBorrowerId,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayMinusDays(31), DateUtil.getTodayMinusDays(1));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedBook \u003d new BookBuilder(BOOK_1).withLoan(loan).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(loanedBook);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(BOOK_2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cBook\u003e overdueBooks \u003d modelManager.getOverdueBooks();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cBook\u003e expectedBooks \u003d modelManager.getCatalog()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .getBookList()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .filter(book -\u003e book.equals(BOOK_1))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(overdueBooks, expectedBooks);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getOverdueBooks_noOverdueBooks_returnEmptyList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // Book on loan but not overdue"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId \u003d new LoanId(VALID_LOAN_ID);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book toBeLoaned \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId currentBorrowerId \u003d new BorrowerId(VALID_BORROWER_ID_1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loan \u003d new Loan(loanId, toBeLoaned.getSerialNumber(), currentBorrowerId,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addLoan(loan);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedBook \u003d new BookBuilder(BOOK_1).withLoan(loan).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(loanedBook);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(BOOK_2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cBook\u003e overdueBooks \u003d modelManager.getOverdueBooks();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(overdueBooks.isEmpty());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // No books on loan"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.deleteBook(loanedBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(BOOK_1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        overdueBooks \u003d modelManager.getOverdueBooks();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(overdueBooks.isEmpty());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getServingBorrower_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e modelManager.getServingBorrower());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getBorrowerBooks_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e modelManager.getBorrowerBooks());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void getBorrowerBooks_noBooksBorrowed_returnEmptyList() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new RegisterCommand(BOB).execute(modelManager);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId validBorrowerId \u003d new BorrowerId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new ServeCommand(validBorrowerId).execute(modelManager);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(modelManager.getBorrowerBooks().isEmpty());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerNewLoan_inServeMode_success() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager(getTypicalCatalog(), getTypicalLoanRecords(),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                getTypicalBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.setServingBorrower(ALICE);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.servingBorrowerNewLoan(LOAN_1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(modelManager.getServingBorrower().hasCurrentLoan(LOAN_1));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerNewLoan_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                modelManager.servingBorrowerNewLoan(LOAN_1));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerReturnLoan_inServeMode_success() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager(getTypicalCatalog(), getTypicalLoanRecords(),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                getTypicalBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.setServingBorrower(ALICE);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.servingBorrowerNewLoan(LOAN_1);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan returnedLoan1 \u003d new LoanBuilder(LOAN_1).withReturnDate(\"2019-10-20\").build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.servingBorrowerReturnLoan(LOAN_1, returnedLoan1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(modelManager.getServingBorrower().hasCurrentLoan(LOAN_1));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerReturnLoan_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan returnedLoan1 \u003d new LoanBuilder(LOAN_1).withReturnDate(\"2019-10-20\").build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                modelManager.servingBorrowerReturnLoan(LOAN_1, returnedLoan1));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerRenewLoan_inServeMode_success() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager(getTypicalCatalog(), getTypicalLoanRecords(),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                getTypicalBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.setServingBorrower(ALICE);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.servingBorrowerNewLoan(LOAN_1);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan renewedLoan \u003d new LoanBuilder(LOAN_1).withDueDate(\"2019-10-30\").withRenewCount(1).build();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.servingBorrowerRenewLoan(LOAN_1, renewedLoan);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(modelManager.getServingBorrower().hasCurrentLoan(renewedLoan));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerRenewLoan_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager(getTypicalCatalog(), getTypicalLoanRecords(),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                getTypicalBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan renewedLoan \u003d new LoanBuilder(LOAN_1).withDueDate(\"2019-10-30\").withRenewCount(1).build();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                modelManager.servingBorrowerRenewLoan(LOAN_1, renewedLoan));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void payFine() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(JANNA);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_8);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_9);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager(new Catalog(), loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.setServingBorrower(JANNA);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.payFines(500);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(modelManager.getServingBorrower().getOutstandingFineAmount(), 0);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalog \u003d new CatalogBuilder().withPerson(BOOK_1).withPerson(BOOK_2).build();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalogCopy \u003d new CatalogBuilder().withPerson(BOOK_1).withPerson(BOOK_2).build();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog differentCatalog \u003d new Catalog();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UserPrefs userPrefsCopy \u003d new UserPrefs();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanRecords loanRecordsCopy \u003d new LoanRecords();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BorrowerRecords borrowerRecordsCopy \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        modelManager \u003d new ModelManager(catalog, loanRecords, borrowerRecords, userPrefs);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelManager modelManagerCopy \u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new ModelManager(catalogCopy, loanRecordsCopy, borrowerRecordsCopy, userPrefsCopy);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCatalog, loanRecords, borrowerRecords, userPrefs)));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String keywords \u003d BOOK_1.getTitle().value;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        modelManager.updateFilteredBookList(new BookPredicate().setTitle(keywords));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCatalog, loanRecords, borrowerRecords, userPrefs)));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        modelManager.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        differentUserPrefs.setCatalogFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(catalog, loanRecords, borrowerRecords, differentUserPrefs)));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 13,
      "hoholyin": 57,
      "seeziyang": 151,
      "Cronyxx": 11,
      "-": 115,
      "shiyao821": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings_nullUserSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setUserSettings(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setLoanRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setLoanRecordsFilePath(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setCatalogFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setCatalogFilePath(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setBorrowerRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setBorrowerRecordsFilePath(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 19,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/AuthorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class AuthorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Author(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals_sameAuthor_assertTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(new Author(VALID_AUTHOR_BOOK_1).equals(new Author(\"J K Rowling\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_author() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(new Author(VALID_AUTHOR_BOOK_1).toString().equals(\"J K Rowling\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameAuthor_assertsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author author1 \u003d new Author(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author author2 \u003d new Author(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(author1.hashCode() \u003d\u003d author2.hashCode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void isValidAuthor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Author.isValidAuthor(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // space only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\"   \")); // spaces only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \u003c- is crazy\")); // space at start"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // starting with non-alphanumeric characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"A\")); // 1 Alphabet"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"0\")); // 1 Number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"3DExpert\")); // numbers only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Maxi+millan-lan*1/1~max`i\")); // +-*/~`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Porter D KG the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Susan Suriana with a load of ;\u003c\u003e|}[]{:\\\"!@#$%)^\u0026*(\u0027\")); // Punctuation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 32,
      "shiyao821": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_FICTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_NONFICTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.logic.parser.Flag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class BookPredicateTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void isValid() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has no conditions -\u003e false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.isValid());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has title condition -\u003e true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate.setTitle(VALID_TITLE_BOOK_1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has author condition -\u003e true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setAuthor(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has serialNumber condition -\u003e true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has genres condition -\u003e true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has loan state -\u003e true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setLoanState(Flag.LOANED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has display limit -\u003e true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setDisplayLimit(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate1 \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate2 \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same title condition -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate1Copy \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different title condition -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1 \u003d new BookPredicate().setAuthor(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1Copy \u003d new BookPredicate().setAuthor(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate2 \u003d new BookPredicate().setAuthor(VALID_AUTHOR_BOOK_2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same author condition -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different author condition -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1 \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1Copy \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate2 \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same serialNumber condition -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different serialNumber condition -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1 \u003d new BookPredicate().setGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1Copy \u003d new BookPredicate().setGenres(VALID_GENRE_ACTION, VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate2 \u003d new BookPredicate().setGenres(VALID_GENRE_ACTION, VALID_GENRE_NONFICTION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same genres condition, different order -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different genres condition -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1 \u003d new BookPredicate().setLoanState(Flag.AVAILABLE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1Copy \u003d new BookPredicate().setLoanState(Flag.AVAILABLE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate2 \u003d new BookPredicate().setLoanState(Flag.OVERDUE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same loan state -\u003e true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different loan state -\u003e false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1 \u003d new BookPredicate().setDisplayLimit(1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1Copy \u003d new BookPredicate().setDisplayLimit(1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate2 \u003d new BookPredicate().setDisplayLimit(2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same display limit -\u003e true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different display limit -\u003e false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_titleCondition_returnsTrue() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(\"Harry\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"Harry Bob\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"haRry bOB\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // partial keywords"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"har\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_titleCondition_returnsFalse() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setTitle(\"\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // white space keywords"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setTitle(\"  \"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(\"Carol\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"Harry Drew\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withTitle(\"Harry Carol\").build()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Keywords match serial number, author and genre, but does not match title"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"12345\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(\"Harry\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(b));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_authorCondition_returnsTrue() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setAuthor(\"Harry\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setAuthor(\"Harry Bob\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setAuthor(\"haRry bOB\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // partial keywords"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"har\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_authorCondition_returnsFalse() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setAuthor(\"\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // white space keywords"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setAuthor(\"  \"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setAuthor(\"Carol\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withAuthor(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setAuthor(\"Harry Drew\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withAuthor(\"Harry Carol\").build()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Keywords match title, serial number and genre, but does not match author"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setAuthor(\"Orange\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withAuthor(\"Apple\")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(b));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_serialNumberCondition_returnsTrue() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1).build()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_serialNumberCondition_returnsFalse() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setSerialNumber(\"\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // white space keywords"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setSerialNumber(\"  \"));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Keywords match title, author and genre, but does not match serial number"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(b));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_genresCondition_returnsTrue() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Multiple keywords, different order"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(VALID_GENRE_ACTION, VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Mixed-case keywords allowed"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(\"ficTion\", \"Action\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_genresCondition_returnsFalse() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setGenres(\"\"));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // white space keywords"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setGenres(\"  \"));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Non-matching keyword will not pass"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setGenres(VALID_GENRE_NONFICTION);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Only one matching keyword will not pass predicate"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(VALID_GENRE_ACTION, VALID_GENRE_NONFICTION);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Keywords match title, author and serial number, but does not match genre"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setGenres(VALID_GENRE_NONFICTION);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(b));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // partial keywords -\u003e false"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withGenres(VALID_GENRE_ACTION, VALID_GENRE_NONFICTION).build()));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_loanStateCondition_returnsTrue() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // available"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setLoanState(Flag.AVAILABLE);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().build()));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // loaned"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setLoanState(Flag.LOANED);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withLoan(new LoanBuilder()"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withDueDate(DateUtil.getTodayPlusDays(30)).build()).build()));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withLoan(new LoanBuilder()"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withDueDate(DateUtil.getTodayMinusDays(1)).build()).build()));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // overdue"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setLoanState(Flag.OVERDUE);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withLoan(new LoanBuilder()"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withStartDate(DateUtil.getTodayMinusDays(30))"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withDueDate(DateUtil.getTodayMinusDays(1)).build()).build()));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_loanStateCondition_returnsFalse() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // predicate flagged available but book not available"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setLoanState(Flag.AVAILABLE);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withLoan(new LoanBuilder().build()).build()));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // predicate flagged loaned but book available"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setLoanState(Flag.LOANED);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().build()));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // predicate flagged overdue but book not overdue"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setLoanState(Flag.OVERDUE);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withLoan(new LoanBuilder()"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withDueDate(DateUtil.getTodayMinusDays(0)).build()).build()));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_displayLimit_returnsTrue() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setDisplayLimit(2);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // display limit \u003d 2"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().build()));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // display limit \u003d 1"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().build()));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_displayLimit_returnsFalse() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setDisplayLimit(1);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // display limit \u003d 1"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate.test(new BookBuilder().build());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // display limit \u003d 0"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().build()));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 44,
      "shiyao821": 317
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e book.getGenres().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_haveTitleDisplayed() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        boolean containsTag \u003d book.toString().contains(book.getTitle().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(containsTag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_haveAuthorDisplayed() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        boolean containsTag \u003d book.toString().contains(book.getAuthor().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(containsTag);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void isSameBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // will return true if book is same, regardless of serial number"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(BOOK_1.isSameBook(BOOK_1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.isSameBook(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different serial number and author -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook1 \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_2).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.isSameBook(editedBook1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedBook1 \u003d new BookBuilder(BOOK_1).withTitle(VALID_TITLE_BOOK_2)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.isSameBook(editedBook1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same attributes, different serial number -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedBook1 \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(BOOK_1.isSameBook(editedBook1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same title, different serial number, different genre -\u003e isSameBook returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedBook1 \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withGenres(VALID_GENRE_ACTION).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.isSameBook(editedBook1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same attributes, different genres -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedBook1 \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedBook1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // compares all attributes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book aliceCopy \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(BOOK_1.equals(aliceCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(BOOK_1.equals(BOOK_1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(5));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(BOOK_2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different name and serial number -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedA \u003d new BookBuilder(BOOK_1).withTitle(VALID_TITLE_BOOK_2)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedA));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different serial number -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedA \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedA));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different author -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedA \u003d new BookBuilder(BOOK_1).withAuthor(VALID_AUTHOR_BOOK_2)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedA));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different genres -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedA \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedA));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameBookSameHashCode_assertTrue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book1 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book2 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(book1.hashCode(), book2.hashCode());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getSerialNumber_sameBook_assertTrue() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book1 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(book1.getSerialNumber().equals(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_book() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book1 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        StringBuilder genres \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        book1.getGenres().forEach(genre -\u003e genres.append(genre + \" \"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String stringRep \u003d \"[\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + book1.getSerialNumber().toString()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + \"] \\\"\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + book1.getTitle().toString()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + \"\\\" by \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + book1.getAuthor().toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(book1.toString().equals(stringRep));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/SerialNumberGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class SerialNumberGeneratorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void generateSerialNumber_newCatalog_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00001\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00002\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00003\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00004\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00005\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void generateSerialNumber_typicalCatalog_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(getTypicalCatalog());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00005\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void generateSerialNumber_nonConcurrentSerialNumber_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalog \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book newBook \u003d new BookBuilder().withTitle(\"testBook\").withSerialNumber(\"B00006\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(newBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00005\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00007\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 37,
      "seeziyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/SerialNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_ACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_FICTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class SerialNumberTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SerialNumber(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_invalidSerialNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String invalidSerialNumber \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SerialNumber(invalidSerialNumber));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void isValidSerialNumber() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SerialNumber.isValidSerialNumber(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // invalid serial numbers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"B91\")); // less than 5 numbers"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"C00001\")); // different prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // valid serial numbers"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"B00911\")); // exactly 5 numbers"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"B00001\")); // smallest serial number"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"B99099\")); // largest serial number"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addSerialNumber_notUnique_assertCommandExceptionThrown() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalog \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Serial number B0002 is already in typical catalog"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book validBook2 \u003d new BookBuilder(BOOK_2).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandExceptionThrown(addCommand, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addSerialNumber_unique_assertParseSuccess() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOOK_2).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Serial number B0002 of BOOK_2 is not in empty new catalog"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + GENRE_DESC_ACTION + GENRE_DESC_FICTION, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_correctStringRepresentation_assertTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(SerialNumberGenerator.generateSerialNumber().toString().equals(\"B00001\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals_sameSerialNumber_assertTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn1 \u003d new SerialNumber(\"B00001\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn2 \u003d new SerialNumber(\"B00001\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(sn1.equals(sn2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameSerialNumberSameHashCode_assertTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn1 \u003d new SerialNumber(\"B00001\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn2 \u003d new SerialNumber(\"B00001\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(sn1.hashCode() \u003d\u003d sn2.hashCode());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Asserts if CommandException is being thrown."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param command command to be executed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param model model to be tested on."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void assertCommandExceptionThrown(AddCommand command, Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 117,
      "seeziyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // space only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(Title.isValidTitle(\"   \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \u003c- is crazy\")); // space at start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // starting with non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"A\")); // 1 Alphabet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"0\")); // 1 Number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Math for computers +-*/~`\")); // +-*/~`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"My Tale: A Story of Blah-blah \u0026 \\\"!@#$%)^\u0026*(\u0027\")); // Punctuation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 37,
      "shiyao821": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/UniqueBookListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class UniqueBookListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final UniqueBookList uniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void contains_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void contains_bookNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(uniqueBookList.contains(BOOK_1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void contains_bookInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(uniqueBookList.contains(BOOK_1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void contains_bookWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook1 \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(uniqueBookList.contains(editedBook1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void add_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void add_duplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.add(BOOK_1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_nullTargetBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(null, BOOK_1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_nullEditedBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(BOOK_1, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_targetBookNotInList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.setBook(BOOK_1, BOOK_1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_editedBookIsSameBook_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBook(BOOK_1, BOOK_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_editedBookHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBook(BOOK_1, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_editedBookHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBook(BOOK_1, BOOK_2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(BOOK_2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_editedBookHasNonUniqueIdentity_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBook(BOOK_1, BOOK_2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void remove_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void remove_bookDoesNotExist_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.remove(BOOK_1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void remove_existingBook_removesBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.remove(BOOK_1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_nullUniqueBookList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((UniqueBookList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_uniqueBookList_replacesOwnListWithProvidedUniqueBookList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(BOOK_2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBooks(expectedUniqueBookList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((List\u003cBook\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e bookList \u003d Collections.singletonList(BOOK_2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBooks(bookList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(BOOK_2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_listWithDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e listWithDuplicateBooks \u003d Arrays.asList(BOOK_1, BOOK_1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBooks(listWithDuplicateBooks));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            -\u003e uniqueBookList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/BorrowerIdGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerIdGeneratorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void generateBorrowerId_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerRecords borrowers \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(borrowers);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0001\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0002\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0003\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0004\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowers.addBorrower(new BorrowerBuilder(ALICE).withBorrowerId(\"K0007\").build());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowers.addBorrower(new BorrowerBuilder(BOB).withBorrowerId(\"K0009\").build());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0005\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0006\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0008\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void checkBorrowerIdExists() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerRecords borrowers \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(borrowers);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerIdGenerator.borrowerIdExists(new BorrowerId(\"K0001\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower borrower \u003d new BorrowerBuilder().actualBuild();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowers.addBorrower(borrower);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(BorrowerIdGenerator.borrowerIdExists(new BorrowerId(\"K0001\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 40,
      "seeziyang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/BorrowerIdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerIdTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BorrowerId(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_invalidBorrowerId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String invalidBorrowerId \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BorrowerId(invalidBorrowerId));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void isValidBorrowerId() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null borrower ID;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BorrowerId.isValidBorrowerId(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // invalid borrower ID"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"K91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"BorrowerId\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // valid BorrowerId numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(BorrowerId.isValidBorrowerId(\"K0911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(BorrowerId.isValidBorrowerId(\"K0001\")); //smallest Borrower ID"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(BorrowerId.isValidBorrowerId(\"K9999\")); // largest Borrower ID"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashcode_sameBorrowerSameHashcode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Borrower toCompare \u003d new BorrowerBuilder(BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(BOB.hashCode(), toCompare.hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 40,
      "hoholyin": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/BorrowerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(ALICE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.isSameBorrower(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower editedAlice \u003d new BorrowerBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different borrowerId, -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withBorrowerId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower aliceCopy \u003d new BorrowerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower editedAlice \u003d new BorrowerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different BorrowerId -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withBorrowerId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void toFullString_borrower() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower alice \u003d new BorrowerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String stringRep \u003d alice.getName()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + \", Phone: \" + alice.getPhone()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + \", Email: \" + alice.getEmail()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + \", Borrower ID: \" + alice.getBorrowerId();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String temp \u003d alice.toFullString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(temp.equals(stringRep));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameBorrowerSameHashCode_assertTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower1 \u003d new BorrowerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower2 \u003d new BorrowerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(borrower1.hashCode(), borrower2.hashCode());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 96,
      "hoholyin": 3,
      "seeziyang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/genre/GenreTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.genre;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class GenreTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Genre(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void constructor_invalidGenreName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String invalidGenreName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Genre(invalidGenreName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void constructor_convertsUppercase() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Genre genre \u003d new Genre(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(genre.genreName.equals(\"TEST\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void isValidGenreName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null genre name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Genre.isValidGenreName(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\" \")); // space only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"   \")); // spaces only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\" A\")); // space at start"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"^\")); // starting with non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"peteromollie\")); // lowercase"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"CapitalTan\")); // CamelCase"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\";[]{}|\u003c\u003e.,:?\\\"!@#$%)^\u0026*(\u0027\")); // Punctuation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"Operations +-*/~`\")); // +-*/~`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"PETER*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"A\")); // 1 Alphabet"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"0\")); // 1 Number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"FICTION\")); // UPPERCASE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"NON-FICTION\")); // UPPERCASE with hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 4,
      "-": 17,
      "shiyao821": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/loan/LoanIdGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoanRecords;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanIdGeneratorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void generateLoanId_noLoanRecords_firstLoanId() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.setLoanRecords(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LoanIdGenerator.generateLoanId(), new LoanId(\"L000001\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void generateLoanId_emptyLoanRecords_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.setLoanRecords(new LoanRecords());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LoanIdGenerator.generateLoanId(), new LoanId(\"L000001\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void generateLoanId_typicalLoanRecords_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.setLoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LoanIdGenerator.generateLoanId(), new LoanId(\"L000007\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/loan/LoanIdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanIdTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanId(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_invalidLoanId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String invalidLoanId \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new LoanId(invalidLoanId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isValidLoanId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null loan ID"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e LoanId.isValidLoanId(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // invalid loan IDs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"L91\")); // less than 6 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"L1234567\")); // more than 6 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"C000001\")); // different prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"loanId\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"L123a56\")); // alphabets within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"L123 456\")); // spaces within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // valid loan IDs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"L000911\")); // exactly 6 numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"L000001\")); // smallest loan ID"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"L999999\")); // largest loan ID"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void toString_correctStringRepresentation_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String loanIdString \u003d \"L123456\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(new LoanId(loanIdString).toString(), loanIdString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals_sameLoanId_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String loanIdString \u003d \"L123456\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(new LoanId(loanIdString), new LoanId(loanIdString));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void hashCode_sameLoanIdSameHashCode_assertEquals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String loanIdString \u003d \"L123456\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId1 \u003d new LoanId(loanIdString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId2 \u003d new LoanId(loanIdString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanId1.hashCode(), loanId2.hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/loan/LoanListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_4;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_8;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_9;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoans;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList \u003d new LoanList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cLoan\u003e typicalLoans \u003d getTypicalLoans();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        for (int i \u003d 0; i \u003c typicalLoans.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            loanList.add(typicalLoans.get(i));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            assertEquals(loanList.size(), i + 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void size() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList \u003d new LoanList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList.size(), 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList.add(LOAN_1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList.size(), 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList \u003d new LoanList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList.add(LOAN_1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanList.contains(LOAN_1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanList.contains(LOAN_2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void addToNewCopy() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList1 \u003d new LoanList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList2 \u003d loanList1.addToNewCopy(LOAN_2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList1, loanList2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotSame(loanList1, loanList2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void removeFromNewCopy() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList1 \u003d new LoanList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList2 \u003d loanList1.removeFromNewCopy(LOAN_2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList2.size(), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(loanList1, loanList2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void replaceInNewCopy() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList1 \u003d new LoanList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList2 \u003d loanList1.replaceInNewCopy(LOAN_2, LOAN_4);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanList2.contains(LOAN_4));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanList2.contains(LOAN_2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanList1.contains(LOAN_2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanList1.contains(LOAN_4));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void calculateOutstandingFineAmount() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList \u003d new LoanList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList.add(LOAN_8);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList.add(LOAN_9);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList.calculateOutstandingFineAmount(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                LOAN_8.getRemainingFineAmount() + LOAN_9.getRemainingFineAmount());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/loan/LoanTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7_RETURNED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LOAN_1, LOAN_1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanB \u003d new LoanBuilder(LOAN_1).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LOAN_1, loanB);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(null, LOAN_1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(\"123\", LOAN_1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different serial number -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanC \u003d new LoanBuilder(LOAN_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(LOAN_1, loanC);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different borrower ID -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanD \u003d new LoanBuilder(LOAN_1).withBorrowerId(VALID_BORROWER_ID_2).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(LOAN_1, loanD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanE \u003d new LoanBuilder(LOAN_1).withStartDate(\"2019-10-14\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(LOAN_1, loanE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different due date -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanF \u003d new LoanBuilder(LOAN_1).withDueDate(\"2019-10-20\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(LOAN_1, loanF);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different return date -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanG \u003d new LoanBuilder(LOAN_1).withReturnDate(\"2019-10-25\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(LOAN_1, loanG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different renew count -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanH \u003d new LoanBuilder(LOAN_1).withRenewCount(1).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(LOAN_1, loanH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different remaining fine amount -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanI \u003d new LoanBuilder(LOAN_1).withRemainingFineAmount(100).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(LOAN_1, loanI);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different paid fine amount -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanJ \u003d new LoanBuilder(LOAN_1).withPaidFineAmount(20).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void hashCode_sameLoanSameHashCode_assertEquals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanA \u003d new Loan(new LoanId(VALID_LOAN_ID), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID_1), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanB \u003d new Loan(new LoanId(VALID_LOAN_ID), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID_1), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanA.hashCode(), loanB.hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void toString_correctStringRepresentation_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String loan1StringRep \u003d \"Loan ID: \" + LOAN_1.getLoanId() + \" Book Serial Number: \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + LOAN_1.getBookSerialNumber() + \" Borrower ID: \" + LOAN_1.getBorrowerId() + \" Loaned from \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + LOAN_1.getStartDate() + \" to \" + LOAN_1.getDueDate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LOAN_1.toString(), loan1StringRep);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String loan7ReturnedStringRep \u003d \"Loan ID: \" + LOAN_7_RETURNED.getLoanId() + \" Book Serial Number: \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + LOAN_7_RETURNED.getBookSerialNumber() + \" Borrower ID: \" + LOAN_7_RETURNED.getBorrowerId()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + \" Loaned from \" + LOAN_7_RETURNED.getStartDate() + \" to \" + LOAN_7_RETURNED.getDueDate()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + \". Returned on \" + LOAN_7_RETURNED.getReturnDate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LOAN_7_RETURNED.toString(), loan7ReturnedStringRep);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/usersettings/FineIncrementTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class FineIncrementTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int TEST_FINE_INCREMENT \u003d 500;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FineIncrement(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_invalidFineIncrement_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String invalidFineIncrement \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FineIncrement(invalidFineIncrement));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void isValidFineIncrement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // null fineIncrement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FineIncrement.isValidFineIncrement(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid fineIncrement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"hello*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"hello world\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"-1\")); // negative integer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // valid fineIncrement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertTrue(FineIncrement.isValidFineIncrement(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(fi.toString(), String.format(\"%d\", TEST_FINE_INCREMENT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi1 \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi2 \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi3 \u003d new FineIncrement(TEST_FINE_INCREMENT + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(fi1, fi2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(fi1, fi3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi1 \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi2 \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(fi1.hashCode(), fi2.hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 26,
      "Cronyxx": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/usersettings/LoanPeriodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class LoanPeriodTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int TEST_LOAN_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanPeriod(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_invalidLoanPeriod_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String invalidLoanPeriod \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new LoanPeriod(invalidLoanPeriod));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void isValidLoanPeriod() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // null loanPeriod"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e LoanPeriod.isValidLoanPeriod(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loanPeriod"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"hello*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"hello world\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"-1\")); // negative integer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // valid loanPeriod"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertTrue(LoanPeriod.isValidLoanPeriod(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(lp.toString(), String.format(\"%d\", TEST_LOAN_PERIOD));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp1 \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp2 \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp3 \u003d new LoanPeriod(TEST_LOAN_PERIOD + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(lp1, lp2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(lp1, lp3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp1 \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp2 \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(lp1.hashCode(), lp2.hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 25,
      "Cronyxx": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/usersettings/MaxRenewsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class MaxRenewsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final int TEST_MAX_RENEWS \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MaxRenews(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_invalidMaxRenews_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String invalidMaxRenews \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MaxRenews(invalidMaxRenews));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isValidMaxRenews() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null maxRenews"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MaxRenews.isValidMaxRenews(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // invalid maxRenews"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(MaxRenews.isValidMaxRenews(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(MaxRenews.isValidMaxRenews(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(MaxRenews.isValidMaxRenews(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(MaxRenews.isValidMaxRenews(\"hello*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(MaxRenews.isValidMaxRenews(\"hello world\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(MaxRenews.isValidMaxRenews(\"-1\")); // negative integer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // valid maxRenews"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(MaxRenews.isValidMaxRenews(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        MaxRenews mr \u003d new MaxRenews(TEST_MAX_RENEWS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(mr.toString(), String.format(\"%d\", TEST_MAX_RENEWS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        MaxRenews mr1 \u003d new MaxRenews(TEST_MAX_RENEWS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        MaxRenews mr2 \u003d new MaxRenews(TEST_MAX_RENEWS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        MaxRenews mr3 \u003d new MaxRenews(TEST_MAX_RENEWS + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(mr1, mr1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(mr1, mr2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(mr1, mr3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        MaxRenews mr1 \u003d new MaxRenews(TEST_MAX_RENEWS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        MaxRenews mr2 \u003d new MaxRenews(TEST_MAX_RENEWS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(mr1.hashCode(), mr2.hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/usersettings/RenewPeriodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class RenewPeriodTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int TEST_RENEW_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RenewPeriod(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_invalidRenewPeriod_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String invalidRenewPeriod \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RenewPeriod(invalidRenewPeriod));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void isValidRenewPeriod() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // null renewPeriod"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RenewPeriod.isValidRenewPeriod(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // invalid renewPeriod"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"hello*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"hello world\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"-1\")); // negative integer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // valid renewPeriod"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertTrue(RenewPeriod.isValidRenewPeriod(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(rp.toString(), String.format(\"%d\", TEST_RENEW_PERIOD));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp1 \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp2 \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp3 \u003d new RenewPeriod(TEST_RENEW_PERIOD + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(rp1, rp2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(rp1, rp3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp1 \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp2 \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(rp1.hashCode(), rp2.hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 25,
      "Cronyxx": 36,
      "seeziyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SampleDataUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class SampleDataUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getSampleCatalog_containsSampleBooks() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog sampleAb \u003d new Catalog();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Arrays.stream(SampleDataUtil.getSampleBooks()).forEach(book -\u003e sampleAb.addBook(book));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ReadOnlyCatalog b \u003d SampleDataUtil.getSampleCatalog();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(sampleAb, SampleDataUtil.getSampleCatalog());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getSampleLoanRecords_returnLoanRecords() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // update when we have sample loan records"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SampleDataUtil.getSampleLoanRecords(), new LoanRecords());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getSampleBorrowerRecords_returnBorrowerRecords() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // update when we have sample loan records"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SampleDataUtil.getSampleBorrowerRecords(), new BorrowerRecords());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userPrefs.setCatalogFilePath(Paths.get(\"catalog.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.getTypicalBorrowerRecords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoanRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.JsonBorrowerRecordsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.JsonCatalogStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.JsonLoanRecordsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonCatalogStorage catalogStorage \u003d new JsonCatalogStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonLoanRecordsStorage loanRecordsStorage \u003d new JsonLoanRecordsStorage(getTempFilePath(\"lr\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonBorrowerRecordsStorage borrowerRecordsStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonBorrowerRecordsStorage(getTempFilePath(\"br\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                userPrefsStorage, loanRecordsStorage, catalogStorage, borrowerRecordsStorage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void catalogReadSave() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * {@link JsonCatalogStorage} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * More extensive testing of Catalog saving/reading is done in {@link JsonCatalogStorageTest} class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog original \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storageManager.saveCatalog(original);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReadOnlyCatalog retrieved \u003d storageManager.readCatalog(new LoanRecords()).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(original, new Catalog(retrieved));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void loanRecordsReadSave() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * {@link JsonLoanRecordsStorage} class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * More extensive testing of LoanRecords saving/reading is done in {@link JsonLoanRecordsStorageTest} class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecords original \u003d getTypicalLoanRecords();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storageManager.saveLoanRecords(original);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ReadOnlyLoanRecords retrieved \u003d storageManager.readLoanRecords().get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertEquals(original, new LoanRecords(retrieved));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void borrowerRecordsReadSave() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * {@link JsonBorrowerRecordsStorage} class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * More extensive testing of BorrowerRecords saving/reading is done in"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * {@link JsonBorrowerRecordsStorageTest} class."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecords original \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storageManager.saveBorrowerRecords(original);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReadOnlyBorrowerRecords retrieved \u003d storageManager.readBorrowerRecords(new LoanRecords()).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertEquals(original, new BorrowerRecords(retrieved));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void getAllFilePaths() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotNull(storageManager.getCatalogFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertNotNull(storageManager.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertNotNull(storageManager.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertNotNull(storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 6,
      "seeziyang": 7,
      "-": 55,
      "shiyao821": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/catalog/JsonAdaptedBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.storage.catalog.JsonAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class JsonAdaptedBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"\u0026HarryBotter\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String INVALID_SERIAL_NUMBER \u003d \"+651234a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String INVALID_GENRE \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String NO_LOAN \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_TITLE \u003d BOOK_1.getTitle().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_SERIAL_NUMBER \u003d BOOK_1.getSerialNumber().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_AUTHOR \u003d BOOK_1.getAuthor().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final List\u003cJsonAdaptedGenre\u003e VALID_GENRES \u003d BOOK_1.getGenres().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .map(JsonAdaptedGenre::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_validBookDetails_returnsBook() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(BOOK_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(BOOK_1, book.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonAdaptedBook(INVALID_TITLE, VALID_SERIAL_NUMBER, VALID_AUTHOR, NO_LOAN, VALID_GENRES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(null, VALID_SERIAL_NUMBER, VALID_AUTHOR, NO_LOAN,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                VALID_GENRES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_invalidSerialNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook person \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonAdaptedBook(VALID_TITLE, INVALID_SERIAL_NUMBER, VALID_AUTHOR, NO_LOAN, VALID_GENRES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d SerialNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_nullSerialNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook person \u003d new JsonAdaptedBook(VALID_TITLE, null, VALID_AUTHOR, NO_LOAN,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                VALID_GENRES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, SerialNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_nullAuthor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook person \u003d new JsonAdaptedBook(VALID_TITLE, VALID_SERIAL_NUMBER, null, NO_LOAN,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                VALID_GENRES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_invalidGenres_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cJsonAdaptedGenre\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_GENRES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        invalidTags.add(new JsonAdaptedGenre(INVALID_GENRE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonAdaptedBook(VALID_TITLE, VALID_SERIAL_NUMBER, VALID_AUTHOR, NO_LOAN, invalidTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 83,
      "shiyao821": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/catalog/JsonCatalogStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_6;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class JsonCatalogStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCatalogStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void readCatalog_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCatalog(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCatalog\u003e readCatalog(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new JsonCatalogStorage(Paths.get(filePath)).readCatalog(addToTestDataPathIfNotNull(filePath),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new LoanRecords());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(readCatalog(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCatalog(\"notJsonFormatCatalog.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCatalog(\"invalidBookCatalog.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCatalog(\"invalidAndValidBookCatalog.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCatalog.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog original \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonCatalogStorage jsonAddressBookStorage \u003d new JsonCatalogStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        jsonAddressBookStorage.saveCatalog(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReadOnlyCatalog readBack \u003d jsonAddressBookStorage.readCatalog(filePath, new LoanRecords()).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(original, new Catalog(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        original.addBook(BOOK_5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        original.removeBook(BOOK_2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        jsonAddressBookStorage.saveCatalog(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readCatalog(filePath, new LoanRecords()).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(original, new Catalog(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        original.addBook(BOOK_6);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        jsonAddressBookStorage.saveCatalog(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readCatalog(new LoanRecords()).get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(original, new Catalog(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void saveAddressBook(ReadOnlyCatalog addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new JsonCatalogStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    .saveCatalog(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new Catalog(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 27,
      "seeziyang": 6,
      "-": 73,
      "shiyao821": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/catalog/JsonSerializableCatalogTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class JsonSerializableCatalogTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCatalogTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path TYPICAL_BOOKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBookCatalog.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path INVALID_BOOKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookCatalog.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path DUPLICATE_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookCatalog.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_typicalBooksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonSerializableCatalog dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                JsonSerializableCatalog.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalogFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog typicalPersonsCatalog \u003d TypicalBooks.getTypicalCatalog();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(catalogFromFile, typicalPersonsCatalog);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_invalidBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonSerializableCatalog dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOKS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                JsonSerializableCatalog.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_duplicateBooks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonSerializableCatalog dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                JsonSerializableCatalog.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCatalog.MESSAGE_DUPLICATE_BOOK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 20,
      "-": 26,
      "shiyao821": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class to help with building Book objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BookBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Harry Botter\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String DEFAULT_SERIAL_NUMBER \u003d \"B00001\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String DEFAULT_AUTHOR \u003d \"J K Rowling\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Optional\u003cLoan\u003e loan;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Set\u003cGenre\u003e genres;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private LoanList loanHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        serialNumber \u003d new SerialNumber(DEFAULT_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        author \u003d new Author(DEFAULT_AUTHOR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loan \u003d Optional.ofNullable(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        genres \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loanHistory \u003d new LoanList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Initializes the BookBuilder with the data of {@code bookToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder(Book bookToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        title \u003d bookToCopy.getTitle();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        serialNumber \u003d bookToCopy.getSerialNumber();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        author \u003d bookToCopy.getAuthor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loan \u003d bookToCopy.getLoan();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        genres \u003d new HashSet\u003c\u003e(bookToCopy.getGenres());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loanHistory \u003d bookToCopy.getLoanHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code Title} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withTitle(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.title \u003d new Title(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses the {@code genres} into a {@code Set\u003cGenre\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withGenres(String ... tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genres \u003d SampleDataUtil.getGenreSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.serialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code Loan} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withLoan(Loan loan) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loan \u003d Optional.ofNullable(loan);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code Author} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.author \u003d new Author(author);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a Book object based on specified fields."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Book object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Book build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan loanValue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!loan.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            loanValue \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            loanValue \u003d loan.get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book(title, serialNumber, author, loanValue, genres, loanHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 103,
      "Cronyxx": 2,
      "seeziyang": 1,
      "shiyao821": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class for Book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BookUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static String getAddCommand(Book book) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(book);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns an find command string for finding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static String getFindCommand(Book book) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return FindCommand.COMMAND_WORD + \" \" + getPersonDetails(book);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static String getPersonDetails(Book book) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        sb.append(PREFIX_TITLE + book.getTitle().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        sb.append(PREFIX_SERIAL_NUMBER + book.getSerialNumber().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        sb.append(PREFIX_AUTHOR + book.getAuthor().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        book.getGenres().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            s -\u003e sb.append(PREFIX_GENRE + s.genreName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 35,
      "Cronyxx": 1,
      "shiyao821": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BorrowerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * A utility class to help with building Borrower objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Amy Anyhow\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String DEFAULT_BORROWER_ID \u003d \"K0001\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"amyanyhow@api.com\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String DEFAULT_PHONE_NUMBER \u003d \"62226111\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private BorrowerId borrowerId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanList currentLoanList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanList returnedLoanList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE_NUMBER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerId \u003d new BorrowerId(DEFAULT_BORROWER_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        currentLoanList \u003d new LoanList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        returnedLoanList \u003d new LoanList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder(Borrower borrowerToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        name \u003d borrowerToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        phone \u003d borrowerToCopy.getPhone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        email \u003d borrowerToCopy.getEmail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerId \u003d borrowerToCopy.getBorrowerId();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        currentLoanList \u003d borrowerToCopy.getCurrentLoanList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        returnedLoanList \u003d borrowerToCopy.getReturnedLoanList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Name} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Phone} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Email} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code BorrowerID} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder withBorrowerId(String id) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.borrowerId \u003d new BorrowerId(id);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a current Loan to the {@code currentLoanList} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerBuilder withCurrentLoan(Loan loan) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.currentLoanList.add(loan);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a returned Loan to the {@code returnedLoanList} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerBuilder withReturnedLoan(Loan loan) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.returnedLoanList.add(loan);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Borrower(name, phone, email, borrowerId, currentLoanList, returnedLoanList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Borrower actualBuild() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new Borrower(name, phone, email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 75,
      "seeziyang": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BorrowerUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.EditBorrowerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * A utility class for Borrower."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Returns the part of command string for the given {@code EditBorrowerDescriptor}\u0027s details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static String getEditBorrowerDescriptorDetails(EditBorrowerCommand.EditBorrowerDescriptor descriptor) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.name).append(\" \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CatalogBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// TODO EDIT THIS"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class CatalogBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Catalog catalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CatalogBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CatalogBuilder(Catalog catalog) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.catalog \u003d catalog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CatalogBuilder withPerson(Book book) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(book);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Catalog build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 34,
      "seeziyang": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBorrowerDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.EditBorrowerCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * A utility class to help with building EditBorrowerDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class EditBorrowerDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private EditBorrowerCommand.EditBorrowerDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor \u003d new EditBorrowerCommand.EditBorrowerDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerDescriptorBuilder(EditBorrowerCommand.EditBorrowerDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.descriptor \u003d new EditBorrowerCommand.EditBorrowerDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Returns an {@code EditBorrowerDescriptor} with fields containing {@code borrower}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerDescriptorBuilder(Borrower borrower) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor \u003d new EditBorrowerCommand.EditBorrowerDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.setName(borrower.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.setPhone(borrower.getPhone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.setEmail(borrower.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBorrowerDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditBorrowerDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Email} of the {@code EditBorrowerDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerCommand.EditBorrowerDescriptor build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code id} of the {@code EditBorrowerDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public EditBorrowerDescriptorBuilder withBorrowerId(String id) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        descriptor.setId(new BorrowerId(id));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LoanBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.BookBuilder.DEFAULT_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.BorrowerBuilder.DEFAULT_BORROWER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * A utility class to help with building Loan objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DEFAULT_LOAN_ID \u003d \"L000001\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"2019-10-13\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DEFAULT_DUE_DATE \u003d \"2019-10-27\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanId loanId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private SerialNumber bookSerialNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private BorrowerId borrowerId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LocalDate dueDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LocalDate returnDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private int renewCount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private int remainingFineAmount; // in cents"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private int paidFineAmount; // in cents"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Empty argument constructor to initialise LoanBuilder with default values for the fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanId \u003d new LoanId(DEFAULT_LOAN_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        bookSerialNumber \u003d new SerialNumber(DEFAULT_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerId \u003d new BorrowerId(DEFAULT_BORROWER_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        startDate \u003d LocalDate.parse(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        dueDate \u003d LocalDate.parse(DEFAULT_DUE_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        returnDate \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        renewCount \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        remainingFineAmount \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        paidFineAmount \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructor that uses another Loan object to copy its values from."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanToCopy {@code Loan} object to copy values from."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder(Loan loanToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanId \u003d loanToCopy.getLoanId();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        bookSerialNumber \u003d loanToCopy.getBookSerialNumber();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerId \u003d loanToCopy.getBorrowerId();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        startDate \u003d loanToCopy.getStartDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        dueDate \u003d loanToCopy.getDueDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        returnDate \u003d loanToCopy.getReturnDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        renewCount \u003d loanToCopy.getRenewCount();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        remainingFineAmount \u003d loanToCopy.getRemainingFineAmount();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        paidFineAmount \u003d loanToCopy.getPaidFineAmount();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the {@code LoanId} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withLoanId(String loanId) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loanId \u003d new LoanId(loanId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code Loan} we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.bookSerialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the {@code BorrowerId} of the {@code Loan} we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withBorrowerId(String borrowerId) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.borrowerId \u003d new BorrowerId(borrowerId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the starting date of the {@code Loan} we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.startDate \u003d LocalDate.parse(startDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Sets the starting date of the {@code Loan} we are building. Accepts a {@code LocalDate}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public LoanBuilder withStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the due date of the {@code Loan} we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withDueDate(String dueDate) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.dueDate \u003d LocalDate.parse(dueDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Sets the due date of the {@code Loan} we are building. Accepts a {@code LocalDate}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public LoanBuilder withDueDate(LocalDate dueDate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the return date of the {@code Loan} we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withReturnDate(String returnDate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.returnDate \u003d LocalDate.parse(returnDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the number of renews the {@code Loan} we are building has."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withRenewCount(int renewCount) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.renewCount \u003d renewCount;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the remaining fine amount of the {@code Loan} we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withRemainingFineAmount(int remainingFineAmount) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.remainingFineAmount \u003d remainingFineAmount;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the paid fine amount of the {@code Loan} we are building."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withPaidFineAmount(int paidFineAmount) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.paidFineAmount \u003d paidFineAmount;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a Loan object based on specified fields."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return {@code Loan} object."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan build() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Loan(loanId, bookSerialNumber, borrowerId, startDate, dueDate, returnDate,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                renewCount, remainingFineAmount, paidFineAmount);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 145,
      "shiyao821": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SetUserSettingsDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.usersettings.MaxRenews;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class to help with building SetUserSettingsDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetUserSettingsDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private SetCommand.SetUserSettingsDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetCommand.SetUserSettingsDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder(SetCommand.SetUserSettingsDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.descriptor \u003d new SetCommand.SetUserSettingsDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns an {@code SetUserSettingsDescriptor} with fields containing {@code UserSettings}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder(UserSettings userSettings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetCommand.SetUserSettingsDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setLoanPeriod(new LoanPeriod(userSettings.getLoanPeriod()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setRenewPeriod(new RenewPeriod(userSettings.getRenewPeriod()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setFineIncrement(new FineIncrement(userSettings.getFineIncrement()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        descriptor.setMaxRenews(new MaxRenews(userSettings.getMaxRenews()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code LoanPeriod} of the {@code SetUserSettingsDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder withLoanPeriod(String loanPeriod) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setLoanPeriod(new LoanPeriod(loanPeriod));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code RenewPeriod} of the {@code SetUserSettingsDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder withRenewPeriod(String renewPeriod) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setRenewPeriod(new RenewPeriod(renewPeriod));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code FineIncrement} of the {@code SetUserSettingsDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder withFineIncrement(String fineIncrement) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setFineIncrement(new FineIncrement(fineIncrement));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the {@code MaxRenews} of the {@code SetUserSettingsDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public SetUserSettingsDescriptorBuilder withMaxRenews(String maxRenews) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        descriptor.setMaxRenews(new MaxRenews(maxRenews));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetCommand.SetUserSettingsDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 60,
      "seeziyang": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Book getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBooks.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class TypicalBooks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_1 \u003d new BookBuilder().withTitle(\"Harry Botter\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withSerialNumber(\"B00001\").withAuthor(\"J K Rowling\").withGenres(\"FICTION\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_2 \u003d new BookBuilder().withTitle(\"Legend of the Condor Heroes\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withAuthor(\"Jin Yong\").withSerialNumber(\"B00002\").withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_3 \u003d new BookBuilder().withTitle(\"Animal the Farm\").withSerialNumber(\"B00003\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withAuthor(\"George Orwell\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_4 \u003d new BookBuilder().withTitle(\"Harri Botter and the Full Blood Prince\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withSerialNumber(\"B00004\").withAuthor(\"J K Rowling\").withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_5 \u003d new BookBuilder().withTitle(\"The Heavenly Sword and the Dragon Saber\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withSerialNumber(\"B00005\").withAuthor(\"Jin Yong\").withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_6 \u003d new BookBuilder().withTitle(\"My Book\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withSerialNumber(\"B00006\").withAuthor(\"Jin Yong\").withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_7 \u003d new BookBuilder().withTitle(\"The Hunger Games\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withSerialNumber(\"B00007\").withAuthor(\"Suzanne Collins\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private TypicalBooks() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a {@code Catalog} with all the typical books."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Catalog getTypicalCatalog() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            catalog.addBook(book);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static List\u003cBook\u003e getTypicalBooks() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BOOK_1, BOOK_2, BOOK_3, BOOK_4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 40,
      "seeziyang": 2,
      "shiyao821": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBorrowers.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_8;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_9;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * A utility class containing a list of {@code Borrower} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class TypicalBorrowers {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final BorrowerId ID_FIRST_BORROWER \u003d new BorrowerId(\"K0001\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final BorrowerId ID_SECOND_BORROWER \u003d new BorrowerId(\"K0002\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String ID_DESC_FIRST_BORROWER \u003d \" \" + PREFIX_BORROWER_ID + \"K0001\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower ALICE \u003d new BorrowerBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withBorrowerId(\"K0001\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower BENSON \u003d new BorrowerBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withBorrowerId(\"K0002\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower CARL \u003d new BorrowerBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"heinz@example.com\").withBorrowerId(\"K0003\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower DANIEL \u003d new BorrowerBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withBorrowerId(\"K0004\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower ELLE \u003d new BorrowerBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"werner@example.com\").withBorrowerId(\"K0005\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower FIONA \u003d new BorrowerBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"lydia@example.com\").withBorrowerId(\"K0006\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower GEORGE \u003d new BorrowerBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"anna@example.com\").withBorrowerId(\"K0007\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower HOON \u003d new BorrowerBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"stefan@example.com\").withBorrowerId(\"K0008\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower IDA \u003d new BorrowerBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withEmail(\"hans@example.com\").withBorrowerId(\"K0009\").withCurrentLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Borrower JANNA \u003d new BorrowerBuilder().withName(\"Janna Windforce\").withPhone(\"3838438\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withEmail(\"janna@example.com\").withBorrowerId(\"K0010\").withReturnedLoan(LOAN_8)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withReturnedLoan(LOAN_9).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower AMY \u003d new BorrowerBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower BOB \u003d new BorrowerBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withBorrowerId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private TypicalBorrowers() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns an {@code BorrowerRecords} with all the typical persons."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static BorrowerRecords getTypicalBorrowerRecords() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecords br \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (Borrower borrower : getTypicalBorrowers()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            br.addBorrower(borrower);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return br;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static List\u003cBorrower\u003e getTypicalBorrowers() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, BOB));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 55,
      "hoholyin": 11,
      "seeziyang": 7,
      "shiyao821": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Index INDEX_FIRST_BOOK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Index INDEX_SECOND_BOOK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Index INDEX_THIRD_BOOK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLoans.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * A utility class containing a list of {@code Loan} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class TypicalLoans {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_1 \u003d new LoanBuilder().withLoanId(\"L000001\").withSerialNumber(\"B00001\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0001\").withStartDate(\"2019-10-13\").withDueDate(\"2019-10-27\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_2 \u003d new LoanBuilder().withLoanId(\"L000002\").withSerialNumber(\"B00002\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0002\").withStartDate(\"2019-09-01\").withDueDate(\"2019-10-15\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_3 \u003d new LoanBuilder().withLoanId(\"L000003\").withSerialNumber(\"B00003\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0003\").withStartDate(\"2019-10-20\").withDueDate(\"2019-11-03\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_4 \u003d new LoanBuilder().withLoanId(\"L000004\").withSerialNumber(\"B00004\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0004\").withStartDate(\"2019-11-05\").withDueDate(\"2019-11-19\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_5 \u003d new LoanBuilder().withLoanId(\"L000005\").withSerialNumber(\"B00005\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0005\").withStartDate(\"2019-08-09\").withDueDate(\"2019-08-23\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_6 \u003d new LoanBuilder().withLoanId(\"L000006\").withSerialNumber(\"B00006\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0006\").withStartDate(\"2019-09-20\").withDueDate(\"2019-10-20\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_7 \u003d new LoanBuilder().withLoanId(\"L000007\").withSerialNumber(\"B00007\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0009\").withStartDate(\"2090-10-13\").withDueDate(\"2090-10-27\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_7_RETURNED \u003d new LoanBuilder(LOAN_7).withReturnDate(\"2019-10-20\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_8 \u003d new LoanBuilder().withLoanId(\"L000008\").withSerialNumber(\"B00008\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0008\").withStartDate(\"2019-09-01\").withDueDate(\"2019-09-30\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withReturnDate(\"2019-09-15\").withRemainingFineAmount(150).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_9 \u003d new LoanBuilder().withLoanId(\"L000009\").withSerialNumber(\"B00009\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0009\").withStartDate(\"2019-09-01\").withDueDate(\"2019-09-30\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withReturnDate(\"2019-09-15\").withRemainingFineAmount(300).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // prevents instantiation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private TypicalLoans() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static List\u003cLoan\u003e getTypicalLoans() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LOAN_1, LOAN_2, LOAN_3, LOAN_4, LOAN_5, LOAN_6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a {@code LoanRecords} with all the typical Loans."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LoanRecords getTypicalLoanRecords() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        getTypicalLoans().forEach(loan -\u003e loanRecords.addLoan(loan));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanRecords;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalUserSettings.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class containing a list of {@code UserSettings} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class TypicalUserSettings {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final UserSettings PARTIAL_USER_SETTINGS_1 \u003d new UserSettingsBuilder()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final UserSettings USER_SETTINGS_1 \u003d new UserSettingsBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withLoanPeriod(\"7\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withRenewPeriod(\"7\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withFineIncrement(\"50\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final UserSettings USER_SETTINGS_2 \u003d new UserSettingsBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withLoanPeriod(\"14\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withRenewPeriod(\"14\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withFineIncrement(\"50\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private TypicalUserSettings() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserSettingsBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.usersettings.MaxRenews;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class to help with building UserSettings objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UserSettingsBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final int DEFAULT_LOAN_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final int DEFAULT_RENEW_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final int DEFAULT_FINE_INCREMENT \u003d 10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final int DEFAULT_MAX_RENEWS \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private LoanPeriod loanPeriod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private RenewPeriod renewPeriod;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private FineIncrement fineIncrement;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private MaxRenews maxRenews;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        loanPeriod \u003d new LoanPeriod(DEFAULT_LOAN_PERIOD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        renewPeriod \u003d new RenewPeriod(DEFAULT_RENEW_PERIOD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        fineIncrement \u003d new FineIncrement(DEFAULT_FINE_INCREMENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        maxRenews \u003d new MaxRenews(DEFAULT_MAX_RENEWS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Initializes the UserSettingsBuilder with the data of {@code userSettingsToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder(UserSettings userSettingsToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        loanPeriod \u003d new LoanPeriod(userSettingsToCopy.getLoanPeriod());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        renewPeriod \u003d new RenewPeriod(userSettingsToCopy.getRenewPeriod());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        fineIncrement \u003d new FineIncrement(userSettingsToCopy.getFineIncrement());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        maxRenews \u003d new MaxRenews(userSettingsToCopy.getMaxRenews());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code loanPeriod} of the {@code UserSettings} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder withLoanPeriod(String loanPeriod) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanPeriod \u003d new LoanPeriod(loanPeriod);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code renewPeriod} of the {@code UserSettings} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder withRenewPeriod(String renewPeriod) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.renewPeriod \u003d new RenewPeriod(renewPeriod);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code fineIncrement} of the {@code UserSettings} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder withFineIncrement(String fineIncrement) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.fineIncrement \u003d new FineIncrement(fineIncrement);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the {@cide maxRenews} of the {@code UserSettings} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public UserSettingsBuilder withMaxRenews(String maxRenews) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.maxRenews \u003d new MaxRenews(maxRenews);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns a UserSettings object based on specified fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return UserSettings object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new UserSettings(loanPeriod.getLoanPeriod(), renewPeriod.getRenewPeriod(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                fineIncrement.getFineIncrement(), maxRenews.getMaxRenews());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 65,
      "seeziyang": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserSettingsUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINE_INCREMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOAN_PERIOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_RENEWS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RENEW_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class for UserSettings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UserSettingsUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns the part of command string for the given {@code SetUserSettingsDescriptor}\u0027s details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static String getSetUserSettingsDescriptorDetails(SetCommand.SetUserSettingsDescriptor descriptor) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.getLoanPeriod().ifPresent(loanPeriod -\u003e sb.append(PREFIX_LOAN_PERIOD)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .append(loanPeriod.getLoanPeriod()).append(\" \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.getRenewPeriod().ifPresent(renewPeriod -\u003e sb.append(PREFIX_RENEW_PERIOD)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .append(renewPeriod.getRenewPeriod()).append(\" \"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.getFineIncrement().ifPresent(fineIncrement -\u003e sb.append(PREFIX_FINE_INCREMENT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .append(fineIncrement.getFineIncrement()).append(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        descriptor.getMaxRenews().ifPresent(maxRenews -\u003e sb.append(PREFIX_MAX_RENEWS)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(maxRenews.getMaxRenews()).append(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 30,
      "seeziyang": 4
    }
  }
]
