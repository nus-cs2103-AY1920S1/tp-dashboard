[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d Liberry"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F13-1/main/[image:https://travis-ci.org/AY1920S1-CS2103T-F13-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F13-1/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Liberry* is a desktop library management application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* It enables librarians from neighborhood libraries to manage tens of thousands of books and borrowers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* It is optimized for librarians to serve borrowers quickly through entering commands into the Command Line Interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "(CLI) while still having the benefits of a Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Liberry! Berry, berry amazing! Wow!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* Original source of the code, AddressBook-Level3 project, was created by https://se-education.org[SE-EDU initiative]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "seeziyang": 8,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    compile group: \u0027com.itextpdf\u0027, name: \u0027itext7-core\u0027, version: \u00277.1.8\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        \u0027site-name\u0027: \u0027Liberry\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F13-1/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "seeziyang": 3,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Liberry was developed by the https://github.com/AY1920S1-CS2103T-F13-1[CS2103T-F13-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Wang Shiyao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::shiyao821.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[https://github.com/shiyao821[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Team Lead"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d See Zi Yang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::seeziyang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[http://github.com/seeziyang[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Integration, Scheduling and tracking"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Lin Yuting"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::linyutinglyt.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[http://github.com/linyutinglyt[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Testing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: Commons"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Yeo Tong"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::cronyxx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[http://github.com/Cronyxx[github]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Documentation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Ho Hol Yin"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "image::hoholyin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "{empty}[http://github.com/hoholyin[github]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Role: Code quality, Deliverables and deadlines"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 11,
      "seeziyang": 19,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F13-1/main/issues[issue tracker] if you"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Email us* : You can also reach us at any one of our emails at hoholyin@u.nus.edu, wangshiyao@u.nus.edu,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "e0273890@u.nus.edu, yuting.lin@u.nus.edu, ziyang.see@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 4,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d Liberry- Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "By: `AY1920S1-CS2103T-F13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `add t/Animal Farm a/George`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".Component interactions for `add t/Animal Farm a/George` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "image::AddBook.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookListPanel`, etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Given below is the Sequence Diagram for interactions within"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "the UI component when the user enter an add command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The exact command entered is `add t/Animal Farm a/George`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".Interactions Inside the UI Component for the `add t/Animal Farm a/George` Command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UiAddBookSequenceDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "The following activity diagram summarizes what happens to the `UI`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "when a user executes a new command:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ".Flow of Events within `UI`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "image::UiUpdateBookListActivityDiagram.png[]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".  `Logic` uses the `CatalogParser` class to parse the user command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a book)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th book in the catalog. The `delete` command calls `Model#commitCatalog()`, causing the modified state of the catalog after the `delete 5` command executes to be saved in the `catalogStateList`, and the `currentStatePointer` is shifted to the newly inserted catalog state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new book. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Step 4. The user now decides that adding the book was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* a librarian in a small town library that has to serve many library users (borrowers) quickly"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* has a need to manage a significant number of books and borrowers"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "*Value proposition*: Many people visit the neighborhood library to borrow books and also donate their books. There is"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "always a long queue in this small library and the librarian would have to type quickly to handle the long queue. Liberry"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "can manage a library system faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |librarian |add a book brought/donated by people to the library |maintain a record of all the books"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "in the library"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |librarian |delete books that are no longer available |maintain a record of all the books in the library"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |helpful librarian |search for certain book by the title/author/genre |help borrowers check if it is"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "available"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |forgetful librarian |mark a book as loaned |tell borrowers that the book is loaned out and unavailable"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "for borrowing"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |forgetful librarian |mark a book as available |let borrowers know that the book will now be available"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "for borrowing"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |generate a list of overdue books and their borrowers |know which borrower has overdue books"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "and which books are overdue"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |generate a list of currently loaned / available books |do inventory checks"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |meticulous librarian |record the movement of books in and out |keep track of available books here"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* * *` |helpful librarian |register a new borrower in the system |help new borrowers start borrowing books"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |search for certain book by the author |recommend other books of the same author"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |search for certain book by its genre |recommend other books of the same genre"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |meticulous librarian |different physical books to have different serial numbers |distinguish between"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "books of the same title"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* * *` |librarian |set the default loan period, renew period and fine amount |customize the app to"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "suit my library\u0027s policies"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |librarian |extend a book’s loan |help borrowers to borrow the book for a longer period"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |lazy librarian |generate and record the fine of overdue books |keep track of overdue fines incurred by"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "borrowers"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |dutiful librarian |record that a fine is paid |keep track of accounting and prevent duplicate payments"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |librarian |view details of a book |know more information about the book - author, genre, synopsis, etc"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |careless librarian |be able to undo a command |undo my input mistakes"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* *` |careless librarian |be able to redo a command |undo my undo commands, in case I need it, without having to"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "type out a possibly lengthy command"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |health conscious, night-working librarian |change the user interface into a night mode |reduce the impact"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "of light and glare on my eyes when I am working at night"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |impatient librarian |have my command inputs returned within 1 sec |serve my customers quickly"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |forgetful librarian |look at the help section |be reminded of the commands available"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`* *` |helpful librarian |be able to reserve a currently on-loan book |allow borrowers to borrow the book once it"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "is returned"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "|`* *` |librarian |be able to see an image of the book cover |borrowers can know how the book looks like"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |helpful librarian |be able generate a list of most popular books |recommend books to borrowers"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |helpful librarian |add a borrowers rating to the book |recommend books based on ratings"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |receptive librarian |add a borrower’s review to the book |recommend books based on reviews"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |lazy librarian |be able to auto-complete book title searches |reduce my search time and give me nearby titles when"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "I submit a book title query"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|`*` |diligent librarian |search for user profiles by name |pull up his donate, borrowing, fine and payment history"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "(For all use cases below, the *System* is `Liberry` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Use case: Delete book"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "1.  User requests to list books"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "2.  Liberry shows a list of books"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "3.  User requests to delete a specific book in the list"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "4.  Liberry deletes the book"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "** 3a1. Liberry shows an error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".  Should be able to manage up to 20000 books and 5000 borrower records without a noticeable sluggishness in performance"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "for typical usage."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "[[ui]] UI::"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "User Interface"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d Deleting a book"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ". Deleting a book while all books are listed"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ".. Prerequisites: List all books using the `list` command. Multiple books in the list."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "   Expected: No book is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 10,
      "hoholyin": 16,
      "seeziyang": 71,
      "Cronyxx": 16,
      "-": 386
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d Liberry - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "By: `AY1920S1-CS2103T-F13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Liberry is a desktop app for librarians to *quickly manage their community libraries!* Liberry is optimized for librarians who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). You can type quickly and serve your long line of borrowers in a short amount of time. Liberry can manage all your books and borrowers efficiently and meticulously. Jump to \u003c\u003cQuick Start\u003e\u003e to get started now! Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".  Download the latest `Liberry.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Liberry."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `find t/TITLE`, `BOOK_TITLE` is a parameter which can be used as `find t/Harry Potter`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Items in square brackets are optional e.g. `t/TITLE [g/GENRE]` can be used as `t/Harry Potter g/fiction` or as `t/Harry Potter`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Curly brackets indicate that at least 1 of the optional parameters have to be given e.g. `{ [t/TITLE] [a/AUTHOR] }` can be used as `t/Harry Potter`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Items with `...`​ after them can be used multiple times including zero times e.g. `[g/GENRE]...` can be used as `{nbsp}` (i.e. 0 times), `g/fiction`, `g/fiction g/adventure` etc."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `t/TITLE a/AUTHOR`, `a/AUTHOR t/TITLE` is also acceptable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d Using Normal Mode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "The Normal Mode is for librarians to manage the books in the library. Commands in normal mode are not specific to any borrowers. The Normal Mode also provides some utility commands to help the librarian use Liberry. Commands that are specific to Serve Mode cannot be used while in Normal Mode."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Opens the help window, which includes a list of possible commands +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Locating books by title: `find`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Shows all relevant books found. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `find { [t/TITLE] [a/AUTHOR] [g/GENRE]... [sn/BOOK_SN] [-overdue]/[-loaned]/[-available] } [NUMBER]` +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `find { [t/TITLE] [a/AUTHOR] [g/GENRE]... [sn/BOOK_SN] [-overdue]/[-loaned]/[-available] [-rated] [-popular] [-new] } [NUMBER]` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* The search is case insensitive. e.g `harry` will match `Harry`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Only full words will be matched e.g. `Har` will not match `Harry`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Books matching at least one keyword will be returned (i.e. `OR` search). e.g. `harry` will return both `Harry Potter` and `Harry Botter`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[t/TITLE]` will be used to search through book titles"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[a/AUTHOR]` will be used to search through or filter by authors"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[g/GENRE]` will be used to search through or filter by genre"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[sn/BOOK_SN]` will be used to search through book serial numbers"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Only 1 of the following 3 flags can be used"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-overdue]` will only show overdue books"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-loaned]` will only show loaned books"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-available]` will only show available books"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Adding one of the following will sort the books such that:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-rated]` will list the top 10 highly rated books ** - Coming in v2.0**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-popular]` will list the top 10 most borrowed books ** - Coming in v2.0**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[-new]` will list the 10 newest books ** - Coming in v2.0**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[NUMBER]` will list this `NUMBER` of books instead"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `find t/Animal Farm a/George Orwell` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Search for the book titled “Animal Farm” by the author “George Orwell”"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `find g/mystery g/children -available` +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Search for children mystery books that are not on loan"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing a book: `info`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "View more information about a book in the results list +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `info INDEX`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Clears the most recent search and displays all books +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a book: `add`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Adds a new book to library records. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `add t/TITLE a/AUTHOR sn/BOOK_SN [g/GENRE]`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "A book can have any number of genres (including 0)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "You do not need to specify the serial number if you wish so. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Liberry will then auto-generate a valid serial number for the new book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `add t/Harry Botter and the Baby\u0027s Potty a/Raylei Jolking sn/B02010 g/children`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `add t/Inferno a/Tande g/classic g/epic`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a book : `delete`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Deletes the specified book from the address book. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Deletes a book from the library records. Used when book is lost or trashed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `delete [INDEX]` or `delete [sn/BOOK_SN]`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* Deletes the book at the specified `INDEX`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* The index refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[INDEX]` will delete the book with the book at this index in the results list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[sn/BOOK_SN]` will delete the book with this serial number"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `find t/harry` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Deletes the 1st book in the results of the `find` command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `delete sn/B00422` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Deletes the book with serial number `sn/B00422`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Registering a new borrower: `register`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Registers a new borrower to the library records. A unique ID associated with the borrower will automatically be generated and displayed. Borrowers are expected to know his ID in order for loans to be processed+"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Format: `register n/NAME p/PHONE_NUMBER e/EMAIL`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "* `register n/matt p/83938249 e/matt@damon.com`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing: `undo`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Undo the previous command/action. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing: redo"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Redo the most recent undo should there be no more commands/actions after the most recent undo +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "\u003d\u003d\u003d\u003d Set User Settings: `set`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Sets the user settings for loan period (in days), renew period (in days) and fine increment (in cents). +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Format: `set { [lp/LOAN_PERIOD] [rp/RENEW_PERIOD] [fi/FINE_INCREMENT] }`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*  `set lp/30 rp/10`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "*  `set rp/10 fi/5 lp/10`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Toggling night mode: `toggleui` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Toggles between day mode and night mode for the UI +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `toggleui`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d Using Serve Mode"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "The Serve Mode is for librarians to serve borrowers. All commands in Serve Mode are done on a specific borrower currently served by the librarian. All commands in Normal Mode can be used in Serve Mode too."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Entering Serve Mode: `serve`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Enters Serve Mode. All commands/actions will be done on this specific borrower. A list of the borrower’s currently loaned books and their serial numbers will be displayed. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `serve id/BORROWER_ID`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "* `serve id/K0001` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Enters save mode serving borrower with id `K0001`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting Serve Mode: `done`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Exits Serve Mode. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `done`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a borrower: `edit`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Edit borrower’s particulars. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "Format: `edit { [n/NAME] [p/PHONE_NUMBER] [e/email] }`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Edits the currently serving borrower\u0027s particulars."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `edit p/91234567 e/jane@austen.com` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Edits the phone number and borrower\u0027s email address to be `91234567` and `jane@austen.com` respectively."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `edit n/Betsy Crower` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Edits the name of the borrower to be `Betsy Crower`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Loaning book(s): `loan`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Loan book(s) by their serial number +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `loan sn/BOOK_SN...`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `loan sn/B00041` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Loans the book with serial number B00041"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `loan sn/B00201 sn/B02929 sn/B00203` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Loans the books with serial numbers B00201, B02929 and B00203"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Renewing book(s): `renew`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Renew book(s) from the list of currently loaned books, i.e., extend their due dates +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `renew INDEX… [-all]` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Including `-all` will renew all currently loaned books"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Returning book(s): `return`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Return book(s) that were loaned by the borrower +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `return INDEX… [-all]` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Including `-all` will return all currently loaned books"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d\u003d Paying fines: `pay`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Reduces the outstanding amount of borrower\u0027s fines by AMOUNT (in cents) and adds a transaction record to his account +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `pay AMOUNT`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "\u003d\u003d\u003d\u003d Reserve a book: `reserve`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Reserve a particular book"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Format: `reserve INDEX` or `reserve sn/BOOK_SN`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* Reserves the book at the specified `INDEX`  for the currently served user."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* The index refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[INDEX]` indicates the book at this index in the search results list"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `[sn/BOOK_SN]` indicates the particular book with this serial number"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `find t/lord` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "`reserve 2` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "reserve the 2nd book in the results of the `find` command for the currently served user"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* `reserve sn/B02422` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Reserves the book with serial number `sn/B02422` for the currently served user"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d\u003d Saving the Data"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Liberry data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Liberry folder."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Find a book* : `find { [t/TITLE] [a/AUTHOR] [g/GENRE]... [sn/BOOK_SN]] [-overdue] [-loaned] [-available] } [NUMBER]` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "e.g. `find t/Animal Farm a/George Orwell`, `find g/mystery g/children -available` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "`[-rated] [-popular] [-new]` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *View book info* : `info INDEX`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Clear results* : `clear`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Add a book* : `add t/TITLE a/AUTHOR sn/BOOK_SN [g/GENRE]... ` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "e.g. `add t/Harry Botter and the Baby\u0027s Potty a/Reali Jolking sn/B02010 g/children`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Delete a book* : `delete INDEX` or `delete sn/BOOK_SN`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "* *Register a borrower* : `register n/NAME p/PHONE_NUMBER e/EMAIL` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "e.g. `register n/matt p/83938249 e/matt@damon.com`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Toggle night mode*: `toggleui`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "* *Set user settings*: `set { [lp/LOAN_PERIOD] [rp/RENEW_PERIOD] [fi/FINE_INCREMENT] }`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Rate a book* : `rate INDEX r/RATING` ** - Coming in v2.0**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Serve mode* : `serve id/BORROWER_ID` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "e.g. `serve id/K0001`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Exit serve mode* : `done`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "* *Edit a borrower\u0027s particulars* : `edit { [n/NAME] [p/PHONE_NUMBER] [e/email] }` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "e.g. `edit p/91234567 e/jane@austen.com`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Loan book(s)* : `loan sn/BOOK_SN...` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "e.g. `loan sn/B00201 sn/B02929 sn/B00203`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Renew book(s)* : `renew INDEX… [-all]`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Return book(s)* : `return INDEX… [-all]`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "* *Pay fines* : `pay AMOUNT`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "* *Reserve book* : `reserve INDEX` or `reserve sn/BOOK_SN`"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 6,
      "hoholyin": 18,
      "seeziyang": 2,
      "Cronyxx": 1,
      "-": 90,
      "shiyao821": 200
    }
  },
  {
    "path": "docs/diagrams/AddBook.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \"User\" as User USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \":UI\" as UI LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \":Model\" as Model LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "participant \":Storage\" as Storage LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "User -\u003e UI : add t/Animal Farm a/George"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "UI -\u003e Logic : execute(\"add Animal Farm\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic -\u003e Model : addBook(animalFarm)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Model --\u003e Logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic -\u003e Storage : saveCatalog(updatedCatalog)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "activate Storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Storage -\u003e Storage : saveToLocalFile"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Storage --\u003e Logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "Logic --\u003e UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "UI --\u003e User"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 32
    }
  },
  {
    "path": "docs/diagrams/AddBookStorage.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":CatalogStorage\" as CatalogStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":FileUtil\" as FileUtil COMMONS_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":JsonSerializableCatalog\" as JsonSerializableCatalog STORAGE_COLOR_T2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "participant \":JsonUtil\" as JsonUtil COMMONS_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Logic -\u003e Storage ++ : saveCatalog(updatedCatalog)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Storage -\u003e CatalogStorage : getCatalogFilePath"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "activate CatalogStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogStorage --\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "deactivate CatalogStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Storage -\u003e CatalogStorage : saveCatalog"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "activate CatalogStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogStorage -\u003e FileUtil : createIfMissing(filePath)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "create JsonSerializableCatalog"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogStorage -\u003e JsonSerializableCatalog ++ : new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "CatalogStorage -\u003e JsonUtil ++ : saveJsonFile"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonUtil -\u003e JsonUtil ++ : serializeObjectToJsonFile"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonUtil -\u003e FileUtil : writeToFile"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Storage --\u003e Logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 32
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteBook(b)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveCatalog(updatedCatalog)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : saveToLocalFile"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 3,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Interface CatalogStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Interface BorrowerRecordsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Interface LoanRecordsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Class JsonCatalogStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Class JsonBorrowerRecordsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Class JsonLoanRecordsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager o-down-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager o-right-\u003e CatalogStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager o-right-\u003e BorrowerRecordsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "StorageManager o-right-\u003e LoanRecordsStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonCatalogStorage .up.|\u003e CatalogStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonCatalogStorage .down.\u003e JsonSerializableCatalogStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonSerializableCatalogStorage ..\u003e JsonSerializableBook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonSerializableBook ..\u003e JsonAdaptedGenre"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonBorrowerRecordsStorage .up.|\u003e BorrowerRecordsStorage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonBorrowerRecordsStorage .down.\u003e JsonSerializableBorrowerRecords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonSerializableBorrowerRecords .down.\u003eJsonSerializableBorrower"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonLoanRecordsStorage .up.|\u003e LoanRecordsStorage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonLoanRecordsStorage .down.\u003e JsonSerializableLoanRecords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "JsonSerializableLoanRecords .down.\u003e JsonSerializableLoan"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "shiyao821": 26
    }
  },
  {
    "path": "docs/diagrams/UiAddBookSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "participant \":User\" as User USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "box UI #Lightgreen"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    participant \":CommandBox\" as CommandBox UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    participant \":ResultDisplay\" as ResultDisplay UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "User -\u003e CommandBox: handleCommandEntered()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CommandBox -\u003e MainWindow: executeCommand(\"add t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "MainWindow -\u003e Logic: execute(\"add t/Animal Farm a/George\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Logic --\u003e MainWindow: commandResult"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "MainWindow -\u003e ResultDisplay: setFeedbackToUser(commandResult)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate ResultDisplay"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "ResultDisplay --\u003e MainWindow"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate ResultDisplay"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "MainWindow --\u003e CommandBox"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CommandBox -\u003e CommandBox: setText(\"\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "CommandBox --\u003e User"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 41
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Class BookListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "Class BookCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "MainWindow *-down-\u003e BookListPanel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookListPanel -down-\u003e BookCard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookCard --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookCard ..\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "BookListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 8,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UiUpdateBookListActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "if () then ([command updates Catalog])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    :Observable list notifies UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    :UI updates BookListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 14
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "!define STORAGE_COLOR_T4 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "!define COMMONS_COLOR #888888"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "shiyao821": 3
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d Wang Shiyao - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d PROJECT: LiBerry"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "Liberry is a desktop app for community and private library librarians to manage their inventory and loans. It is a software optimized for librarians who prefer to work with a Command Line Interface (CLI), and has a GUI created with JavaFX. The software is written in Java, and has about 10k Lines of Code."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "shiyao821": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.BorrowerRecordsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.JsonBorrowerRecordsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.CatalogStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.JsonCatalogStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.JsonLoanRecordsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.LoanRecordsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecordsStorage loanRecordsStorage \u003d new JsonLoanRecordsStorage(userPrefs.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CatalogStorage catalogStorage \u003d new JsonCatalogStorage(userPrefs.getCatalogFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecordsStorage borrowerRecordsStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonBorrowerRecordsStorage(userPrefs.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                loanRecordsStorage, catalogStorage, borrowerRecordsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *     TODO edit this"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cReadOnlyLoanRecords\u003e loanRecordsOptional;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ReadOnlyLoanRecords initialLoanRecords;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Optional\u003cReadOnlyCatalog\u003e catalogOptional;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ReadOnlyCatalog initialCatalog;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cReadOnlyBorrowerRecords\u003e borrowerRecordsOptional;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ReadOnlyBorrowerRecords initialBorrowerRecords;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            loanRecordsOptional \u003d storage.readLoanRecords();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (!loanRecordsOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample LoanRecord\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialLoanRecords \u003d loanRecordsOptional.orElseGet(SampleDataUtil::getSampleLoanRecords);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty LoanRecord\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialLoanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty LoanRecord\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialLoanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            catalogOptional \u003d storage.readCatalog(initialLoanRecords);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (!catalogOptional.isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Catalog\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialCatalog \u003d catalogOptional.orElseGet(SampleDataUtil::getSampleCatalog);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Catalog\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialCatalog \u003d new Catalog();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Catalog\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialCatalog \u003d new Catalog();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            borrowerRecordsOptional \u003d storage.readBorrowerRecords(initialLoanRecords);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (!borrowerRecordsOptional.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BorrowerRecords\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialBorrowerRecords \u003d borrowerRecordsOptional.orElseGet(SampleDataUtil::getSampleBorrowerRecords);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BorrowerRecords\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialBorrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BorrowerRecords\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            initialBorrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new ModelManager(initialCatalog, initialLoanRecords, initialBorrowerRecords, userPrefs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Catalog ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 6,
      "seeziyang": 5,
      "-": 171,
      "shiyao821": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    //Command messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    //Book messages"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"Serial number provided is already in use!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_BOOKS_LISTED_OVERVIEW \u003d \"%1$d books listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_BOOK \u003d \"No such book!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    //Serial Number messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_INVALID_SERIAL_NUMBER \u003d \"Invalid Serial Number! \\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    //Borrower messages"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BORROWER \u003d \"Phone/Email is already in used! \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_BORROWER_ID \u003d \"No such borrower ID!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_NOT_IN_SERVE_MODE \u003d \"Not in Serve mode! Enter Serve mode to use this command!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    //Loan messages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_BOOK_ON_LOAN \u003d \"%1$s is already on loan!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_BOOK_NOT_ON_LOAN \u003d \"%1$s is not on loan!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_LOAN_ID_DOES_NOT_EXISTS \u003d \"LoanId %s does not exists in LoanRecords!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_NOT_LOANED_BY_BORROWER \u003d \"%1$s does not loan %2$s!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "hoholyin": 14,
      "seeziyang": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/UserSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A Serializable class that contains the User settings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UserSettings implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final int DEFAULT_LOAN_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final int DEFAULT_RENEW_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final int DEFAULT_FINE_INCREMENT \u003d 10; // Fine increment in cents."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final int loanPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final int renewPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final int fineIncrement; //Fine increment in cents."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Instantiates a UserSettings that contains the default loanPeriod, renewPeriod and fineIncrement."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        loanPeriod \u003d DEFAULT_LOAN_PERIOD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        renewPeriod \u003d DEFAULT_RENEW_PERIOD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        fineIncrement \u003d DEFAULT_FINE_INCREMENT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Instantiates a UserSettings that contains the specified loanPeriod, renewPeriod and fineIncrement."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanPeriod Number of days that a book can be loaned."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param renewPeriod Number of additional days given when loan is renewed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param fineIncrement Fine that is added each day for an overdue book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings(int loanPeriod, int renewPeriod, int fineIncrement) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanPeriod \u003d loanPeriod;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.renewPeriod \u003d renewPeriod;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.fineIncrement \u003d fineIncrement;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getLoanPeriod() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return loanPeriod;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getRenewPeriod() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return renewPeriod;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getFineIncrement() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return fineIncrement;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(other instanceof UserSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings o \u003d (UserSettings) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return getLoanPeriod() \u003d\u003d o.getLoanPeriod()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 getRenewPeriod() \u003d\u003d o.getRenewPeriod()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 getFineIncrement() \u003d\u003d o.getFineIncrement();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Objects.hash(loanPeriod, renewPeriod, fineIncrement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        sb.append(\"Loan period : \" + loanPeriod + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        sb.append(\"Renew period : \" + renewPeriod + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        sb.append(\"Fine percentage increment : \" + fineIncrement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 82,
      "seeziyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/LoanSlipException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Exception thrown when an error is encountered while generating a loan slip."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class LoanSlipException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public LoanSlipException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Helper functions for handling LocalDates."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Get current system date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return the current date from the system clock in the default time-zone."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LocalDate getTodayDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Get the date that is number of days after starting date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param startDate Starting date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param days Number of days from starting date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Date that is number of days after starting date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LocalDate extendDate(LocalDate startDate, int days) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert days \u003e\u003d 0 : \"days must be positive\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return startDate.plusDays(days);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Get the date that is number of days before starting date. For tests and simulation purposes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param days Number of days from starting date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Date that is number of days before starting date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static LocalDate getTodayMinusDays(int days) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return getTodayDate().minusDays(days);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Get the date that is number of days after today."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param days Number of days from today."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Date that is number of days after today."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LocalDate getTodayPlusDays(int days) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert days \u003e\u003d 0 : \"days must be positive\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return extendDate(getTodayDate(), days);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Get the number of days between startDate and endDate."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param startDate Starting date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param endDate Ending date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Number of days between the two dates."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static int getNumOfDaysBetween(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert endDate.isAfter(startDate) : \"endDate should be later than startDate\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return (int) startDate.until(endDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Formats the date to be printed on the loan slip."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param date date to be formatted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a formatted date as a {@code String}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static String formatDate(LocalDate date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String[] pieces \u003d date.toString().split(\"-\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        for (String s : pieces) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            result \u003d s + \"-\" + result;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return result.substring(0, result.length() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 29,
      "seeziyang": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/LoanSlipDocument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.io.font.PdfEncodings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.io.image.ImageData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.io.image.ImageDataFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.kernel.font.PdfFont;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.kernel.font.PdfFontFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.borders.Border;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Cell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Paragraph;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.property.HorizontalAlignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.property.TextAlignment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Instance class to handle a single pdf document."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class LoanSlipDocument {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int HEADER_FONT_SIZE \u003d 32;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int MID_HEADER_FONT_SIZE \u003d 28;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int PARAGRAPH_FONT_SIZE \u003d 20;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final double SCALE_RATIO \u003d 0.1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String FONT \u003d \"src/main/resources/font/Lato-Black.ttf\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String LOGO_PATH \u003d \"src/main/resources/images/LiBerryLogo.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String LINE_DIVIDER \u003d \"_______________________________________________________\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Document doc;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Table table;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructor for LoanSlipDocument object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc iText Document to be wrapped."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public LoanSlipDocument(Document doc, Table table) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.doc \u003d doc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.table \u003d table;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Appends the logo to the pdf document."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeLogo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Image pdfImg \u003d createImage(LOGO_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            double newWidth \u003d pdfImg.getImageWidth() * SCALE_RATIO;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            double newHeight \u003d pdfImg.getImageHeight() * SCALE_RATIO;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            pdfImg.scaleToFit((float) newWidth, (float) newHeight);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            pdfImg.setHorizontalAlignment(HorizontalAlignment.LEFT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            doc.add(pdfImg);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            assert false; // path is provided by us and should not throw this error"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes the divider line for the loan slip."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeLine() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocAlignLeft(LINE_DIVIDER, PARAGRAPH_FONT_SIZE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes the header of the document."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text content of header."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeHeader(String text) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocAlignLeft(text, HEADER_FONT_SIZE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes the mid header of the document."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text content of header."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeMidHeader(String text) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocAlignLeft(text, MID_HEADER_FONT_SIZE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes a paragraph of the document, aligned to left."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text content of header."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeLeftParagraph(String text) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocAlignLeft(text, PARAGRAPH_FONT_SIZE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes a paragraph of the document, centralised."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text content of header."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeCentralisedParagraph(String text) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        writeToDocCentralised(text, PARAGRAPH_FONT_SIZE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a cell to the table."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text text to be added to the cell."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addCell(String text) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Cell cell \u003d new Cell();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        cell.setBorder(Border.NO_BORDER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        cell.add(customLeftParagraph(text, 18));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        table.addCell(cell);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Writes a row to the table."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param elements row of elements."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void writeRow(String[] elements) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        int noOfCols \u003d table.getNumberOfColumns();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (elements.length \u003d\u003d noOfCols) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Arrays.stream(elements).forEach(e -\u003e addCell(e));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds the table to the document in preparation for generation of pdf."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void submitTable() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.add(table);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Closes the document."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void closeDoc() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to allow writing to document with custom font size."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text Text to be written."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param fontSize font size of the text."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void writeToDocAlignLeft(String text, int fontSize) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Paragraph p \u003d customLeftParagraph(text, fontSize);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.add(p);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void writeToDocCentralised(String text, int fontSize) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Paragraph p \u003d alignParagraph(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        p.add(text).setFontSize(fontSize);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.add(p);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Helper method to write a paragraph to the document."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Allows customization of text and font size."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param text text to be added to the paragraph."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param fontSize font size of text."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return {@code Paragraph} object to be added to document."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Paragraph customLeftParagraph(String text, int fontSize) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Paragraph p \u003d alignParagraph(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        p.add(text).setFontSize(fontSize);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates a paragraph with the given alignment."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param textAlignment Alignment of the paragraph to be created."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a {@code Paragraph} Object with the custom alignment specified."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Paragraph alignParagraph(TextAlignment textAlignment) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Paragraph p \u003d new Paragraph();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            PdfFont font \u003d PdfFontFactory.createFont(FONT, PdfEncodings.WINANSI, true);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            p.setFont(font);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            // error occur while loading font, use default font"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        p.setTextAlignment(textAlignment);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates an image to be appended to the document."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param path path of the image in local directory."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an {@code Image} Object."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws MalformedURLException if path given is corrupted/does not exist."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Image createImage(String path) throws MalformedURLException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ImageData imageData \u003d ImageDataFactory.create(path);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Image(imageData);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 209
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/LoanSlipUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.kernel.pdf.PdfDocument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.kernel.pdf.PdfWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.Document;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import com.itextpdf.layout.element.Table;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Loan slip util class to generate a Loan Slip to pdf using iText7."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class LoanSlipUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String PDF_EXTENSION \u003d \".pdf\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String BYE_MESSAGE \u003d \"We hope to see you again!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String DEST \u003d \"./data/loan_slips/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final float FIRST_ROW_WIDTH \u003d 75F;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final float SECOND_ROW_WIDTH \u003d 325F;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final float THIRD_ROW_WIDTH \u003d 125F;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static Loan currentLoan;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static Book currentBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static Borrower currentBorrower;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static File currentFile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static boolean isMounted \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Mounts a Loan slip in preparation for creating a pdf version of it."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param loan Loan to be represented in the loan slip."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param book Book associated to current loan."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param borrower Borrower associated to current loan."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void mountLoanSlip(Loan loan, Book book, Borrower borrower) throws LoanSlipException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (isMounted) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            unmountLoanSlip();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!loan.getBorrowerId().equals(borrower.getBorrowerId())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"Borrower and Loan do not match!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!loan.getBookSerialNumber().equals(book.getSerialNumber())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"Book and Loan do not match!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentLoan \u003d loan;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBook \u003d book;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBorrower \u003d borrower;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        isMounted \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        isGenerated \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Unmounts a Loan slip after creating a pdf of it."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void unmountLoanSlip() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (isMounted) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentLoan \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentBook \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentBorrower \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            currentFile \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            isMounted \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            isGenerated \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates a pdf version of the loan slip that is currently mounted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws LoanSlipException if there is an error reading/writing to the pdf file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void createLoanSlipInDirectory() throws LoanSlipException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isMounted) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"No Loan slip mounted yet\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(currentLoan);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(currentBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(currentBorrower);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Document document \u003d createDocument(currentLoan.getLoanId().toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            float [] pointColumnWidths \u003d {FIRST_ROW_WIDTH, SECOND_ROW_WIDTH, THIRD_ROW_WIDTH};"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Table table \u003d new Table(pointColumnWidths);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            LoanSlipDocument doc \u003d new LoanSlipDocument(document, table);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            generateLiberryLoanSlip(doc);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates a {@code File} object to be populated with information."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param docName name of the new file object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return a {@code Document} object representing the file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws IOException if there are errors in creating the new file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static Document createDocument(String docName) throws IOException, LoanSlipException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isMounted) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"No Loan slip mounted yet\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String finalDest \u003d DEST + docName + PDF_EXTENSION;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        File file \u003d new File(finalDest);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        PdfWriter writer \u003d new PdfWriter(finalDest);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Initialize PDF document"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        PdfDocument pdf \u003d new PdfDocument(writer);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Initialize document"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentFile \u003d file;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Document(pdf);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Populates the pdf file with information, creating the loan slip."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param doc {@code LoanSlipDocument} object to be populated with data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static void generateLiberryLoanSlip(LoanSlipDocument doc) throws LoanSlipException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isMounted) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"No Loan slip mounted yet\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //write logo"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLogo();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Add paragraph to the document"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeHeader(currentBorrower.getName().toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLeftParagraph(currentBorrower.getBorrowerId().toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeMidHeader(\"Books borrowed\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //populate table"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String[] headerRow \u003d new String[]{\"S/N\", \"Book\", \"Due By\"};"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeRow(headerRow);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeRow(createBookRow());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //add table to document"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.submitTable();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeLine();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.writeCentralisedParagraph(BYE_MESSAGE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //close document"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        doc.closeDoc();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        isGenerated \u003d true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates an array using the details from the mounted loan slip."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an array of string representing a row of the table."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static String[] createBookRow() throws LoanSlipException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isMounted) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"No Loan slip mounted yet\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String[] currentBookDetails \u003d new String[3];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBookDetails[0] \u003d currentBook.getSerialNumber().toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBookDetails[1] \u003d currentBook.getTitle().toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        currentBookDetails[2] \u003d DateUtil.formatDate(currentLoan.getDueDate());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return currentBookDetails;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a loan slip is currently mounted."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if a loan slip is currently mounted."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static boolean isMounted() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return isMounted;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Opens loan slip pdf to allow ease of printing loan slip."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * (Cannot be tested autonomously)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void openLoanSlip() throws LoanSlipException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isMounted || !isGenerated) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"Loan slip is not generated\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Desktop.getDesktop().open(currentFile);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new LoanSlipException(\"Error in opening loan slip\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * For testing purposes."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Current loan mounted, or null if unmounted."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Loan getCurrentLoan() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return currentLoan;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 206
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns the Catalog."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @see seedu.address.model.Model#getCatalog()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ReadOnlyCatalog getCatalog();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of books */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns the user prefs\u0027 catalog file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Path getCatalogFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 9,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.LoanSlipUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.parser.CatalogParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final CatalogParser catalogParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalogParser \u003d new CatalogParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Command command \u003d catalogParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            storage.saveLoanRecords(model.getLoanRecords());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            storage.saveCatalog(model.getCatalog());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            storage.saveBorrowerRecords(model.getBorrowerRecords());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (LoanSlipUtil.isMounted()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                storage.storeNewLoanSlip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                storage.openNewLoanSlip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                LoanSlipUtil.unmountLoanSlip();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (LoanSlipException lse) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            logger.info(\"Error in generating loan slip\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ReadOnlyCatalog getCatalog() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getCatalog();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getFilteredBookList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getCatalogFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 21,
      "-": 65,
      "shiyao821": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the catalog. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_AUTHOR + \"AUTHOR \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"[ \" + PREFIX_SERIAL_NUMBER + \"SERIAL_NUMBER] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"[\" + PREFIX_GENRE + \"GENRE]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_TITLE + \"Harry Potter \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \"B0001 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_AUTHOR + \"J K Rowling \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_GENRE + \"Fiction \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_GENRE + \"Action \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Book toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Book}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public AddCommand(Book book) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        toAdd \u003d book;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (model.hasBook(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            // to handle books with same serial number here next time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 27,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Displays all books - clears the search filter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Catalog has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        model.resetFilteredBookList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 19,
      "shiyao821": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteByIndexCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Deletes a book identified using it\u0027s displayed index from the catalog."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class DeleteByIndexCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public DeleteByIndexCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // delete by index in list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof DeleteByIndexCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteByIndexCommand) other).targetIndex)); // state"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBySerialNumberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Deletes a book identified using it\u0027s serial number from the catalog."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class DeleteBySerialNumberCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \": Deletes the book identified by its serial number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final SerialNumber targetSerialNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public DeleteBySerialNumberCommand(SerialNumber targetSerialNumber) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.targetSerialNumber \u003d targetSerialNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // delete by serial number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!modelContainsBook(model, targetSerialNumber)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SUCH_BOOK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d retrieveBookFromCatalog(model, targetSerialNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a model contains a target book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param model Model to check."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param serialNumber Serial number of target book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if target book is found in model."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean modelContainsBook(Model model, SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getCatalog()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .getBookList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.getSerialNumber().equals(serialNumber))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .count() \u003d\u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns Book from Catalog under the model."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param model Model to retrieve Book from."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param serialNumber Serial number of target book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Book object, the target book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Book retrieveBookFromCatalog(Model model, SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return (Book) model.getCatalog()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .getBookList()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.getSerialNumber().equals(serialNumber))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .toArray()[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof DeleteBySerialNumberCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 targetSerialNumber.equals(((DeleteBySerialNumberCommand) other).targetSerialNumber)); // state"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Abstract parent class for DeleteBySerialNumberCommand and DeleteByIndexCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \": Deletes the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n or\\n SERIAL_NUMBER (must be valid serial number)\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 or \" + COMMAND_WORD + \" sn/B00001\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Exits the serve mode."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exited from Serve Mode. \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        model.exitsServeMode();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return (other \u003d\u003d this || other instanceof DoneCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the book identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"[\" + PREFIX_SERIAL_NUMBER + \"SERIAL_NUMBER] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"[\" + PREFIX_GENRE + \"GENRE]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \"0001\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + PREFIX_AUTHOR + \"J K Rowling\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOK_SUCCESS \u003d \"Edited Book: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final EditBookDescriptor editBookDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param editBookDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditCommand(Index index, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(editBookDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.editBookDescriptor \u003d new EditBookDescriptor(editBookDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (model.excludeBookBeingReplaced(bookToEdit).hasBook(editedBook)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editedBook));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static Book createEditedBook(Book bookToEdit, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Title updatedTitle \u003d editBookDescriptor.getTitle().orElse(bookToEdit.getTitle());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber updatedSerialNumber \u003d editBookDescriptor.getSerialNumber().orElse(bookToEdit.getSerialNumber());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author updatedAuthor \u003d editBookDescriptor.getAuthor().orElse(bookToEdit.getAuthor());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        boolean bookHasLoan \u003d bookToEdit.isCurrentlyLoanedOut();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan updatedLoan;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (bookHasLoan) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            updatedLoan \u003d editBookDescriptor.getLoan().orElse(bookToEdit.getLoan().get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            updatedLoan \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Set\u003cGenre\u003e updatedGenres \u003d editBookDescriptor.getGenres().orElse(bookToEdit.getGenres());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book(updatedTitle, updatedSerialNumber, updatedAuthor, updatedLoan, updatedGenres);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 editBookDescriptor.equals(e.editBookDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Stores the details to edit the book with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static class EditBookDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private Author author;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private Loan loan;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private Set\u003cGenre\u003e genres;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public EditBookDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         * A defensive copy of {@code genres} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public EditBookDescriptor(EditBookDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            setSerialNumber(toCopy.serialNumber);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            setAuthor(toCopy.author);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            setLoan(toCopy.loan);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            setGenres(toCopy.genres);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, serialNumber, author, genres);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setSerialNumber(SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Optional\u003cSerialNumber\u003e getSerialNumber() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return Optional.ofNullable(serialNumber);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setAuthor(Author author) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.author \u003d author;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setLoan(Loan loan) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.loan \u003d loan;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Optional\u003cLoan\u003e getLoan() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return Optional.ofNullable(loan);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Optional\u003cAuthor\u003e getAuthor() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return Optional.ofNullable(author);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         * Sets {@code genres} to this object\u0027s {@code genres}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         * A defensive copy of {@code genres} is used internally."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setGenres(Set\u003cGenre\u003e genres) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.genres \u003d (genres !\u003d null) ? new HashSet\u003c\u003e(genres) : null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         * Returns an unmodifiable genre set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code genres} is null."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Optional\u003cSet\u003cGenre\u003e\u003e getGenres() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return (genres !\u003d null) ? Optional.of(Collections.unmodifiableSet(genres)) : Optional.empty();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (!(other instanceof EditBookDescriptor)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            EditBookDescriptor e \u003d (EditBookDescriptor) other;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    \u0026\u0026 getSerialNumber().equals(e.getSerialNumber())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    \u0026\u0026 getAuthor().equals(e.getAuthor())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    \u0026\u0026 getGenres().equals(e.getGenres());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 96,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Catalog as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all books by filtering the ones matching \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"Parameters: { [t/TITLE] [a/AUTHOR] [g/GENRE]… [sn/BOOK_SN] \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"[-overdue]/[-loaned]/[-available] } [NUMBER]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" g/mystery g/children -available\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final BookPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public FindCommand(BookPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "-": 34,
      "shiyao821": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InfoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class InfoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"info\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_BOOK_INFO \u003d \"Displaying information for %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Get information of a book\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final BookPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public InfoCommand(Index index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        predicate \u003d new BookPredicate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book target \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        predicate.setSerialNumber(getSerialNumberAsString(target));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(MESSAGE_BOOK_INFO, getTitleFromBook(target)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private String getSerialNumberAsString(Book target) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return target.getSerialNumber().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private String getTitleFromBook(Book target) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return target.getTitle().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof InfoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 index.equals(((InfoCommand) other).index)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_ON_LOAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.UserSettings.DEFAULT_LOAN_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.LoanSlipUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanIdGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Loans a Book with the given Serial Number to a Borrower."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"loan\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Loans a book to a borrower.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Command can only be used in Serve mode.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Parameters: \" + PREFIX_SERIAL_NUMBER + \"SERIAL_NUMBER\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SERIAL_NUMBER + \"B00001\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book: %1$s loaned to Borrower: %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final SerialNumber toLoan;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Creates an LoanCommand to loan the specified {@code Book} to the Borrower currently served."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param bookSn Serial number of Book to be loaned."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanCommand(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(bookSn);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.toLoan \u003d bookSn;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Executes the LoanCommand and returns the result message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.hasBook(this.toLoan)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_BOOK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book bookToBeLoaned \u003d model.getBook(toLoan);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (bookToBeLoaned.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOK_ON_LOAN, bookToBeLoaned));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower servingBorrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loan \u003d new Loan(LoanIdGenerator.generateLoanId(), toLoan, servingBorrower.getBorrowerId(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(DEFAULT_LOAN_PERIOD));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // TODO READ FROM MODEL-\u003eUSERSETTINGS instead!!"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedOutBook \u003d new Book(bookToBeLoaned.getTitle(), bookToBeLoaned.getSerialNumber(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                bookToBeLoaned.getAuthor(), loan, bookToBeLoaned.getGenres());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // replace the previous Book object with a new Book object that has a Loan"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setBook(bookToBeLoaned, loanedOutBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.addLoan(loan); // add Loan object to LoanRecords in model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.servingBorrowerNewLoan(loan); // add Loan object to Borrower\u0027s currentLoanList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            LoanSlipUtil.mountLoanSlip(loan, loanedOutBook, servingBorrower);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (LoanSlipException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            e.printStackTrace(); // Unable to generate loan slip, does not affect loan functionality"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, loanedOutBook, servingBorrower));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(o instanceof LoanCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand otherLoanCommand \u003d (LoanCommand) o;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this.toLoan.equals(otherLoanCommand.toLoan);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "hoholyin": 8,
      "seeziyang": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BORROWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Registers a borrower to the library records."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class RegisterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Register a new borrower to the library records. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_PHONE + \"PHONE NUMBER \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_NAME + \"matt \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_PHONE + \"83938249 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_EMAIL + \"matt@damon.com \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New borrower added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final Borrower toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Book}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public RegisterCommand(Borrower borrower) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(borrower);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        toAdd \u003d borrower;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (model.hasBorrower(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            // borrowers with same name and (phone number or email)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            model.resetGenerator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BORROWER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        model.registerBorrower(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || (other instanceof RegisterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RegisterCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReturnCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_NOT_ON_LOAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_LOANED_BY_BORROWER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Returns a Book with the given Index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class ReturnCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Loans a book to a borrower.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Command can only be used in Serve mode.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book: %1$s returned by Borrower: %2$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Creates an ReturnCommand to return the currently served Borrower\u0027s {@code Book}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param index Index of book to be returned."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public ReturnCommand(Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Executes the ReturnCommand and returns the result message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Feedback message of the operation result for display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!model.isServeMode()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_SERVE_MODE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book bookToBeReturned \u003d lastShownList.get(index.getZeroBased()); // TODO change to second list index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!bookToBeReturned.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOK_NOT_ON_LOAN, bookToBeReturned));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //is there a way to split this up so that we follow Law of demeter?"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan returningLoan \u003d bookToBeReturned.getLoan().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower servingBorrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // check if servingBorrower has this Book loaned"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!servingBorrower.hasCurrentLoan(returningLoan)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_LOANED_BY_BORROWER,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    servingBorrower, bookToBeReturned));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book returnedBook \u003d new Book(bookToBeReturned.getTitle(), bookToBeReturned.getSerialNumber(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                bookToBeReturned.getAuthor(), null, bookToBeReturned.getGenres());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // update Book in model to have Loan removed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setBook(bookToBeReturned, returnedBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // remove Loan from Borrower\u0027s currentLoanList and move to Borrower\u0027s returnedLoanList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.servingBorrowerReturnLoan(returningLoan);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, returnedBook, servingBorrower));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(o instanceof ReturnCommand)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand otherReturnCommand \u003d (ReturnCommand) o;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this.index.equals(otherReturnCommand.index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 4,
      "seeziyang": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ServeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BORROWER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Opens a serving session for a borrower and allows the borrower to start borrower book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class ServeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"serve\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the Serve Mode. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_BORROWER_ID + \"ID\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + PREFIX_BORROWER_ID + \"K0001 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Currently serving borrower: %1$s\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private BorrowerId borrowerId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public ServeCommand (BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(borrowerId);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!model.hasBorrowerId(borrowerId)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_BORROWER_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        model.setServingBorrower(borrowerId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower \u003d model.getServingBorrower();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, borrower));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || (other instanceof ServeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 borrowerId.equals(((ServeCommand) other).borrowerId));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINE_INCREMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOAN_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RENEW_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Sets the user configuration of the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets custom user settings of the application.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"[\" + PREFIX_LOAN_PERIOD + \"LOAN_PERIOD] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"[\" + PREFIX_RENEW_PERIOD + \"RENEW_PERIOD] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"[\" + PREFIX_FINE_INCREMENT + \"FINE_INCREMENT]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + PREFIX_LOAN_PERIOD + \"14\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            + PREFIX_RENEW_PERIOD + \"14\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_SET_USER_SETTINGS_SUCCESS \u003d \"Set User Settings: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final SetUserSettingsDescriptor setUserSettingsDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param setUserSettingsDescriptor details of the new user settings"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetCommand(SetUserSettingsDescriptor setUserSettingsDescriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.setUserSettingsDescriptor \u003d new SetUserSettingsDescriptor(setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptor getSetUserSettingsDescriptor() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return setUserSettingsDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings userSettingsToEdit \u003d model.getUserSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings editedUserSettings \u003d createEditedUserSettings(userSettingsToEdit, setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        model.setUserSettings(editedUserSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SET_USER_SETTINGS_SUCCESS, model.getUserSettings()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static UserSettings createEditedUserSettings(UserSettings userSettingsToEdit,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                                                      SetUserSettingsDescriptor setUserSettingsDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        LoanPeriod loanPeriod \u003d setUserSettingsDescriptor.getLoanPeriod()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .orElse(new LoanPeriod(userSettingsToEdit.getLoanPeriod()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        RenewPeriod renewPeriod \u003d setUserSettingsDescriptor.getRenewPeriod()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .orElse(new RenewPeriod(userSettingsToEdit.getRenewPeriod()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        FineIncrement fineIncrement \u003d setUserSettingsDescriptor.getFineIncrement()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .orElse(new FineIncrement(userSettingsToEdit.getFineIncrement()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new UserSettings(loanPeriod.getLoanPeriod(), renewPeriod.getRenewPeriod(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                fineIncrement.getFineIncrement());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(other instanceof SetCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand e \u003d (SetCommand) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return setUserSettingsDescriptor.equals(e.getSetUserSettingsDescriptor());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Stores the user settings to change. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static class SetUserSettingsDescriptor {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        private LoanPeriod loanPeriod;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        private RenewPeriod renewPeriod;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        private FineIncrement fineIncrement;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public SetUserSettingsDescriptor() {}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public SetUserSettingsDescriptor(SetUserSettingsDescriptor toCopy) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setLoanPeriod(toCopy.loanPeriod);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setRenewPeriod(toCopy.renewPeriod);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setFineIncrement(toCopy.fineIncrement);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(loanPeriod, renewPeriod, fineIncrement);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void setLoanPeriod(LoanPeriod loanPeriod) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            this.loanPeriod \u003d loanPeriod;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public Optional\u003cLoanPeriod\u003e getLoanPeriod() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return Optional.ofNullable(loanPeriod);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void setRenewPeriod(RenewPeriod renewPeriod) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            this.renewPeriod \u003d renewPeriod;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public Optional\u003cRenewPeriod\u003e getRenewPeriod() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return Optional.ofNullable(renewPeriod);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void setFineIncrement(FineIncrement fineIncrement) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            this.fineIncrement \u003d fineIncrement;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public Optional\u003cFineIncrement\u003e getFineIncrement() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return Optional.ofNullable(fineIncrement);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            if (!(other instanceof SetUserSettingsDescriptor)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            SetUserSettingsDescriptor e \u003d (SetUserSettingsDescriptor) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return getLoanPeriod().equals(e.getLoanPeriod())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    \u0026\u0026 getRenewPeriod().equals(e.getRenewPeriod())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    \u0026\u0026 getFineIncrement().equals(e.getFineIncrement());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return AddCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_SERIAL_NUMBER, PREFIX_AUTHOR,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        PREFIX_GENRE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_AUTHOR)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author author \u003d ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        boolean haveSerialNumber \u003d argMultimap.getValue(PREFIX_SERIAL_NUMBER).isPresent();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber serialNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (haveSerialNumber) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            serialNumber \u003d ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIAL_NUMBER).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            serialNumber \u003d SerialNumberGenerator.generateSerialNumber();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Set\u003cGenre\u003e genreList \u003d ParserUtil.parseGenres(argMultimap.getAllValues(PREFIX_GENRE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan loan \u003d null; //stub for loan object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new Book(title, serialNumber, author, loan, genreList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new AddCommand(book);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 27,
      "seeziyang": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CatalogParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class CatalogParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case LoanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new LoanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        case InfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return new InfoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case RegisterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new RegisterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case ServeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new ServeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        case ReturnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new ReturnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "seeziyang": 20,
      "Cronyxx": 4,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Prefix PREFIX_SERIAL_NUMBER \u003d new Prefix(\"sn/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Prefix PREFIX_GENRE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Prefix PREFIX_BORROWER_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final Prefix PREFIX_LOAN_PERIOD \u003d new Prefix(\"lp/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final Prefix PREFIX_RENEW_PERIOD \u003d new Prefix(\"rp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final Prefix PREFIX_FINE_INCREMENT \u003d new Prefix(\"fi/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 2,
      "hoholyin": 4,
      "Cronyxx": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteByIndexCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteBySerialNumberCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (isPrefixPresent(argMultimap, PREFIX_SERIAL_NUMBER)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                //attempting to delete by serial number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                SerialNumber sn \u003d ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIAL_NUMBER).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                return new DeleteBySerialNumberCommand(sn);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                //attempting to delete by index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                return new DeleteByIndexCommand(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (serialNumberProvided(args)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        String.format(MESSAGE_INVALID_SERIAL_NUMBER, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if user attempted to provide serial number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args arguments in string representation."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if serial number is contained within the input string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean serialNumberProvided(String args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Arguments that come to this method are part of a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Therefore, if the serial number prefix is present, the serial number provided is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return isPrefixPresent(argMultimap, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 40,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return DoneCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public DoneCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new DoneCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_SERIAL_NUMBER, PREFIX_AUTHOR,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        PREFIX_GENRE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand.EditBookDescriptor editBookDescriptor \u003d new EditCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            editBookDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SERIAL_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            editBookDescriptor.setSerialNumber(ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIAL_NUMBER)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            editBookDescriptor.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_GENRE)).ifPresent(editBookDescriptor::setGenres);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!editBookDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new EditCommand(index, editBookDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cGenre\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code Set\u003cGenre\u003e} containing zero tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Optional\u003cSet\u003cGenre\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Optional.of(ParserUtil.parseGenres(tagSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 23,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String PREAMBLE_PLACEHOLDER \u003d \" 0 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String trimmedArgs \u003d PREAMBLE_PLACEHOLDER + args.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                ArgumentTokenizer.tokenize(trimmedArgs, PREFIX_TITLE, PREFIX_SERIAL_NUMBER, PREFIX_AUTHOR,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        PREFIX_GENRE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            predicate.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()).value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SERIAL_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            predicate.setSerialNumber(ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIAL_NUMBER)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    .get()).value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            predicate.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()).value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        parseGenresForFind(argMultimap.getAllValues(PREFIX_GENRE)).ifPresent(predicate::setGenres);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!predicate.isValid()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e genres} into a {@code Set\u003cGenre\u003e} if {@code genres} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Automatically converts lowercase {@code genreNames} to UPPERCASE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * If {@code genres} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * {@code Set\u003cGenre\u003e} containing zero genres."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Optional\u003cSet\u003cGenre\u003e\u003e parseGenresForFind(Collection\u003cString\u003e genres) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(genres);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (genres.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Collection\u003cString\u003e genreSet \u003d genres.size() \u003d\u003d 1 \u0026\u0026 genres.contains(\"\") ? Collections.emptySet() : genres;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return Optional.of(ParserUtil.parseGenres(genreSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 29,
      "shiyao821": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InfoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class InfoCommandParser implements Parser\u003cInfoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int VALID_NUMBER_OF_ARGUMENTS \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public InfoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!isInfoCommand(args)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InfoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        index \u003d ParserUtil.parseIndex(extractIndex(args));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new InfoCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Extracts index from given string of arguments."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args {@code String} of arguments."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return {@code String} representation of index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private String extractIndex(String args) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return args.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if arguments are in a valid format of an info command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args {@code String} of arguments."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if arguments are in a valid format of an info command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean isInfoCommand(String args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return correctNumberOfArguments(args) //assert correct number of arguments here"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 argumentIsValidInteger(args); //asserted correct number of arguments before accessing array in here"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if number of arguments correspond to that of a valid info command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args {@code String} of arguments."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if number of arguments correspond to that of a valid info command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean correctNumberOfArguments(String args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String[] argsArr \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return argsArr.length \u003d\u003d VALID_NUMBER_OF_ARGUMENTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if the given index argument is a valid integer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param args {@code String} of arguments."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if the given index argument is a valid integer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean argumentIsValidInteger(String args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String arg \u003d args.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Integer.parseInt(arg);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Parses input arguments and creates a new LoanCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanCommandParser implements Parser\u003cLoanCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoanCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * and returns a LoanCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param args User input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return LoanCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Optional\u003cString\u003e optionalSnString \u003d argMultimap.getValue(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (optionalSnString.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber bookSn \u003d ParserUtil.parseSerialNumber(optionalSnString.get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanCommand(bookSn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses a {@code String title} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String trimmedName \u003d title.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!Title.isValidTitle(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Title(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses a {@code String serialNumber} into a {@code SerialNumber}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws ParseException if the given {@code serialNumber} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static SerialNumber parseSerialNumber(String serialNumber) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String trimmedSerialNumber \u003d serialNumber.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(trimmedSerialNumber)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new SerialNumber(trimmedSerialNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses a {@code String author} into an {@code Author}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Author object from remark string"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static Author parseAuthor(String author) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String trimmedAuthor \u003d author.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Author.isValidAuthor(trimmedAuthor)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new ParseException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Author(trimmedAuthor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses a {@code String genre} into a {@code Genre}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed, and genre will be converted to UPPERCASE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws ParseException if the given {@code genre} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Genre parseGenre(String genre) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(genre);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String trimmedGenre \u003d genre.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String uppercaseGenre \u003d trimmedGenre.toUpperCase();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Genre.isValidGenreName(uppercaseGenre)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new ParseException(Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return new Genre(uppercaseGenre);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e genres} into a {@code Set\u003cGenre\u003e}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Set\u003cGenre\u003e parseGenres(Collection\u003cString\u003e genres) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(genres);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        final Set\u003cGenre\u003e genreSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (String genreName : genres) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            genreSet.add(parseGenre(genreName));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return genreSet;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses a {@code String Borrower ID} into an {@code Borrower ID}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws ParseException if the given {@code borrower ID} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static BorrowerId parseBorrowerId(String id) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!BorrowerId.isValidBorrowerId(trimmedId)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new ParseException(BorrowerId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new BorrowerId(trimmedId);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses {@code loanPeriod} into an {@code LoanPeriod} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws ParseException if the specified loanPeriod is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static LoanPeriod parseLoanPeriod(String loanPeriod) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(loanPeriod);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String trimmedLoanPeriod \u003d loanPeriod.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedLoanPeriod)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new LoanPeriod(trimmedLoanPeriod);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses {@code renewPeriod} into an {@code renewPeriod} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws ParseException if the specified renewPeriod is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static RenewPeriod parseRenewPeriod(String renewPeriod) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(renewPeriod);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String trimmedRenewPeriod \u003d renewPeriod.trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedRenewPeriod)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(RenewPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new RenewPeriod(trimmedRenewPeriod);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses {@code fineIncrement} into an {@code FineIncrement} and returns it. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * be trimmed."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws ParseException if the specified fineIncrement is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static FineIncrement parseFineIncrement(String fineIncrement) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(fineIncrement);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String trimmedFineIncrement \u003d fineIncrement.trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedFineIncrement)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(FineIncrement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new FineIncrement(trimmedFineIncrement);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 16,
      "hoholyin": 35,
      "Cronyxx": 37,
      "-": 119,
      "shiyao821": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Parses input arguments and creates a new RegisterCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class RegisterCommandParser implements Parser\u003cRegisterCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RegisterCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * and returns an RegisterCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return RegisterCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public RegisterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower \u003d new Borrower(name, phone, email);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new RegisterCommand(borrower);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReturnCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Parses input arguments and creates a new LoanCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class ReturnCommandParser implements Parser\u003cReturnCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReturnCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * and returns a ReturnCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param args User input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return ReturnCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public ReturnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return new ReturnCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReturnCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ServeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Parses input arguments and creates a new ServeCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class ServeCommandParser implements Parser\u003cServeCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ServeCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * and returns a ServeCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return ServeCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public ServeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BORROWER_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_BORROWER_ID).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                    ServeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId borrowerId \u003d ParserUtil.parseBorrowerId(argMultimap.getValue(PREFIX_BORROWER_ID).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new ServeCommand(borrowerId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINE_INCREMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOAN_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RENEW_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Parses input arguments and creates a new SetCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * and returns an SetCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LOAN_PERIOD, PREFIX_RENEW_PERIOD, PREFIX_FINE_INCREMENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor setUserSettingsDescriptor \u003d new SetCommand.SetUserSettingsDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOAN_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setUserSettingsDescriptor.setLoanPeriod(ParserUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    .parseLoanPeriod(argMultimap.getValue(PREFIX_LOAN_PERIOD).get()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RENEW_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setUserSettingsDescriptor.setRenewPeriod(ParserUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    .parseRenewPeriod(argMultimap.getValue(PREFIX_RENEW_PERIOD).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FINE_INCREMENT).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            setUserSettingsDescriptor.setFineIncrement(ParserUtil"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    .parseFineIncrement(argMultimap.getValue(PREFIX_FINE_INCREMENT).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!setUserSettingsDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new ParseException(SetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new SetCommand(setUserSettingsDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BorrowerRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerIdGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.exceptions.BorrowerNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.exceptions.DuplicateBorrowerException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Wraps all data at the catalog level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class BorrowerRecords implements ReadOnlyBorrowerRecords {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // Placeholder for UniqueBorrowerList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private ObservableList\u003cBorrower\u003e listOfBorrowers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private HashMap\u003cBorrowerId, Borrower\u003e borrowersMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BorrowerRecords() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Creates BorrowerRecords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param toBeCopied is the records to be copied"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerRecords(ReadOnlyBorrowerRecords toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if a borrower is in the borrower records."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param borrower Borrower to be checked."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean hasBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return listOfBorrowers.stream().anyMatch(current -\u003e current.getPhone().equals(borrower.getPhone())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || current.getEmail().equals(borrower.getEmail()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a borrower to the borrower records."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param borrower Borrower to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void addBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        listOfBorrowers.add(borrower);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrowersMap.put(borrower.getBorrowerId(), borrower);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private void resetData(ReadOnlyBorrowerRecords newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        setBorrowers(FXCollections.observableArrayList(newData.getBorrowerList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private void setBorrowers(ObservableList\u003cBorrower\u003e borrowerList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.listOfBorrowers \u003d borrowerList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.borrowersMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrowerList.stream().forEach(borrower -\u003e borrowersMap.put(borrower.getBorrowerId(), borrower));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(this);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * to check if borrower id exists."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param id is the borrower id."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @return a boolean true or false of whether the id exists."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean checkIfBorrowerIdExists(BorrowerId id) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return borrowersMap.containsKey(id);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a borrower based on its BorrowerId."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param id the \u003ccode\u003eBorrowerId\u003c/code\u003e of the \u003ccode\u003eBorrower\u003c/code\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return \u003ccode\u003eBorrower\u003c/code\u003e which corresponds to the given \u003ccode\u003eBorrowerId\u003c/code\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws NullPointerException if borrower is not present in the borrower records."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Borrower getBorrowerFromId(BorrowerId id) throws NullPointerException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!borrowersMap.containsKey(id)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new NullPointerException(\"Borrower does not exists\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return borrowersMap.get(id);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if the list contains an equivalent borrower as the given argument."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean listContains(Borrower toCheck) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return listOfBorrowers.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Replaces the borrower {@code target} in the list with {@code editedBorrower}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * The borrower identity of {@code editedBorrower} must not be the same as another existing borrower in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setBorrower(Borrower target, Borrower editedBorrower) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireAllNonNull(target, editedBorrower);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int index \u003d listOfBorrowers.indexOf(target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new BorrowerNotFoundException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!target.equals(editedBorrower) \u0026\u0026 listContains(editedBorrower)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new DuplicateBorrowerException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        listOfBorrowers.set(index, editedBorrower);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowersMap.remove(target.getBorrowerId());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowersMap.put(editedBorrower.getBorrowerId(), editedBorrower);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ObservableList\u003cBorrower\u003e getBorrowerList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return FXCollections.unmodifiableObservableList(listOfBorrowers);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || (other instanceof BorrowerRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 listOfBorrowers.equals(((BorrowerRecords) other).listOfBorrowers)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 borrowersMap.equals(((BorrowerRecords) other).borrowersMap));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return listOfBorrowers.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 37,
      "hoholyin": 35,
      "seeziyang": 34,
      "shiyao821": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Catalog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.UniqueBookList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Wraps all data at the catalog level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Duplicates are not allowed (by .isSameBook comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Catalog implements ReadOnlyCatalog {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final UniqueBookList books;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        books \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Catalog() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Creates a Catalog using the Books in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Catalog(ReadOnlyCatalog toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Replaces the contents of the book list with {@code books}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.books.setBooks(books);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Resets the existing data of this {@code Catalog} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData(ReadOnlyCatalog newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        setBooks(newData.getBookList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a book with the same serial number as {@code book} exists in the catalog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return checkIfSerialNumberExists(book.getSerialNumber());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a book to the catalog."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book must not already exist in the catalog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addBook(Book p) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        books.add(p);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code target} must exist in the catalog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the catalog."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(editedBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        books.setBook(target, editedBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean checkIfSerialNumberExists(SerialNumber sn) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return books.containsSerialNumber(sn);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Removes {@code key} from this {@code Catalog}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * {@code key} must exist in the catalog."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void removeBook(Book key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        books.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a list of loaned books from the current catalog."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an ObservableList of books that are loaned out."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getLoanedBooks() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e loanedBooks \u003d getBookList()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.isCurrentlyLoanedOut())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return FXCollections.observableArrayList(loanedBooks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a list of overdue books from the current catalog."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an ObservableList of books that are overdue."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getOverdueBooks() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e loanedBooks \u003d getBookList()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.isOverdue())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return FXCollections.observableArrayList(loanedBooks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a list of available books from the current catalog."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an ObservableList of books that are available."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getAvailableBooks() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e availableBooks \u003d getBookList()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e !book.isCurrentlyLoanedOut())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return FXCollections.observableArrayList(availableBooks);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book getBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return books.getBook(bookSn);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return books.asUnmodifiableObservableList().size() + \" books\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return books.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof Catalog // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 books.equals(((Catalog) other).books));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return books.hashCode();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 86,
      "seeziyang": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LoanRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Wraps all {@code Loan} data at the LoanRecords level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class LoanRecords implements ReadOnlyLoanRecords {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private HashMap\u003cLoanId, Loan\u003e loansMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Creates a LoanRecords using the Loans in the {@code toBeCopied}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public LoanRecords(ReadOnlyLoanRecords toBeCopied) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loansMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        toBeCopied.getLoanCollection().forEach(loan -\u003e loansMap.put(loan.getLoanId(), loan));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public LoanRecords() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loansMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Get all the Loan objects tracked by LoanRecords."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return All the Loans in a {@code Collection\u003cLoan\u003e}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Collection\u003cLoan\u003e getLoanCollection() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loansMap.values();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Get all the Loan objects tracked by LoanRecords."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return All the Loans in a {@code HashMap\u003cLoanId, Loan\u003e}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public HashMap\u003cLoanId, Loan\u003e getLoansMap() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loansMap;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Checks if the LoanRecords contains this {@code loan} object or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan Loan object to be checked."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if LoanRecords contains this {@code loan} object, false otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean hasLoan(Loan loan) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return hasLoan(loan.getLoanId());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Checks if the LoanRecords contains a {@code loan} object with this {@code loanId} or not."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanId Loan ID of loan object to be checked."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if LoanRecords contains a {@code loan} object with this {@code loanId}, false otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean hasLoan(LoanId loanId) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loansMap.containsKey(loanId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Add a {@code loan} object into the LoanRecords."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan Loan object to be added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loansMap.put(loan.getLoanId(), loan);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns the number of loans in {@code loansMap}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Used to find the next LoanId in LoanIdGenerator."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Precondition: Loans will never be deleted or removed from storage."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Number of loans in LoanRecords."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int getLoanCount() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loansMap.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || (other instanceof LoanRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 loansMap.equals(((LoanRecords) other).loansMap));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 68,
      "shiyao821": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns the user prefs\u0027 User settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    UserSettings getUserSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the user prefs\u0027 User settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    void setUserSettings(UserSettings userSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Catalog"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getCatalogFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the user prefs\u0027 catalog file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setCatalogFilePath(Path catalogFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /** Returns the Catalog */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    ReadOnlyCatalog getCatalog();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the user prefs\u0027 loan records file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void setCatalog(ReadOnlyCatalog catalog);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the catalog."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    boolean hasBook(Book book);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if a book with the same serial number as {@code bookSn} exists in the catalog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    boolean hasBook(SerialNumber bookSn);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the user prefs\u0027 catalog file path."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void deleteBook(Book target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void addBook(Book book);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Book getBook(SerialNumber bookSn);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void setBook(Book target, Book editedBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void resetFilteredBookList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void updateFilteredBookList(Predicate\u003cBook\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Model excludeBookBeingReplaced(Book toBeReplaced);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getOverdueBooks();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LoanRecords"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void setLoanRecordsFilePath(Path loanRecordsFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /** Returns the LoanRecords*/"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    ReadOnlyLoanRecords getLoanRecords();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void addLoan(Loan loan);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BorrowerRecords"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the user prefs\u0027 borrower records file path."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Sets the user prefs\u0027 address borrower records path."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void setBorrowerRecordsFilePath(Path borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /** Returns the BorrowerRecords*/"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    ReadOnlyBorrowerRecords getBorrowerRecords();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * If in serve mode, returns borrower that is being served."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Else, returns empty optional."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return Borrower that is being Served."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    Borrower getServingBorrower();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if Liberry is currently in Serve mode, false otherwise."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if Liberry is currently in Serve mode."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    boolean isServeMode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    boolean hasBorrower(Borrower borrower);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void registerBorrower(Borrower borrower);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void resetGenerator();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void setServingBorrower(BorrowerId borrowerId);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void setServingBorrower(Borrower borrower);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void servingBorrowerNewLoan(Loan newLoan);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    void servingBorrowerReturnLoan(Loan returnedLoan);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    boolean hasBorrowerId(BorrowerId borrowerId);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void exitsServeMode();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    List\u003cBook\u003e getBorrowerBooks();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 18,
      "hoholyin": 12,
      "Cronyxx": 6,
      "seeziyang": 28,
      "-": 65,
      "shiyao821": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerIdGenerator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.exceptions.NotInServeModeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanIdGenerator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Represents the in-memory model of the Library data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final LoanRecords loanRecords;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final Catalog catalog;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final BorrowerRecords borrowerRecords;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final FilteredList\u003cBook\u003e filteredBooks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Optional\u003cBorrower\u003e servingBorrower;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Initializes a ModelManager with the given catalog, loan records, borrower records and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * TODO change"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ModelManager(ReadOnlyCatalog catalog,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        ReadOnlyLoanRecords loanRecords,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        ReadOnlyBorrowerRecords borrowerRecords,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireAllNonNull(userPrefs, loanRecords, catalog, borrowerRecords);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        logger.fine(\"Initializing with catalog: \" + catalog + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // testing loan records"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loanRecords \u003d new LoanRecords(loanRecords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.setLoanRecords(this.loanRecords);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // testing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.catalog \u003d new Catalog(catalog);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog((Catalog) catalog);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // testing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.borrowerRecords \u003d new BorrowerRecords(borrowerRecords);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        filteredBooks \u003d new FilteredList\u003c\u003e(this.catalog.getBookList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.servingBorrower \u003d Optional.empty(); // TODO"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this(new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return userPrefs.getUserSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(userSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        userPrefs.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return userPrefs.getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setLoanRecordsFilePath(Path loanRecordsFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(loanRecordsFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        userPrefs.setLoanRecordsFilePath(loanRecordsFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return userPrefs.getCatalogFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setCatalogFilePath(Path catalogFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(catalogFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        userPrefs.setCatalogFilePath(catalogFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return userPrefs.getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setBorrowerRecordsFilePath(Path borrowerRecordsFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        userPrefs.setBorrowerRecordsFilePath(borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ReadOnlyLoanRecords getLoanRecords() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecords;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a \u003ccode\u003eLoan\u003c/code\u003e object to the loan records."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param loan \u003ccode\u003eLoan\u003c/code\u003e object to be added."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(loan);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loanRecords.addLoan(loan);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Catalog \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setCatalog(ReadOnlyCatalog catalog) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.catalog.resetData(catalog);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ReadOnlyCatalog getCatalog() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog.hasBook(book);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean hasBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(bookSn);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return catalog.checkIfSerialNumberExists(bookSn);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.removeBook(target);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(book);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book getBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return catalog.getBook(bookSn);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.setBook(target, editedBook);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a list of overdue books in the catalog."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an \u003ccode\u003eObservableList\u003c/code\u003e of overdue books."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getOverdueBooks() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog.getOverdueBooks();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return filteredBooks;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void resetFilteredBookList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        filteredBooks.setPredicate(x -\u003e true);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Model excludeBookBeingReplaced(Book toBeReplaced) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog tempCatalog \u003d new Catalog(this.getCatalog());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        tempCatalog.removeBook(toBeReplaced);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new ModelManager(tempCatalog, this.getLoanRecords(), this.getBorrowerRecords(), this.getUserPrefs());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BorrowerRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public ReadOnlyBorrowerRecords getBorrowerRecords() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecords;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower getServingBorrower() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return servingBorrower.get();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean isServeMode() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return servingBorrower.isPresent();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean hasBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerRecords.hasBorrower(borrower);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void registerBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerRecords.addBorrower(borrower);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 loanRecords.equals(other.loanRecords)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 catalog.equals(other.catalog)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 borrowerRecords.equals(other.borrowerRecords);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void resetGenerator() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(borrowerRecords);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void setServingBorrower(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.servingBorrower \u003d Optional.of(borrowerRecords.getBorrowerFromId(borrowerId));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setServingBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.servingBorrower \u003d Optional.of(borrower);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerNewLoan(Loan newLoan) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower serving \u003d servingBorrower.get();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanAddedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getBorrowerId(), serving.getAddedCurrentLoanList(newLoan), serving.getReturnedLoanList());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.setBorrower(serving, loanAddedBorrower);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        setServingBorrower(loanAddedBorrower);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerReturnLoan(Loan returnedLoan) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower serving \u003d servingBorrower.get();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assert serving.hasCurrentLoan(returnedLoan) : \"Borrower does not have the loan to be returned.\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanReturnedBorrower \u003d new Borrower(serving.getName(), serving.getPhone(), serving.getEmail(),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getBorrowerId(), serving.getRemovedCurrentLoanList(returnedLoan),"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                serving.getAddedReturnedLoanList(returnedLoan));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.setBorrower(serving, loanReturnedBorrower);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        setServingBorrower(loanReturnedBorrower);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean hasBorrowerId(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerRecords.checkIfBorrowerIdExists(borrowerId);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void exitsServeMode() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.servingBorrower \u003d Optional.empty();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public List\u003cBook\u003e getBorrowerBooks() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!isServeMode()) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new NotInServeModeException();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ArrayList\u003cLoan\u003e loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        servingBorrower.get()"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .getCurrentLoanList()"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .forEach(loan -\u003e loans.add(loan));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return loans.stream()"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .map(loan -\u003e loan.getBookSerialNumber())"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .map(sn -\u003e catalog.getBook(sn))"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 49,
      "hoholyin": 58,
      "seeziyang": 63,
      "Cronyxx": 13,
      "-": 115,
      "shiyao821": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBorrowerRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface ReadOnlyBorrowerRecords {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    ObservableList\u003cBorrower\u003e getBorrowerList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 2,
      "shiyao821": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCatalog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public interface ReadOnlyCatalog {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    ObservableList\u003cBook\u003e getBookList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLoanRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface ReadOnlyLoanRecords {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Collection\u003cLoan\u003e getLoanCollection();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    HashMap\u003cLoanId, Loan\u003e getLoansMap();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "seeziyang": 7,
      "shiyao821": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    UserSettings getUserSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Path getCatalogFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "Cronyxx": 3,
      "-": 16,
      "shiyao821": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private UserSettings userSettings \u003d new UserSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Path loanRecordsFilePath \u003d Paths.get(\"data\", \"loanrecords.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Path catalogFilePath \u003d Paths.get(\"data\", \"catalog.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Path borrowerRecordsFilePath \u003d Paths.get(\"data\", \"borrowerrecords.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        setUserSettings(newUserPrefs.getUserSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        setLoanRecordsFilePath(newUserPrefs.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        setCatalogFilePath(newUserPrefs.getCatalogFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        setBorrowerRecordsFilePath(newUserPrefs.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return userSettings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(userSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.userSettings \u003d userSettings;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecordsFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setLoanRecordsFilePath(Path loanRecordsFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(loanRecordsFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loanRecordsFilePath \u003d loanRecordsFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return catalogFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setCatalogFilePath(Path catalogFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(catalogFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.catalogFilePath \u003d catalogFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecordsFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void setBorrowerRecordsFilePath(Path borrowerRecordsFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.borrowerRecordsFilePath \u003d borrowerRecordsFilePath;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 userSettings.equals(o.userSettings)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 loanRecordsFilePath.equals(o.loanRecordsFilePath)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 catalogFilePath.equals(o.catalogFilePath)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 borrowerRecordsFilePath.equals(o.borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Objects.hash(guiSettings, userSettings, catalogFilePath, loanRecordsFilePath, borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        sb.append(\"\\nUser Settings : \" + userSettings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        sb.append(\"\\nLocal LoanRecords data file location : \" + loanRecordsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        sb.append(\"\\nLocal Catalog data file location : \" + catalogFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        sb.append(\"\\nLocal BorrowerRecords data file location : \" + borrowerRecordsFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "Cronyxx": 14,
      "-": 77,
      "shiyao821": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Author.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Author {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Author\u0027s name must start with an alphanumeric letter,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\p{Punct} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructs an {@code Author}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param author an Author\u0027s name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Author(String author) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidAuthor(author), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        value \u003d author;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static boolean isValidAuthor(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof Author // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 value.equals(((Author) other).value)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 39,
      "shiyao821": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Book.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Book in the Catalog."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Book {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final SerialNumber serialNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Set\u003cGenre\u003e genres \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Optional\u003cLoan\u003e loan;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructor when loading the file from history or when loading sample data/tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Book(Title title, SerialNumber serialNumber, Author author, Loan loan, Set\u003cGenre\u003e genres) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireAllNonNull(title, serialNumber, author, genres);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.loan \u003d Optional.ofNullable(loan);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.genres.addAll(genres);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public SerialNumber getSerialNumber() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns an immutable genre set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Set\u003cGenre\u003e getGenres() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Collections.unmodifiableSet(genres);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns an optional of Loan object. If book is not loaned, Optional will be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Optional of Loan object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Optional\u003cLoan\u003e getLoan() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return loan;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if book is currently on loan."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if book is currently on loan."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isCurrentlyLoanedOut() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this.loan.isPresent();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Check if a book is currently overdue."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if book is on loan and overdue."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (this.loan.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            //a book without loan cannot be overdue"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return this.loan.get().getDueDate().compareTo(DateUtil.getTodayDate()) \u003c 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Checks if a book is same, regardless of serial number."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param b Book to be checked against"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return true if both books are the same, even if they are different copies"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean isSameBook(Object b) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (b \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!(b instanceof Book)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book otherBook \u003d (Book) b;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //same book different copy"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return otherBook.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getGenres().equals(getGenres());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if both books have the same identity and data fields."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * This defines a stronger notion of equality between two books."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!(other instanceof Book)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book otherBook \u003d (Book) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //strictly same book, ignoring loan"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return otherBook.getSerialNumber().equals(getSerialNumber())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 otherBook.getGenres().equals(getGenres());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Objects.hash(title, serialNumber, author, genres);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(\" Serial Number: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(getSerialNumber())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(\" Author: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(getAuthor());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!getGenres().isEmpty()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            builder.append(\" Genres: \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            getGenres().forEach(genre -\u003e builder.append(genre + \" \"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.model.book.Author.isValidAuthor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.model.book.SerialNumber.isValidSerialNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.model.book.Title.isValidTitle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.model.genre.Genre.isValidGenreName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Tests that a {@code Book} matches all of the conditions given."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Increases performance by returning whenever a condition is not met"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class BookPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String author;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private String serialNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Set\u003cGenre\u003e genres;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.author \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.serialNumber \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genres \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return title !\u003d null || author !\u003d null || serialNumber !\u003d null || genres !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (title !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 !Arrays.stream(title.split(\" \"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getTitle().value, keyword))) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (author !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 !Arrays.stream(author.split(\" \"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getAuthor().value, keyword))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (serialNumber !\u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 !Stream.of(serialNumber)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getSerialNumber().value, keyword))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (genres !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 !genres.stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .allMatch(keyword -\u003e book.getGenres().contains(keyword))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add a title predicate to the book predicate"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setTitle(String title) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidTitle(title), Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add an author predicate to the book predicate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setAuthor(String author) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidAuthor(author), Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add a serial number predicate to the book predicate"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param serialNumber"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidSerialNumber(serialNumber), SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add genre predicates to the book predicate"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param genres in the form of varargs"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setGenres(String... genres) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (String genre : genres) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            String formattedGenre \u003d genre.trim().toUpperCase();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            checkArgument(isValidGenreName(formattedGenre), Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genres \u003d SampleDataUtil.getGenreSet(genres);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * add genre predicate to the book predicate"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param genres in the form of Collections.Set"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public BookPredicate setGenres(Set\u003cGenre\u003e genres) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (genres.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genres \u003d genres;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                || (other instanceof BookPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (title \u003d\u003d null || title.equals(((BookPredicate) other).title)) // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (author \u003d\u003d null || author.equals(((BookPredicate) other).author)) // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (serialNumber \u003d\u003d null || serialNumber.equals(((BookPredicate) other).serialNumber)) // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 (genres \u003d\u003d null || genres.equals(((BookPredicate) other).genres))); // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shiyao821": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/SerialNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Book\u0027s serial number in the catalog."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSerialNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class SerialNumber implements Comparable\u003cSerialNumber\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            \"Serial numbers should start with prefix \\\"B\\\", followed by 5 digits. They should be unique.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"B\\\\d{5}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructs a {@code SerialNumber}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param serialNumber A valid serial number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public SerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        checkArgument(isValidSerialNumber(serialNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        value \u003d serialNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a given string is a valid serial number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static boolean isValidSerialNumber(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Converts a serial number to an integer (for comparing)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return an integer represented by the given serial number."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int serialNumberToInt() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assert this.value.length() \u003e 0 : \"Invalid serial number\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Integer.parseInt(this.toString().substring(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof SerialNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 value.equals(((SerialNumber) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public int compareTo(SerialNumber b) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Integer.compare(this.serialNumberToInt(), b.serialNumberToInt());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 31,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/SerialNumberGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Serial Number generator when user does not input a preferred serial number."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class SerialNumberGenerator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final int SERIAL_NUMBER_LENGTH \u003d 5; //excluding prefix \u0027B\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String PREFIX \u003d \"B\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String FIRST_SERIAL_NUMBER \u003d PREFIX + \"00001\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static TreeSet\u003cSerialNumber\u003e serialNumberTree \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Populates the serial number tree from a catalog."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param catalog catalog to retrieve books from."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void setCatalog(Catalog catalog) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        serialNumberTree \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.getBookList()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .forEach(book -\u003e serialNumberTree.add(book.getSerialNumber()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Generates a new serial number based on the current serial number index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static SerialNumber generateSerialNumber() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (serialNumberTree.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            SerialNumber serialNumber \u003d new SerialNumber(FIRST_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            serialNumberTree.add(serialNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return serialNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        int key \u003d serialNumberTree.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber keyCompare \u003d constructSerialNumberFromInt(key);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber floorKey \u003d serialNumberTree.floor(keyCompare);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber newSerialNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (floorKey \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            newSerialNumber \u003d new SerialNumber(FIRST_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            int newIndex \u003d floorKey.serialNumberToInt() + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            newSerialNumber \u003d constructSerialNumberFromInt(newIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        serialNumberTree.add(newSerialNumber);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return newSerialNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static SerialNumber constructSerialNumberFromInt(int k) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new SerialNumber(PREFIX + getPadding(k) + k);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static String getPadding(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String stringRepresentation \u003d Integer.toString(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        int paddingLength \u003d SERIAL_NUMBER_LENGTH - stringRepresentation.length();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return IntStream.rangeClosed(1, paddingLength)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .mapToObj(x -\u003e \"0\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .reduce(\"\", (a, b) -\u003e a + b);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 62,
      "seeziyang": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            \"Titles should start with alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\p{Punct} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 14,
      "-": 39,
      "shiyao821": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/UniqueBookList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A list of books that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A book is considered unique by comparing using {@code Book#equals(Book)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * books uses Book#equals(Book) for equality so as to ensure that the book being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * unique in terms of identity in the UniqueBookList. However, the removal of a book uses Book#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * as to ensure that the book with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class UniqueBookList implements Iterable\u003cBook\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final HashMap\u003cSerialNumber, Book\u003e booksMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean contains(Book toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if the list contains a book with the same serial number as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public boolean containsSerialNumber(SerialNumber toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return booksMap.containsKey(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a book to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void add(Book toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.put(toAdd.getSerialNumber(), toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book getBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return booksMap.get(bookSn);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Replaces the book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!target.equals(editedBook) \u0026\u0026 contains(editedBook)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        internalList.set(index, editedBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.remove(target.getSerialNumber());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.put(editedBook.getSerialNumber(), editedBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Removes the equivalent book from the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * The book must exist in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void remove(Book toRemove) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.remove(toRemove.getSerialNumber());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks(UniqueBookList replacement) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        replacement.forEach(book -\u003e booksMap.put(book.getSerialNumber(), book));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        requireAllNonNull(books);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!booksAreUnique(books)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        internalList.setAll(books);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        booksMap.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        books.forEach(book -\u003e booksMap.put(book.getSerialNumber(), book));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public ObservableList\u003cBook\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Iterator\u003cBook\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof UniqueBookList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookList) other).internalList)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                        \u0026\u0026 booksMap.equals(((UniqueBookList) other).booksMap));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if {@code books} contains only unique books."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private boolean booksAreUnique(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size() - 1; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c books.size(); j++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                if (books.get(i).equals(books.get(j))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 53,
      "seeziyang": 16,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/BookNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BookNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "seeziyang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/DuplicateBookException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the operation will result in duplicate Books (Books are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * identity fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class DuplicateBookException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public DuplicateBookException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        super(\"Operation would result in duplicate books\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 9,
      "seeziyang": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/Borrower.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Represents a Borrower."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class Borrower {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final BorrowerId borrowerId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LoanList currentLoanList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LoanList returnedLoanList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower(Name name, Phone phone, Email email) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this(name, phone, email, BorrowerIdGenerator.generateBorrowerId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * only for test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param name name of borrower"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param phone phone of borrower"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param email email of borrower"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * @param borrowerId is manually input for testing purpose."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower(Name name, Phone phone, Email email, BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this(name, phone, email, borrowerId, new LoanList(), new LoanList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Borrower(Name name, Phone phone, Email email, BorrowerId borrowerId,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanList currentLoanList, LoanList returnedLoanList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.currentLoanList \u003d currentLoanList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.returnedLoanList \u003d returnedLoanList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerId getBorrowerId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getCurrentLoanList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getReturnedLoanList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return returnedLoanList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a new Loan object to a new copy of the currentLoanList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param newLoan New {@code Loan} object to be added to currentLoanList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of currentLoanList with new Loan object added in to it."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getAddedCurrentLoanList(Loan newLoan) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList.addToNewCopy(newLoan);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Removes a Loan object from a new copy of the currentLoanList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param returnedLoan {@code Loan} object to be removed from the currentLoanList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of the currentLoanList with the returned Loan object removed from it."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getRemovedCurrentLoanList(Loan returnedLoan) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList.removeFromNewCopy(returnedLoan);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a returned Loan object to a new copy of the returnedLoanList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param returnedLoan {@code Loan} object to be added to returnedLoanList."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new copy of currentLoanList with returned Loan object added in to it."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList getAddedReturnedLoanList(Loan returnedLoan) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return returnedLoanList.addToNewCopy(returnedLoan);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if Borrower currently loans a Book represented by the given Loan object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean hasCurrentLoan(Loan loan) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return currentLoanList.contains(loan);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Returns true if both borrowers have the same borrower_id."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean isSameBorrower(Borrower otherBorrower) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (otherBorrower \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return otherBorrower !\u003d null"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 otherBorrower.getBorrowerId().equals(getBorrowerId());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!(other instanceof Borrower)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower otherBorrower \u003d (Borrower) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return otherBorrower.getName().equals(getName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 otherBorrower.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 otherBorrower.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 otherBorrower.getBorrowerId().equals(getBorrowerId());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return Objects.hash(name, phone, email, borrowerId);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(\" Borrower Id: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .append(getBorrowerId());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 82,
      "seeziyang": 65,
      "shiyao821": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/BorrowerId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Represents a Borrower\u0027s ID in borrowers records"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class BorrowerId {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Borrower\u0027s ID should start with prefix \\\"K\\\", \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            + \"followed by 4 digits. They should be unique.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"K\\\\d{4}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerId(String borrowerId) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        requireNonNull(borrowerId);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        checkArgument(isValidBorrowerId(borrowerId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        value \u003d borrowerId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static boolean isValidBorrowerId(String borrowerId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowerId.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                || (other instanceof BorrowerId // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 value.equals(((BorrowerId) other).value)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 22,
      "hoholyin": 1,
      "seeziyang": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/BorrowerIdGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Borrower ID generator that generates a borrower ID when a new borrower is registered."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerIdGenerator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final int BORROWER_ID_LENGTH \u003d 4; //excluding prefix \u0027K\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String PREFIX \u003d \"K\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static int currentBorrowerIdIndex \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static BorrowerRecords borrowers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static void setBorrowers(BorrowerRecords borrowers) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.borrowers \u003d borrowers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        currentBorrowerIdIndex \u003d borrowers.getSize();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Generates a new borrower ID based on the current borrower ID index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static BorrowerId generateBorrowerId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        currentBorrowerIdIndex++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        int paddingLength \u003d getPaddingLength();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String padding \u003d getPadding(paddingLength);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId id \u003d new BorrowerId(PREFIX + padding + currentBorrowerIdIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        /*while (borrowers.checkIfBorrowerIdExists(id)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            currentBorrowerIdIndex++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            id \u003d new BorrowerId(PREFIX + padding + currentBorrowerIdIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new BorrowerId(PREFIX + padding + currentBorrowerIdIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Checks if a certain borrower ID is already in the borrowers record."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static boolean borrowerIdExists(BorrowerId id) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return borrowers.checkIfBorrowerIdExists(id);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static int getPaddingLength() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String stringRepresentation \u003d Integer.toString(currentBorrowerIdIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return BORROWER_ID_LENGTH - stringRepresentation.length();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static String getPadding(int paddingLength) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return IntStream.rangeClosed(1, paddingLength)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .mapToObj(x -\u003e \"0\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .reduce(\"\", (a, b) -\u003e a + b);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 53,
      "seeziyang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Represents a Borrower\u0027s email in the Borrowers Record."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * Represents a Borrower\u0027s name in the Borrowers Record."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 8,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/exceptions/BorrowerNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the operation is unable to find the specified borrower."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class BorrowerNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/borrower/exceptions/DuplicateBorrowerException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the operation will result in duplicate Borrowers (Borrowers are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class DuplicateBorrowerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public DuplicateBorrowerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        super(\"Operation would result in duplicate borrowers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/NotInServeModeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Signals that the Serve mode operation that is supposed to be carried out cannot be carried out"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * as the model is not in Serve mode."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class NotInServeModeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public NotInServeModeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        super(\"Not in Serve mode!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/genre/Genre.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.genre;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Genre in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidGenreName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class Genre {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Genre names should be alphanumeric, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            + \"UPPERCASE \u0026 hyphenated if needed\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[[A-Z]\\\\d][\\\\-[A-Z]\\\\d]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public final String genreName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Constructs a {@code Genre}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param genreName A valid genre name - will be converted to uppercase"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Genre(String genreName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(genreName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String uppercaseGenreName \u003d genreName.toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        checkArgument(isValidGenreName(uppercaseGenreName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genreName \u003d uppercaseGenreName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns true if a given string is a valid genre name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static boolean isValidGenreName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                || (other instanceof Genre // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                \u0026\u0026 genreName.equals(((Genre) other).genreName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return genreName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return \u0027[\u0027 + genreName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 6,
      "-": 35,
      "shiyao821": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/loan/Loan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Represents a Loan."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class Loan {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LoanId loanId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final SerialNumber bookSerialNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final BorrowerId borrowerId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final LocalDate dueDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // returnDate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // isReturned method"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan(LoanId loanId, SerialNumber bookSerialNumber, BorrowerId borrowerId,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                LocalDate startDate, LocalDate dueDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireAllNonNull(loanId, bookSerialNumber, borrowerId, startDate, dueDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loanId \u003d loanId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.bookSerialNumber \u003d bookSerialNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanId getLoanId() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public SerialNumber getBookSerialNumber() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return bookSerialNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerId getBorrowerId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return borrowerId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LocalDate getDueDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(other instanceof Loan)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan otherLoan \u003d (Loan) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return otherLoan.getLoanId().equals(loanId)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getBookSerialNumber().equals(bookSerialNumber)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getBorrowerId().equals(borrowerId)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getStartDate().equals(startDate)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 otherLoan.getDueDate().equals(dueDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return Objects.hash(loanId, bookSerialNumber, borrowerId, startDate, dueDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        builder.append(\"Loan ID: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(loanId)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\" Book Serial Number: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(bookSerialNumber)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\" Borrower ID: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(borrowerId)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\" Loaned from \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(startDate)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(\" to \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .append(dueDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "seeziyang": 76,
      "shiyao821": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/loan/LoanId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Represents a loan\u0027s ID in LoanRecords."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@Link #isValidLoanId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            \"Loan ID should start with prefix \\\"L\\\", followed by 6 digits. They should be unique.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String PREFIX \u003d \"L\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d PREFIX + \"\\\\d{6}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructs a {@code LoanId}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanId A valid string of loan ID."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanId(String loanId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        requireNonNull(loanId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        checkArgument(isValidLoanId(loanId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        value \u003d loanId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns true if the given string is a valid loan ID."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param test String to be tested."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return True if {@code test} is a valid loan ID."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static boolean isValidLoanId(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                || (other instanceof LoanId // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                \u0026\u0026 value.equals(((LoanId) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/loan/LoanIdGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Loan ID generator that generates a {@code LoanId} when a new {@code Loan} is created."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanIdGenerator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final int LOAN_ID_LENGTH \u003d 6; // excluding prefix \u0027L\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String PREFIX \u003d LoanId.PREFIX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String LOAN_ID_FORMATTER \u003d PREFIX + \"%0\" + LOAN_ID_LENGTH + \"d\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static LoanRecords loanRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static void setLoanRecords(LoanRecords loanRecords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.loanRecords \u003d loanRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Generates a loan ID based on the current loan ID index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A unused {@code LoanId}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LoanId generateLoanId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        int nextLoanIdDigits \u003d (loanRecords \u003d\u003d null ? 0 : loanRecords.getLoanCount()) + 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanId(String.format(LOAN_ID_FORMATTER, nextLoanIdDigits));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/loan/LoanList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// TODO add more methods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// will implement remove, etc when i implement my return command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * A list of {@code Loan} objects that represents the loans a borrower currently has."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanList implements Iterable\u003cLoan\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private ArrayList\u003cLoan\u003e loanList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanList(ArrayList\u003cLoan\u003e newList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loanList \u003d newList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a {@code Loan} object into the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan {@code Loan} object to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void add(Loan loan) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList.add(loan);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a {@code Loan} object into a copy of list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan {@code Loan} object to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new LoanList with the Loan object added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList addToNewCopy(Loan loan) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArrayList\u003cLoan\u003e newList \u003d new ArrayList\u003c\u003e(this.loanList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newList.add(loan);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanList(newList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns the number of {@code Loan} objects in the {@code LoanList}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanList.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean contains(Loan loan) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanList.contains(loan);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Removes a {@code Loan} object from a copy of the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loan {@code Loan} object to be removed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return A new LoanList with the Loan object removed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanList removeFromNewCopy(Loan loan) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ArrayList\u003cLoan\u003e newList \u003d new ArrayList\u003c\u003e(this.loanList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newList.remove(loan);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new LoanList(newList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Iterator\u003cLoan\u003e iterator() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanList.iterator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!(o instanceof LoanList)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList otherLoanList \u003d (LoanList) o;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this.loanList.equals(otherLoanList.loanList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/usersettings/FineIncrement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Represents the default fine amount in cents of a overdue book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFineIncrement(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class FineIncrement {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \"Fine increment should be positive and should not exceed Integer.MAX_VALUE cents.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public final int fineIncrement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code FineIncrement}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param fineIncrement A valid fine increment in String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public FineIncrement(String fineIncrement) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(fineIncrement);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        checkArgument(isValidFineIncrement(fineIncrement), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.fineIncrement \u003d Integer.parseInt(fineIncrement);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code FineIncrement}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param fineIncrement A valid fine increment in integer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public FineIncrement(int fineIncrement) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.fineIncrement \u003d fineIncrement;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getFineIncrement() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return fineIncrement;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns true if a given string is a valid fine amount."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static boolean isValidFineIncrement(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return String.format(\"%d\", fineIncrement);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                || (other instanceof FineIncrement // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 fineIncrement \u003d\u003d (((FineIncrement) other).fineIncrement)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Integer.hashCode(fineIncrement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/usersettings/LoanPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Represents the default loan period of a book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLoanPeriod(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class LoanPeriod {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \"Loan period should be positive and should not exceed Integer.MAX_VALUE days.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public final int loanPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code LoanPeriod}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanPeriod A valid loan period in String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public LoanPeriod(String loanPeriod) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(loanPeriod);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        checkArgument(isValidLoanPeriod(loanPeriod), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanPeriod \u003d Integer.parseInt(loanPeriod);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code LoanPeriod}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param loanPeriod A valid loan period in integer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public LoanPeriod(int loanPeriod) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanPeriod \u003d loanPeriod;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getLoanPeriod() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return loanPeriod;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns true if a given string is a valid loan period."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static boolean isValidLoanPeriod(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return String.format(\"%d\", loanPeriod);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                || (other instanceof LoanPeriod // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 loanPeriod \u003d\u003d (((LoanPeriod) other).loanPeriod)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Integer.hashCode(loanPeriod);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/usersettings/RenewPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Represents the default renew period of a book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRenewPeriod(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class RenewPeriod {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \"Renew period should be positive and should not exceed Integer.MAX_VALUE days.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public final int renewPeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code RenewPeriod}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param renewPeriod A valid renew period in String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public RenewPeriod(String renewPeriod) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        requireNonNull(renewPeriod);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        checkArgument(isValidRenewPeriod(renewPeriod), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.renewPeriod \u003d Integer.parseInt(renewPeriod);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Constructs a {@code RenewPeriod}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @param renewPeriod A valid renew period in integer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public RenewPeriod(int renewPeriod) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.renewPeriod \u003d renewPeriod;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int getRenewPeriod() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return renewPeriod;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns true if a given string is a valid renew period."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static boolean isValidRenewPeriod(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return String.format(\"%d\", renewPeriod);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                || (other instanceof RenewPeriod // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u0026\u0026 renewPeriod \u003d\u003d (((RenewPeriod) other).renewPeriod)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return Integer.hashCode(renewPeriod);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Book[] getSampleBooks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new Book(new Title(\"Harry Botter\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"J K Rowling\"), null, getGenreSet(\"FICTION\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new Book(new Title(\"Legend of the Condor Heroes\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Jin Yong\"), null, getGenreSet(\"FICTION\", \"HISTORY\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new Book(new Title(\"Animal the Farm\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"George Orwell\"), null, getGenreSet(\"FICTION\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new Book(new Title(\"Harry Botter and the Full Blood Prince\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"J K Rowling\"), null, getGenreSet(\"FICTION\", \"ACTION\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"Man\u0027s Search for Munning\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Viktor Frankel\"), null, getGenreSet(\"NON-FICTION\", \"BIOGRAPHY\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"Stefe Jobz\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Walter Izakson\"), null, getGenreSet(\"NON-FICTION\", \"BIOGRAPHY\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"Behaves\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Robert Sapoloksy\"), null, getGenreSet(\"NON-FICTION\", \"POPULAR-SCIENCE\", \"PSYCHOLOGY\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"A Brief History of Space\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Stephen Birding\"), null, getGenreSet(\"NON-FICTION\", \"POPULAR-SCIENCE\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new Book(new Title(\"Painting with Bobby Ross\"), SerialNumberGenerator.generateSerialNumber(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    new Author(\"Bobby Ross\"), null, getGenreSet(\"NON-FICTION\", \"ART\", \"HOW-TO\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static ReadOnlyCatalog getSampleCatalog() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog sampleAb \u003d new Catalog();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Arrays.stream(getSampleBooks()).forEach(book -\u003e sampleAb.addBook(book));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns a genre set containing the list of strings given,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * after formatting the strings to UPPERCASE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static Set\u003cGenre\u003e getGenreSet(String... strings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .map(genreName -\u003e genreName.trim().toUpperCase())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .map(Genre::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // Technically not needed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static ReadOnlyLoanRecords getSampleLoanRecords() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecords;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static ReadOnlyBorrowerRecords getSampleBorrowerRecords() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecords;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 11,
      "seeziyang": 2,
      "-": 24,
      "shiyao821": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.BorrowerRecordsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.CatalogStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.LoanRecordsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface Storage extends UserPrefsStorage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecordsStorage, CatalogStorage, BorrowerRecordsStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // UserPrefStorage methods"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // LoanRecordsStorage methods"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveLoanRecords(ReadOnlyLoanRecords loanRecords) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void storeNewLoanSlip() throws LoanSlipException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void openNewLoanSlip() throws LoanSlipException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // CatalogStorage methods"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    Path getCatalogFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyCatalog\u003e readCatalog(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveCatalog(ReadOnlyCatalog catalog) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // BorrowerRecordsStorage methods"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords) throws IOException;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 7,
      "seeziyang": 5,
      "-": 29,
      "shiyao821": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.util.LoanSlipUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.BorrowerRecordsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.CatalogStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.LoanRecordsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private LoanRecordsStorage loanRecordsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private CatalogStorage catalogStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private BorrowerRecordsStorage borrowerRecordsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                          LoanRecordsStorage loanRecordsStorage, CatalogStorage catalogStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                          BorrowerRecordsStorage borrowerRecordsStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loanRecordsStorage \u003d loanRecordsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.catalogStorage \u003d catalogStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.borrowerRecordsStorage \u003d borrowerRecordsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan Records methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecordsStorage.getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return readLoanRecords(loanRecordsStorage.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecordsStorage.readLoanRecords(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveLoanRecords(ReadOnlyLoanRecords loanRecords) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveLoanRecords(loanRecords, loanRecordsStorage.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveLoanRecords(ReadOnlyLoanRecords loanRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        loanRecordsStorage.saveLoanRecords(loanRecords, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void storeNewLoanSlip() throws LoanSlipException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.createLoanSlipInDirectory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void openNewLoanSlip() throws LoanSlipException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.openLoanSlip();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Catalog methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalogStorage.getCatalogFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyCatalog\u003e readCatalog(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return readCatalog(catalogStorage.getCatalogFilePath(), initialLoanRecords);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyCatalog\u003e readCatalog(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return catalogStorage.readCatalog(filePath, initialLoanRecords);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveCatalog(ReadOnlyCatalog catalog) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveCatalog(catalog, catalogStorage.getCatalogFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveCatalog(ReadOnlyCatalog catalog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        catalogStorage.saveCatalog(catalog, filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BorrowerRecords methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecordsStorage.getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return readBorrowerRecords(borrowerRecordsStorage.getBorrowerRecordsFilePath(), initialLoanRecords);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return borrowerRecordsStorage.readBorrowerRecords(filePath, initialLoanRecords);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords) throws IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveBorrowerRecords(borrowerRecords, borrowerRecordsStorage.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        borrowerRecordsStorage.saveBorrowerRecords(borrowerRecords, filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 11,
      "seeziyang": 11,
      "-": 68,
      "shiyao821": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/borrowerrecords/BorrowerRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.borrowerrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Represents a storage for {@link BorrowerRecords}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface BorrowerRecordsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getBorrowerRecordsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns BorrowerRecords data as a {@link ReadOnlyBorrowerRecords}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #getBorrowerRecordsFilePath()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Saves the given {@link ReadOnlyBorrowerRecords} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param borrowerRecords cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #saveBorrowerRecords(ReadOnlyBorrowerRecords)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 5,
      "shiyao821": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/borrowerrecords/JsonAdaptedBorrower.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.borrowerrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LOAN_ID_DOES_NOT_EXISTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Jackson-friendly version of {@link Borrower}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "class JsonAdaptedBorrower {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Borrower\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private final String borrowerId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final List\u003cString\u003e currentLoanList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final List\u003cString\u003e returnedLoanList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Constructs a {@code JsonAdaptedBorrower} with the given borrower detail."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public JsonAdaptedBorrower(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"borrowerId\") String borrowerId,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"currentLoanList\") List\u003cString\u003e currentLoanList,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                               @JsonProperty(\"returnedLoanList\") List\u003cString\u003e returnedLoanList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.currentLoanList.addAll(currentLoanList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.returnedLoanList.addAll(returnedLoanList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts a given {@code Borrower} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonAdaptedBorrower(Borrower source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerId \u003d source.getBorrowerId().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        source.getCurrentLoanList().forEach(loan -\u003e currentLoanList.add(loan.getLoanId().toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        source.getReturnedLoanList().forEach(loan -\u003e returnedLoanList.add(loan.getLoanId().toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Borrower} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Borrower toModelType(ReadOnlyLoanRecords initialLoanRecords) throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (borrowerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                    BorrowerId.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        if (!BorrowerId.isValidBorrowerId(borrowerId)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        final BorrowerId modelBorrowerId \u003d new BorrowerId(borrowerId);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (currentLoanList \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanList.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LoanList modelCurrentLoanList \u003d getModelLoanList(currentLoanList, initialLoanRecords);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (returnedLoanList \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanList.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LoanList modelReturnedLoanList \u003d getModelLoanList(returnedLoanList, initialLoanRecords);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Borrower(modelName, modelPhone, modelEmail, modelBorrowerId,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                modelCurrentLoanList, modelReturnedLoanList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanList getModelLoanList(List\u003cString\u003e loanList, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList modelLoanList \u003d new LoanList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        for (String loanIdString : loanList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            if (!LoanId.isValidLoanId(loanIdString)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                throw new IllegalValueException(LoanId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            LoanId loanId \u003d new LoanId(loanIdString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Loan modelLoan \u003d initialLoanRecords.getLoansMap().get(loanId);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            if (modelLoan \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                throw new IllegalValueException(String.format(MESSAGE_LOAN_ID_DOES_NOT_EXISTS, loanId));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelLoanList.add(modelLoan);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return modelLoanList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 27,
      "seeziyang": 57,
      "shiyao821": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/borrowerrecords/JsonBorrowerRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.borrowerrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * A class to access BorrowerRecords data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonBorrowerRecordsStorage implements BorrowerRecordsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBorrowerRecordsStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonBorrowerRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return readBorrowerRecords(filePath, initialLoanRecords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Similar to {@link #readBorrowerRecords(ReadOnlyLoanRecords)}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyBorrowerRecords\u003e readBorrowerRecords(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cJsonSerializableBorrowerRecords\u003e jsonBorrowerRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                filePath, JsonSerializableBorrowerRecords.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!jsonBorrowerRecords.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return Optional.of(jsonBorrowerRecords.get().toModelType(initialLoanRecords));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveBorrowerRecords(borrowerRecords, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Similar to {@link #saveBorrowerRecords(ReadOnlyBorrowerRecords)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveBorrowerRecords(ReadOnlyBorrowerRecords borrowerRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(borrowerRecords);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBorrowerRecords(borrowerRecords), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 8,
      "shiyao821": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/borrowerrecords/JsonSerializableBorrowerRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.borrowerrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * An Immutable BorrowerRecords that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@JsonRootName(value \u003d \"BorrowerRecords\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "class JsonSerializableBorrowerRecords {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BORROWER \u003d \"borrowers list contains duplicate borrower(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final List\u003cJsonAdaptedBorrower\u003e borrowers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Constructs a {@code JsonSerializableBorrowerRecords} with the given borrowers."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableBorrowerRecords(@JsonProperty(\"borrowers\") List\u003cJsonAdaptedBorrower\u003e borrowers) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.borrowers.addAll(borrowers);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts a given {@code ReadOnlyBorrowerRecords} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBorrowerRecords}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableBorrowerRecords(ReadOnlyBorrowerRecords source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        borrowers.addAll(source.getBorrowerList().stream().map(JsonAdaptedBorrower::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts this address borrower into the model\u0027s {@code BorrowerRecords} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerRecords toModelType(ReadOnlyLoanRecords initialLoanRecords) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (JsonAdaptedBorrower jsonAdaptedBorrower : borrowers) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Borrower borrower \u003d jsonAdaptedBorrower.toModelType(initialLoanRecords);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (borrowerRecords.hasBorrower(borrower)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BORROWER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            borrowerRecords.addBorrower(borrower);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return borrowerRecords;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 3,
      "shiyao821": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/CatalogStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Represents a storage for {@link Catalog}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface CatalogStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getCatalogFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns Catalog data as a {@link ReadOnlyCatalog}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param initialLoanRecords Initial {@code ReadOnlyLoanRecords} loaded when ModelManage is initialized."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyCatalog\u003e readCatalog(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #getCatalogFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    Optional\u003cReadOnlyCatalog\u003e readCatalog(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Saves the given {@link ReadOnlyCatalog} to the storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param catalog cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveCatalog(ReadOnlyCatalog catalog) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #saveCatalog(ReadOnlyCatalog)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveCatalog(ReadOnlyCatalog catalog, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 7,
      "shiyao821": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/JsonAdaptedBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LOAN_ID_DOES_NOT_EXISTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Jackson-friendly version of {@link Book}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonAdaptedBook {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final String serialNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final String author;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final String loan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e genres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructs a {@code JsonAdaptedBook} with the given person details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public JsonAdaptedBook(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"serialNumber\") String serialNumber,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                           @JsonProperty(\"author\") String author,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                           @JsonProperty(\"loan\") String loan,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                           @JsonProperty(\"genres\") List\u003cJsonAdaptedTag\u003e genres) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (genres !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            this.genres.addAll(genres);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.loan \u003d loan;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonAdaptedBook(Book source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        serialNumber \u003d source.getSerialNumber().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        author \u003d source.getAuthor().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (source.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            loan \u003d source.getLoan().get().getLoanId().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            loan \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        genres.addAll(source.getGenres().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Uses an empty LoanRecords."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return toModelType(new LoanRecords());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Loan objects of the Book is taken from the initialLoanRecords."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Book toModelType(ReadOnlyLoanRecords initialLoanRecords) throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final List\u003cGenre\u003e personGenres \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (JsonAdaptedTag tag : genres) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            personGenres.add(tag.toModelType());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (serialNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    SerialNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(serialNumber)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final SerialNumber modelSerialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (author \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Author modelAuthor \u003d new Author(author);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final Loan modelLoan;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (loan \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelLoan \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } else if (!LoanId.isValidLoanId(loan)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(LoanId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            LoanId loanId \u003d new LoanId(loan);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            modelLoan \u003d initialLoanRecords.getLoansMap().get(loanId);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            if (modelLoan \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                throw new IllegalValueException(String.format(MESSAGE_LOAN_ID_DOES_NOT_EXISTS, loanId));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final Set\u003cGenre\u003e modelGenres \u003d new HashSet\u003c\u003e(personGenres);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book(modelTitle, modelSerialNumber, modelAuthor, modelLoan, modelGenres);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 13,
      "seeziyang": 37,
      "shiyao821": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Jackson-friendly version of {@link Genre}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Converts a given {@code Genre} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public JsonAdaptedTag(Genre source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        tagName \u003d source.genreName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Converts this Jackson-friendly adapted genre object into the model\u0027s {@code Genre} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted genre."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Genre toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!Genre.isValidGenreName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new IllegalValueException(Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Genre(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 9,
      "-": 35,
      "shiyao821": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/JsonCatalogStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * A class to access Catalog data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonCatalogStorage implements CatalogStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCatalogStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonCatalogStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyCatalog\u003e readCatalog(ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return readCatalog(filePath, initialLoanRecords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Similar to {@link #readCatalog(ReadOnlyLoanRecords)}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Optional\u003cReadOnlyCatalog\u003e readCatalog(Path filePath, ReadOnlyLoanRecords initialLoanRecords)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cJsonSerializableCatalog\u003e jsonCatalog \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                filePath, JsonSerializableCatalog.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (jsonCatalog.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            return Optional.of(jsonCatalog.get().toModelType(initialLoanRecords));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveCatalog(ReadOnlyCatalog catalog) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveCatalog(catalog, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Similar to {@link #saveCatalog(ReadOnlyCatalog)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveCatalog(ReadOnlyCatalog catalog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(catalog);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCatalog(catalog), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "seeziyang": 8,
      "shiyao821": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/catalog/JsonSerializableCatalog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * An Immutable Catalog that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@JsonRootName(value \u003d \"Catalog\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonSerializableCatalog {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"books list contains duplicate book(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final List\u003cJsonAdaptedBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Constructs a {@code JsonSerializableCatalog} with the given books."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableCatalog(@JsonProperty(\"books\") List\u003cJsonAdaptedBook\u003e books) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.books.addAll(books);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts a given {@code ReadOnlyCatalog} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCatalog}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableCatalog(ReadOnlyCatalog source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        books.addAll(source.getBookList().stream().map(JsonAdaptedBook::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts this catalog into the model\u0027s {@code Catalog} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Uses an empty LoanRecords."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Catalog toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return toModelType(new LoanRecords());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts this catalog into the model\u0027s {@code Catalog} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Loan objects of the Books are taken from the initialLoanRecords."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Catalog toModelType(ReadOnlyLoanRecords initialLoanRecords) throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (JsonAdaptedBook jsonAdaptedBook : books) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            Book book \u003d jsonAdaptedBook.toModelType(initialLoanRecords);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (catalog.hasBook(book)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            catalog.addBook(book);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return catalog;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 16,
      "shiyao821": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/loanrecords/JsonAdaptedLoan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.storage.loanrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * Jackson-friendly version of {@link Loan}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class JsonAdaptedLoan {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Loan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DATE_MESSAGE_CONSTRAINTS \u003d \"Date should be in the ISO-8601 format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String START_DATE \u003d \"Start Date\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DUE_DATE \u003d \"Due Date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String loanId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String bookSerialNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String borrowerId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private final String dueDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructs a {@code JsonAdaptedLoan} with the given Loan details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public JsonAdaptedLoan(@JsonProperty(\"loanId\") String loanId,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"bookSerialNumber\") String bookSerialNumber,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"borrowerId\") String borrowerId,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                           @JsonProperty(\"dueDate\") String dueDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loanId \u003d loanId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.bookSerialNumber \u003d bookSerialNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.borrowerId \u003d borrowerId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts a given {@code Loan} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public JsonAdaptedLoan(Loan source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanId \u003d source.getLoanId().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        bookSerialNumber \u003d source.getBookSerialNumber().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerId \u003d source.getBorrowerId().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        dueDate \u003d source.getDueDate().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Converts this Jackson-friendly adapted Loan object into the model\u0027s {@code Loan} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Loan."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (loanId \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    LoanId.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!LoanId.isValidLoanId(loanId)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(LoanId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LoanId modelBookLoanId \u003d new LoanId(loanId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (bookSerialNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    SerialNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(bookSerialNumber)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final SerialNumber modelBookSerialNumber \u003d new SerialNumber(bookSerialNumber);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (borrowerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                    BorrowerId.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (!BorrowerId.isValidBorrowerId(borrowerId)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(BorrowerId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final BorrowerId modelBorrowerId \u003d new BorrowerId(borrowerId);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, START_DATE)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, DUE_DATE)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            LocalDate.parse(startDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            LocalDate.parse(dueDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new IllegalValueException(DATE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LocalDate modelStartDate \u003d LocalDate.parse(startDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        final LocalDate modelDueDate \u003d LocalDate.parse(dueDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Loan(modelBookLoanId, modelBookSerialNumber, modelBorrowerId, modelStartDate, modelDueDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/loanrecords/JsonLoanRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.storage.loanrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonLoanRecordsStorage implements LoanRecordsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLoanRecordsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonLoanRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return readLoanRecords(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Similar to {@link #readLoanRecords()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Optional\u003cJsonSerializableLoanRecords\u003e jsonLoanRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                filePath, JsonSerializableLoanRecords.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        if (!jsonLoanRecords.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            return Optional.of(jsonLoanRecords.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveLoanRecords(ReadOnlyLoanRecords loanRecords) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        saveLoanRecords(loanRecords, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Similar to {@link #saveLoanRecords(ReadOnlyLoanRecords)}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void saveLoanRecords(ReadOnlyLoanRecords loanRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        requireNonNull(loanRecords);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLoanRecords(loanRecords), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 1,
      "-": 60,
      "shiyao821": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/loanrecords/JsonSerializableLoanRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.storage.loanrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * An Immutable LoanRecords that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "@JsonRootName(value \u003d \"loanrecords\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class JsonSerializableLoanRecords {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // NOT IMPORTANT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOAN \u003d \"loans list contains duplicate loan(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private final List\u003cJsonAdaptedLoan\u003e loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Constructs a {@code JsonSerializableLoanRecords} with the given loans."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableLoanRecords(@JsonProperty(\"loans\") List\u003cJsonAdaptedLoan\u003e loans) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.loans.addAll(loans);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts a given {@code ReadOnlyLoanRecords} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLoanRecords}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public JsonSerializableLoanRecords(ReadOnlyLoanRecords source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loans.addAll(source.getLoanCollection().stream().map(JsonAdaptedLoan::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Converts this loan record into the model\u0027s {@code LoanRecords} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public LoanRecords toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (JsonAdaptedLoan jsonAdaptedLoan : loans) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            Loan loan \u003d jsonAdaptedLoan.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            if (loanRecords.hasLoan(loan)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            loanRecords.addLoan(loan);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return loanRecords;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 2,
      "shiyao821": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/loanrecords/LoanRecordsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.storage.loanrecords;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " * Represents a storage for {@link seedu.address.model.LoanRecords}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public interface LoanRecordsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Path getLoanRecordsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns LoanRecords data as a {@link ReadOnlyLoanRecords}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #getLoanRecordsFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    Optional\u003cReadOnlyLoanRecords\u003e readLoanRecords(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Saves the given {@link ReadOnlyLoanRecords} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @param loanRecords cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveLoanRecords(ReadOnlyLoanRecords loanRecords) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * @see #saveLoanRecords(ReadOnlyLoanRecords, Path)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    void saveLoanRecords(ReadOnlyLoanRecords loanRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 1,
      "shiyao821": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class BookCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final String FXML \u003d \"BookListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label serialNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private FlowPane genres;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Label loanStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        title.setText(book.getTitle().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        serialNumber.setText(book.getSerialNumber().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        author.setText(book.getAuthor().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        book.getGenres().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.genreName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .forEach(tag -\u003e genres.getChildren().add(new Label(tag.genreName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (book.isCurrentlyLoanedOut()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            loanStatus.setText(\"Loaned\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            loanStatus.setText(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        if (!(other instanceof BookCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        BookCard card \u003d (BookCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 12,
      "Cronyxx": 13,
      "-": 52,
      "shiyao821": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * Panel containing the list of books."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class BookListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final String FXML \u003d \"BookListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public BookListPanel(ObservableList\u003cBook\u003e bookList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BookListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code BookCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    class BookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                setGraphic(new BookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 4,
      "Cronyxx": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private AnchorPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Pane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private StackPane bookListPanelPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public BookListPanel getBookListPanel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 10,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/LiBerryLogo_square.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/BookListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"Infinity\" minWidth\u003d\"10.0\" prefWidth\u003d\"205.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"genres\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"serialNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$serialNumber\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "   \u003cPane maxWidth\u003d\"100.0\" minHeight\u003d\"105.0\" minWidth\u003d\"100.0\" prefHeight\u003d\"105.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         \u003cLabel fx:id\u003d\"loanStatus\" layoutY\u003d\"41.0\" text\u003d\"Loaned\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "               \u003cFont size\u003d\"19.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "   \u003c/Pane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 3,
      "Cronyxx": 21,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/BookListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cTextField fx:id\u003d\"commandTextField\" maxHeight\u003d\"35.0\" maxWidth\u003d\"Infinity\" minHeight\u003d\"35.0\" minWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "           onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"35.0\" prefWidth\u003d\"600.0\" promptText\u003d\"Enter command here...\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "           AnchorPane.leftAnchor\u003d\"5\" AnchorPane.rightAnchor\u003d\"5\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 5,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    -fx-background-color: transparent, #C8D3D5, transparent, #C8D3D5;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "#genres {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "#genres .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 4,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            fx:controller\u003d\"view.HelpWindow\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 11,
      "-": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"650.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"LiBerry\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"510.0\" prefWidth\u003d\"615.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003cbottom\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "          \u003cAnchorPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"35.0\" minHeight\u003d\"35.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"35.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"pane-with-border\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "          \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003c/bottom\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003cright\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "          \u003cAnchorPane maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"315.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #d8dae3#d8dae3;\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                     \u003cPane fx:id\u003d\"resultDisplayPlaceholder\" maxWidth\u003d\"200.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"115.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "              \u003cText layoutX\u003d\"31.0\" layoutY\u003d\"143.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Name: John\" wrappingWidth\u003d\"109.7158203125\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "              \u003cText layoutX\u003d\"31.0\" layoutY\u003d\"167.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Loans: 4\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "              \u003cText layoutX\u003d\"31.0\" layoutY\u003d\"189.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Unpaid fees: 0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003c/right\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003ccenter\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003cVBox fx:id\u003d\"bookList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        \u003c/center\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003ctop\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "               \u003cHBox prefHeight\u003d\"47.0\" prefWidth\u003d\"615.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"47.0\" fitWidth\u003d\"118.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                           \u003cImage url\u003d\"@../images/LiBerryLogo.png\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                           \u003cInsets left\u003d\"7.0\" top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                     \u003cPane prefHeight\u003d\"47.0\" prefWidth\u003d\"286.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                     \u003cLabel prefHeight\u003d\"57.0\" prefWidth\u003d\"201.0\" text\u003d\"Mode: Serving\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            \u003c/top\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "      \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 46,
      "-": 22
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "\u003cTextArea fx:id\u003d\"resultDisplay\" prefHeight\u003d\"115.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"result-display\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 3,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class DateUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void extendDate_validDays_returnsTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.extendDate(today, 14).equals(today.plusDays(14)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.extendDate(today, 789).equals(today.plusDays(789)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.extendDate(today, 0).equals(today));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void extendDate_validDays_returnsFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.extendDate(today, 123).equals(today.plusDays(456)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.extendDate(today, 123).equals(today.plusDays(-123)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void extendDate_invalidDays_throwsAssertionError() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e DateUtil.extendDate(today, -23));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void extendDate_invalidDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateUtil.extendDate(null, 23));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getTodayPlusDays_validDays_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getTodayPlusDays(30).equals(today.plusDays(30)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getTodayPlusDays(567).equals(today.plusDays(567)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getTodayPlusDays(0).equals(today));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getTodayPlusDays_validDays_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.getTodayPlusDays(9876).equals(today.plusDays(9877)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(DateUtil.getTodayPlusDays(123).equals(today.plusDays(0)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getNumOfDaysBetween_validDates_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getNumOfDaysBetween(DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(40)) \u003d\u003d 40);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getNumOfDaysBetween(today.plusDays(23), today.plusDays(50)) \u003d\u003d 27);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getNumOfDaysBetween(today.minusDays(10), today) !\u003d 11);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(DateUtil.getNumOfDaysBetween(today, DateUtil.extendDate(today, 100)) !\u003d 99);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getNumOfDaysBetween_invalidDates_throwsAssertionError() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(AssertionError.class, ()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            -\u003e DateUtil.getNumOfDaysBetween(DateUtil.extendDate(today, 30), today));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getNumOfDaysBetween_invalidDates_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LocalDate today \u003d DateUtil.getTodayDate();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateUtil.getNumOfDaysBetween(null, today));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/LoanSlipUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.LoanSlipException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class LoanSlipUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Borrower borrower;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Book book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Loan loan;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        borrower \u003d ALICE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        book \u003d BOOK_1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loan \u003d new Loan("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new LoanId(\"L999999\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                book.getSerialNumber(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                borrower.getBorrowerId(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayDate(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayPlusDays(14));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void mountLoanSlip_noLoanSlipMounted_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoanSlip();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoanSlip(loan, book, borrower));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void mountLoanSlip_inconsistentLoanAndFields_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoanSlip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.mountLoanSlip(loan, BOOK_2, borrower));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.mountLoanSlip(loan, book, BOB));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void mountLoanSlip_loanSlipMounted_mountOverrideSuccess() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoanSlip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount first loan"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoanSlip(loan, book, borrower));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan loan2 \u003d new Loan("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new LoanId(\"L000002\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                BOOK_2.getSerialNumber(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                BOB.getBorrowerId(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayPlusDays(10),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DateUtil.getTodayPlusDays(24));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Mount second loan"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoanSlip(loan2, BOOK_2, BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Check that second loan is mounted, overriding first loan"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(LoanSlipUtil.isMounted());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(LoanSlipUtil.getCurrentLoan(), loan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(LoanSlipUtil.getCurrentLoan(), loan2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void createLoanSlipInDirectory_loanSlipMounted_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        File file \u003d new File(\"./data/loan_slips/L999999.pdf\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoanSlip(loan, book, borrower));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(file.exists());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.createLoanSlipInDirectory());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(file.exists());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(file.exists());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void createLoanSlipInDirectory_noLoanSlipMounted_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoanSlip();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.createLoanSlipInDirectory());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void openLoanSlip_loanSlipNotReady_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanSlipUtil.unmountLoanSlip();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.openLoanSlip());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertDoesNotThrow(() -\u003e LoanSlipUtil.mountLoanSlip(loan, book, borrower));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(LoanSlipException.class, () -\u003e LoanSlipUtil.openLoanSlip());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.JsonBorrowerRecordsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.JsonCatalogStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.JsonLoanRecordsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonCatalogStorage catalogStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonCatalogStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonLoanRecordsStorage loanRecordsStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonLoanRecordsStorage(temporaryFolder.resolve(\"loanRecords.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonBorrowerRecordsStorage borrowerRecordsStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonBorrowerRecordsStorage(temporaryFolder.resolve(\"borrowerRecords.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                userPrefsStorage, loanRecordsStorage, catalogStorage, borrowerRecordsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Setup LogicManager with JsonCatalogIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonCatalogStorage catalogStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonCatalogIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCatalog.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonBorrowerRecordsStorage borrowerRecordsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonBorrowerRecordsStorage(temporaryFolder.resolve(\"ioExceptionBorrowerRecords.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonLoanRecordsStorage loanRecordsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonLoanRecordsStorage(temporaryFolder.resolve(\"ioExceptionLoanRecords.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        StorageManager storage \u003d new StorageManager("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                userPrefsStorage, loanRecordsStorage, catalogStorage, borrowerRecordsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + TITLE_DESC_BOOK_1 + SERIAL_NUMBER_DESC_BOOK_1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + AUTHOR_DESC_BOOK_1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOOK_1).withGenres().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.addBook(expectedBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getCatalog_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getCatalog(), model.getCatalog());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getFilteredBookList_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getFilteredBookList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getCatalogFilePath_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getCatalogFilePath(), model.getCatalogFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getGuiSettings_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getGuiSettings(), model.getGuiSettings());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setGuiSettings_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(2.2, 2.2, 1, 3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(logic.getGuiSettings(), guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(logic.getGuiSettings(), new GuiSettings());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static class JsonCatalogIoExceptionThrowingStub extends JsonCatalogStorage {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private JsonCatalogIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public void saveCatalog(ReadOnlyCatalog addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 49,
      "seeziyang": 1,
      "-": 129,
      "shiyao821": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // TODO implement and add getTypicalLoanRecords() and getTypicalBorrowerRecords()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_newBook_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book validBook \u003d new BookBuilder().withTitle(\"Hari\").withSerialNumber(\"B00005\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.addBook(validBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(new AddCommand(validBook), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validBook), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookInList \u003d model.getCatalog().getBookList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(new AddCommand(bookInList), model, MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 12,
      "-": 32,
      "shiyao821": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelStubAcceptingBookAdded modelStub \u003d new ModelStubAcceptingBookAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validBook).execute(modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBook), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(Arrays.asList(validBook), modelStub.booksAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBook(validBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_BOOK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book a \u003d new BookBuilder().withTitle(\"A\").withSerialNumber(\"B00001\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(\"B\").withSerialNumber(\"B00002\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addACommand \u003d new AddCommand(a);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addBCommand \u003d new AddCommand(b);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(addACommand.equals(addACommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addACommandCopy \u003d new AddCommand(a);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(addACommand.equals(addACommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(addACommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(addACommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(addACommand.equals(addBCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Path getCatalogFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setCatalogFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public Book getBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setCatalog(ReadOnlyCatalog newData) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ReadOnlyCatalog getCatalog() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public boolean hasBook(SerialNumber bookSn) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ObservableList\u003cBook\u003e getOverdueBooks() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public void resetFilteredBookList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public Path getLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public void setLoanRecordsFilePath(Path loanRecordsFilePath) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public ReadOnlyLoanRecords getLoanRecords() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public Path getBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        public void setBorrowerRecordsFilePath(Path borrowerRecordsFilePath) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public BorrowerRecords getBorrowerRecords() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public Model excludeBookBeingReplaced(Book toBeReplaced) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            throw new AssertionError(\" This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public Borrower getServingBorrower() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\" This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public boolean isServeMode() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            throw new AssertionError(\" This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public boolean hasBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void registerBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void resetGenerator() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void setServingBorrower(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void setServingBorrower(Borrower borrower) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void servingBorrowerNewLoan(Loan newLoan) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        public void servingBorrowerReturnLoan(Loan returnedLoan) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public boolean hasBorrowerId(BorrowerId borrowerId) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public void exitsServeMode() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        public List\u003cBook\u003e getBorrowerBooks() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private class ModelStubWithBook extends ModelStub {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private final Book book;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelStubWithBook(Book book) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.book \u003d book;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return this.book.equals(book);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private class ModelStubAcceptingBookAdded extends ModelStub {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        final ArrayList\u003cBook\u003e booksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return booksAdded.stream().anyMatch(book::equals);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            booksAdded.add(book);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ReadOnlyCatalog getCatalog() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return new Catalog();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 14,
      "hoholyin": 68,
      "Cronyxx": 13,
      "seeziyang": 23,
      "-": 182,
      "shiyao821": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void execute_emptyCatalog_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new ModelManager(new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void execute_nonEmptyCatalog_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // filter the model with a predicate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(\"harry\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 2,
      "-": 23,
      "shiyao821": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINE_INCREMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOAN_PERIOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RENEW_PERIOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.SetUserSettingsDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String VALID_ID_AMY \u003d \"K1234\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String VALID_ID_BOB \u003d \"K2345\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String BORROWER_ID_DESC_BOB \u003d \" \" + PREFIX_BORROWER_ID + VALID_ID_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_TITLE_BOOK_1 \u003d \"Harry Botter\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_TITLE_BOOK_2 \u003d \"Legend of the Condor Heroes\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_TITLE_BOOK_3 \u003d \"Heavenly Sword and Dragon Saber\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BOOK_1 \u003d \"B00001\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BOOK_2 \u003d \"B00002\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BOOK_3 \u003d \"B00005\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BOOK_4 \u003d \"B00007\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_AUTHOR_BOOK_1 \u003d \"J K Rowling\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_AUTHOR_BOOK_2 \u003d \"Jin Yong\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static final String VALID_GENRE_ACTION \u003d \"ACTION\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_GENRE_FICTION \u003d \"FICTION\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_GENRE_NONFICTION \u003d \"NON-FICTION\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String VALID_BORROWER_ID \u003d \"K0001\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String TITLE_DESC_BOOK_1 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOOK_1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String TITLE_DESC_BOOK_2 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String SERIAL_NUMBER_DESC_BOOK_1 \u003d \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String SERIAL_NUMBER_DESC_BOOK_2 \u003d \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String AUTHOR_DESC_BOOK_1 \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_BOOK_1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String AUTHOR_DESC_BOOK_2 \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String GENRE_DESC_FICTION \u003d \" \" + PREFIX_GENRE + VALID_GENRE_FICTION;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String GENRE_DESC_ACTION \u003d \" \" + PREFIX_GENRE + VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String INVALID_SERIAL_NUMBER_DESC \u003d \" \" + PREFIX_SERIAL_NUMBER + \"9a\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String INVALID_GENRE_DESC \u003d \" \" + PREFIX_GENRE + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String VALID_LOAN_ID \u003d \"L000001\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_LOAN_PERIOD_1 \u003d \"14\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_LOAN_PERIOD_2 \u003d \"7\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_RENEW_PERIOD_1 \u003d \"14\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_RENEW_PERIOD_2 \u003d \"7\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_FINE_INCREMENT_1 \u003d \"30\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_FINE_INCREMENT_2 \u003d \"40\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String INVALID_LOAN_PERIOD_DESC \u003d \" \" + PREFIX_LOAN_PERIOD + \"7a\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String INVALID_RENEW_PERIOD_DESC \u003d \" \" + PREFIX_RENEW_PERIOD + \"7b\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String INVALID_FINE_INCREMENT_DESC \u003d \" \" + PREFIX_FINE_INCREMENT + \"10c\"; // \u0027a\u0027 not allowed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_LOAN_PERIOD_1_DESC \u003d \" \" + PREFIX_LOAN_PERIOD + VALID_LOAN_PERIOD_1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_RENEW_PERIOD_1_DESC \u003d \" \" + PREFIX_RENEW_PERIOD + VALID_RENEW_PERIOD_1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_FINE_INCREMENT_1_DESC \u003d \" \" + PREFIX_FINE_INCREMENT + VALID_FINE_INCREMENT_1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_LOAN_PERIOD_2_DESC \u003d \" \" + PREFIX_LOAN_PERIOD + VALID_LOAN_PERIOD_2;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_RENEW_PERIOD_2_DESC \u003d \" \" + PREFIX_RENEW_PERIOD + VALID_RENEW_PERIOD_2;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final String VALID_FINE_INCREMENT_2_DESC \u003d \" \" + PREFIX_FINE_INCREMENT + VALID_FINE_INCREMENT_2;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_BOOK_1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_BOOK_2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DESC_BOOK_1 \u003d new EditBookDescriptorBuilder().withTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1).withAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DESC_BOOK_2 \u003d new EditBookDescriptorBuilder().withTitle(VALID_TITLE_BOOK_2)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).withAuthor(VALID_AUTHOR_BOOK_2)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withGenres(VALID_GENRE_ACTION, VALID_GENRE_FICTION).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final SetCommand.SetUserSettingsDescriptor DESC_USER_SETTINGS_1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final SetCommand.SetUserSettingsDescriptor DESC_USER_SETTINGS_2;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        DESC_USER_SETTINGS_1 \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_1)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        DESC_USER_SETTINGS_2 \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_2)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_2)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_2)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog expectedCatalog \u003d new Catalog(actualModel.getCatalog());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedCatalog, actualModel.getCatalog());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static void showBookAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        final String title \u003d book.getTitle().value;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        model.updateFilteredBookList(new BookPredicate().setTitle(title));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 6,
      "hoholyin": 47,
      "Cronyxx": 40,
      "seeziyang": 2,
      "-": 91,
      "shiyao821": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteByIndexCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * {@code DeleteByIndexCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class DeleteByIndexCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // TODO implement and add getTypicalLoanRecords() and getTypicalBorrowerRecords()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteByIndexCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteByIndexCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showNoBook(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(deleteByIndexCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCatalog().getBookList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteByIndexCommand \u003d new DeleteByIndexCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(deleteByIndexCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteFirstCommand \u003d new DeleteByIndexCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteSecondCommand \u003d new DeleteByIndexCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand deleteFirstCommandCopy \u003d new DeleteByIndexCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void showNoBook(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        model.updateFilteredBookList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(model.getFilteredBookList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 33,
      "-": 72,
      "shiyao821": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteBySerialNumberCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * {@code DeleteByIndexCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class DeleteBySerialNumberCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    // TODO implement and add getTypicalLoanRecords() and getTypicalBorrowerRecords()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_validSerialNumber_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // B00001 exists in typicalCatalog"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookToDelete \u003d retrieveBookFromCatalog(model, sn);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteBySerialNumberCommand \u003d new DeleteBySerialNumberCommand(sn);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(deleteBySerialNumberCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                model.getCatalog(), model.getLoanRecords(), model.getBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(deleteBySerialNumberCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_invalidSerialNumber_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber outOfBoundSerialNumber \u003d new SerialNumber(\"B99999\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteBySerialNumberCommand \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new DeleteBySerialNumberCommand(outOfBoundSerialNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(deleteBySerialNumberCommand, model, Messages.MESSAGE_NO_SUCH_BOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn1 \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn2 \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteFirstCommand \u003d new DeleteBySerialNumberCommand(sn1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteSecondCommand \u003d new DeleteBySerialNumberCommand(sn2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand deleteFirstCommandCopy \u003d new DeleteBySerialNumberCommand(sn1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns Book from Catalog under the model."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param model Model to retrieve Book from."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param serialNumber Serial number of target book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Book object, the target book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Book retrieveBookFromCatalog(Model model, SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return (Book) model.getCatalog()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .getBookList()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .filter(book -\u003e book.getSerialNumber().equals(serialNumber))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .toArray()[0];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_exitsServeMode_successful() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //registers BOB"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new RegisterCommand(BOB).execute(modelManager);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //serves BOB"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new ServeCommand(new BorrowerId(VALID_ID_BOB)).execute(modelManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertNotNull(modelManager.getServingBorrower());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        doneCommand.execute(modelManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Assert.assertThrows(CommandException.class, MESSAGE_NOT_IN_SERVE_MODE, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                doneCommand.execute(modelManager));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        DoneCommand standardCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class EditBookDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand.EditBookDescriptor descriptorWithSameValues \u003d new EditCommand.EditBookDescriptor(DESC_BOOK_1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(DESC_BOOK_1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(DESC_BOOK_1.equals(DESC_BOOK_1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(DESC_BOOK_1.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(DESC_BOOK_1.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(DESC_BOOK_1.equals(DESC_BOOK_2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditBookDescriptor editedAmy \u003d new EditBookDescriptorBuilder(DESC_BOOK_1).withTitle(VALID_TITLE_BOOK_2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(DESC_BOOK_1.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(DESC_BOOK_1.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_BOOK_1).withAuthor(VALID_AUTHOR_BOOK_2).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(DESC_BOOK_1.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_BOOK_1).withGenres(VALID_GENRE_ACTION).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(DESC_BOOK_1.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BOOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOOK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOOK_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    // TODO implement and add getTypicalLoanRecords() and getTypicalBorrowerRecords()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new Catalog(model.getCatalog()), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index indexLastBook \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book lastBook \u003d model.getFilteredBookList().get(indexLastBook.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BookBuilder bookInList \u003d new BookBuilder(lastBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook \u003d bookInList.withTitle(VALID_TITLE_BOOK_3).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_3)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withGenres(VALID_GENRE_ACTION).withAuthor(VALID_AUTHOR_BOOK_2).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTitle(VALID_TITLE_BOOK_3)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_3).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_2).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastBook, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new Catalog(model.getCatalog()), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.setBook(lastBook, editedBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, new EditCommand.EditBookDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new Catalog(model.getCatalog()), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookInFilteredList \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook \u003d new BookBuilder(bookInFilteredList).withTitle(VALID_TITLE_BOOK_2).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new EditBookDescriptorBuilder().withTitle(VALID_TITLE_BOOK_2).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new Catalog(model.getCatalog()), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_duplicateBookUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(firstBook).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_BOOK, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_duplicateBookFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // edit book in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book bookInList \u003d model.getCatalog().getBookList().get(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new EditBookDescriptorBuilder(bookInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTitle(VALID_TITLE_BOOK_2).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * but smaller than size of catalog"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCatalog().getBookList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new EditBookDescriptorBuilder().withTitle(VALID_TITLE_BOOK_2).build());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_BOOK, DESC_BOOK_1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand.EditBookDescriptor copyDescriptor \u003d new EditBookDescriptor(DESC_BOOK_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_BOOK, copyDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_BOOK, DESC_BOOK_1)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_BOOK, DESC_BOOK_2)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 71,
      "-": 100,
      "shiyao821": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new BookPredicate().setTitle(VALID_TITLE_BOOK_1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new BookPredicate().setTitle(VALID_TITLE_BOOK_2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void execute_oneKeyword_multipleBooksFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(\"the\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(Arrays.asList(BOOK_2, BOOK_3, BOOK_4), model.getFilteredBookList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void execute_multipleKeywords_multipleBooksFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setGenres(\"FICTION\", \"ACTION\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertEquals(Arrays.asList(BOOK_2, BOOK_4), model.getFilteredBookList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 10,
      "-": 53,
      "shiyao821": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InfoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class InfoCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_validArguments_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InfoCommand infoCommand \u003d new InfoCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book target \u003d model.getFilteredBookList().get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(InfoCommand.MESSAGE_BOOK_INFO, target.getTitle());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new Catalog(model.getCatalog()), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(target.getTitle().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandSuccess(infoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InfoCommand infoCommand \u003d new InfoCommand(Index.fromOneBased(10));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandFailure(infoCommand, model, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoanCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_ON_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.UserSettings.DEFAULT_LOAN_PERIOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_7;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.HOON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_nullSerialNumber_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_validUnloanedBook_loanSuccessful() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber toLoan \u003d BOOK_1.getSerialNumber();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d HOON.getBorrowerId();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand \u003d new LoanCommand(toLoan);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loan \u003d new Loan(new LoanId(\"L000001\"), toLoan, servingBorrowerId,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(DEFAULT_LOAN_PERIOD));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedOutBook \u003d new Book(BOOK_1.getTitle(), BOOK_1.getSerialNumber(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                BOOK_1.getAuthor(), loan, BOOK_1.getGenres());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d loanCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(LoanCommand.MESSAGE_SUCCESS, loanedOutBook, HOON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_notInServeMode_loanUnsuccessful() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber toLoan \u003d BOOK_1.getSerialNumber();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand \u003d new LoanCommand(toLoan);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d loanCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_noSuchBook_loanUnsuccessful() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber toLoan \u003d BOOK_1.getSerialNumber();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d HOON.getBorrowerId();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(new Catalog(), new LoanRecords(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand \u003d new LoanCommand(toLoan);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d loanCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_SUCH_BOOK;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_bookAlreadyOnLoan_loanUnsuccessful() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber toLoan \u003d BOOK_7.getSerialNumber();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d HOON.getBorrowerId();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.addBook(BOOK_7);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, new LoanRecords(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand \u003d new LoanCommand(toLoan);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d loanCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOK_ON_LOAN, BOOK_7);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand1 \u003d new LoanCommand(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand2 \u003d new LoanCommand(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanCommand loanCommand3 \u003d new LoanCommand(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_2));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanCommand1.equals(loanCommand1));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanCommand1.equals(loanCommand2));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanCommand1.equals(loanCommand3));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanCommand1.equals(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanCommand1.equals(1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_BORROWER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class RegisterCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_nullBorrower_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RegisterCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_borrowerAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower validBorrower \u003d new BorrowerBuilder().actualBuild();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        CommandResult commandResult \u003d new RegisterCommand(validBorrower).execute(modelManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(String.format(RegisterCommand.MESSAGE_SUCCESS, validBorrower), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(Arrays.asList(validBorrower), modelManager.getBorrowerRecords().getBorrowerList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_duplicateBorrower_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower validBorrower \u003d new BorrowerBuilder().actualBuild();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerCommand \u003d new RegisterCommand(validBorrower);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        registerCommand.execute(modelManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerCommand2 \u003d new RegisterCommand(validBorrower);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_BORROWER, () -\u003e registerCommand2.execute(modelManager));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower a \u003d new BorrowerBuilder().withName(\"A\").actualBuild();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower b \u003d new BorrowerBuilder().withName(\"B\").actualBuild();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerACommand \u003d new RegisterCommand(a);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerBCommand \u003d new RegisterCommand(b);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(registerACommand.equals(registerACommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        RegisterCommand registerACommandCopy \u003d new RegisterCommand(a);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(registerACommand.equals(registerACommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(registerACommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(registerACommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(registerACommand.equals(registerBCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 69,
      "seeziyang": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReturnCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOK_NOT_ON_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_LOANED_BY_BORROWER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_6;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_7;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.HOON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.IDA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class ReturnCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReturnCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_validLoanedBook_returnSuccessful() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d IDA.getBorrowerId();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.addBook(BOOK_7);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book returnedBook \u003d new Book(BOOK_7.getTitle(), BOOK_7.getSerialNumber(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                BOOK_7.getAuthor(), null, BOOK_7.getGenres());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d returnCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(ReturnCommand.MESSAGE_SUCCESS, returnedBook, IDA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_notInServeMode_returnUnsuccessful() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.addBook(BOOK_7);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d returnCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NOT_IN_SERVE_MODE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_noSuchIndex_returnUnsuccessful() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d IDA.getBorrowerId();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.addBook(BOOK_7);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d returnCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_bookNotOnLoan_returnUnsuccessful() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(IDA);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d IDA.getBorrowerId();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.addBook(BOOK_6);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book returnedBook \u003d new Book(BOOK_6.getTitle(), BOOK_6.getSerialNumber(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                BOOK_6.getAuthor(), null, BOOK_6.getGenres());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d returnCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOK_NOT_ON_LOAN, returnedBook);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void execute_borrowerDoesNotLoanThisBook_unsuccessful() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.addBorrower(HOON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId servingBorrowerId \u003d HOON.getBorrowerId();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.addBook(BOOK_7);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model model \u003d new ModelManager(catalog, loanRecords, borrowerRecords, new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        model.setServingBorrower(servingBorrowerId);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String actualMessage;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d returnCommand.execute(model).getFeedbackToUser();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOT_LOANED_BY_BORROWER, HOON, BOOK_7);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(actualMessage, expectedMessage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand1 \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand2 \u003d new ReturnCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReturnCommand returnCommand3 \u003d new ReturnCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(returnCommand1.equals(returnCommand1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(returnCommand1.equals(returnCommand2));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(returnCommand1.equals(returnCommand3));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(returnCommand1.equals(null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(returnCommand1.equals(1));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 198
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ServeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_BORROWER_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class ServeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_nullBorrowerId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ServeCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_borrowerIdAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new RegisterCommand(BOB).execute(modelManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId validBorrowerId \u003d new BorrowerId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        CommandResult commandResult \u003d new ServeCommand(validBorrowerId).execute(modelManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(String.format(ServeCommand.MESSAGE_SUCCESS, BOB),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void execute_borrowerIdNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId invalidId \u003d new BorrowerId(VALID_ID_AMY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        ServeCommand serveCommand \u003d new ServeCommand(invalidId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Assert.assertThrows(CommandException.class, MESSAGE_NO_SUCH_BORROWER_ID, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                serveCommand.execute(modelManager));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_USER_SETTINGS_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_USER_SETTINGS_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.SetUserSettingsDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.TypicalUserSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.UserSettingsBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            new ModelManager(new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings editedUserSettings \u003d new UserSettingsBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder(editedUserSettings)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String expectedMessage \u003d String.format(SetCommand.MESSAGE_SET_USER_SETTINGS_SUCCESS, editedUserSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings userSettings \u003d new UserSettings(UserSettingsBuilder.DEFAULT_LOAN_PERIOD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                UserSettingsBuilder.DEFAULT_RENEW_PERIOD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                UserSettingsBuilder.DEFAULT_FINE_INCREMENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedModel.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void execute_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedModel.setUserSettings(TypicalUserSettings.PARTIAL_USER_SETTINGS_1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String expectedMessage \u003d String.format(SetCommand.MESSAGE_SET_USER_SETTINGS_SUCCESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                TypicalUserSettings.PARTIAL_USER_SETTINGS_1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void execute_noFieldSpecified_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(new SetCommand.SetUserSettingsDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new Catalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String expectedMessage \u003d String.format(SetCommand.MESSAGE_SET_USER_SETTINGS_SUCCESS, new UserSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        final SetCommand standardCommand \u003d new SetCommand(DESC_USER_SETTINGS_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                new SetCommand.SetUserSettingsDescriptor(DESC_USER_SETTINGS_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand commandWithSameValues \u003d new SetCommand(copyDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertNotEquals(standardCommand, new ClearCommand());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertNotEquals(standardCommand, new SetCommand(DESC_USER_SETTINGS_2));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_ACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_FICTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENRE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SERIAL_NUMBER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_FICTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_FICTION).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_BOOK_1 + SERIAL_NUMBER_DESC_BOOK_1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + AUTHOR_DESC_BOOK_1 + GENRE_DESC_FICTION, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //need to add test to check unique serial number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // multiple genres - all accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBookMultipleTags \u003d new BookBuilder(BOOK_2).withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + GENRE_DESC_FICTION + GENRE_DESC_ACTION, new AddCommand(expectedBookMultipleTags));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOOK_1).withGenres().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOOK_1 + SERIAL_NUMBER_DESC_BOOK_1 + AUTHOR_DESC_BOOK_1,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // missing serial number"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOOK_1 + AUTHOR_DESC_BOOK_1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // missing author prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + VALID_AUTHOR_BOOK_2,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOOK_2 + VALID_SERIAL_NUMBER_BOOK_2 + VALID_AUTHOR_BOOK_2,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // invalid serial number"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOOK_2 + INVALID_SERIAL_NUMBER_DESC + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + GENRE_DESC_ACTION + GENRE_DESC_FICTION, SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // invalid genre"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + INVALID_GENRE_DESC + VALID_GENRE_FICTION, Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOOK_2 + INVALID_SERIAL_NUMBER_DESC + AUTHOR_DESC_BOOK_2,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + AUTHOR_DESC_BOOK_2 + GENRE_DESC_ACTION + GENRE_DESC_FICTION,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 53,
      "seeziyang": 1,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String argsString \u003d \"  some random string /t genre with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CatalogParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BORROWER_ID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteByIndexCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteBySerialNumberCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumberGenerator;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerIdGenerator;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.SetUserSettingsDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.UserSettingsBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.UserSettingsUtil;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class CatalogParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final CatalogParser parser \u003d new CatalogParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(BookUtil.getAddCommand(book));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new AddCommand(book), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseCommand_deleteByIndex() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteByIndexCommand command \u003d (DeleteByIndexCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DeleteByIndexCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new DeleteByIndexCommand(INDEX_FIRST_BOOK), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseCommand_deleteBySerialNumber() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        DeleteBySerialNumberCommand command \u003d (DeleteBySerialNumberCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                DeleteBySerialNumberCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                        + \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new DeleteBySerialNumberCommand(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(book).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + INDEX_FIRST_BOOK.getOneBased() + \" \" + BookUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_BOOK, descriptor), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(BookUtil.getFindCommand(book));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertEquals(new FindCommand(new BookPredicate()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .setTitle(book.getTitle().value)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .setAuthor(book.getAuthor().value)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .setSerialNumber(book.getSerialNumber().value)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .setGenres(book.getGenres())), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_loan() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                LoanCommand.COMMAND_WORD + \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                instanceof LoanCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_register() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(new BorrowerRecords());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                RegisterCommand.COMMAND_WORD + \" \" + PREFIX_NAME + VALID_NAME_AMY + \" \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                        + PREFIX_PHONE + VALID_PHONE_AMY + \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                instanceof RegisterCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_serve() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                ServeCommand.COMMAND_WORD + \" \" + PREFIX_BORROWER_ID + VALID_BORROWER_ID)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                instanceof ServeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(DoneCommand.COMMAND_WORD) instanceof DoneCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(DoneCommand.COMMAND_WORD + \" 3\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parseCommand_return() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(parser.parseCommand(ReturnCommand.COMMAND_WORD + \" 3\") instanceof ReturnCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parseCommand_set() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings userSettings \u003d new UserSettingsBuilder().build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand.SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder(userSettings).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand command \u003d (SetCommand) parser.parseCommand(SetCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                + UserSettingsUtil.getSetUserSettingsDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertEquals(new SetCommand(descriptor), command);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 33,
      "seeziyang": 50,
      "Cronyxx": 14,
      "-": 66,
      "shiyao821": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteByIndexCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.DeleteBySerialNumberCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * outside of the DeleteByIndexCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * same path through the DeleteByIndexCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_validArgs_returnsIndexDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteByIndexCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_validArgs_returnsSerialNumberDeleteCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, SERIAL_NUMBER_DESC_BOOK_1, new DeleteBySerialNumberCommand(sn));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_invalidSerialNumber_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \" sn/B0001\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(MESSAGE_INVALID_SERIAL_NUMBER, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 25,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new DoneCommand());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_ACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_FICTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENRE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SERIAL_NUMBER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_FICTION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_GENRE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_INDEX_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOOK_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE, EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_BOOK_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_BOOK_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + \" some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + \" i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // invalid serial number"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + INVALID_SERIAL_NUMBER_DESC, SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //invalid genre"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + INVALID_GENRE_DESC, Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + INVALID_SERIAL_NUMBER_DESC + AUTHOR_DESC_BOOK_1,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + SERIAL_NUMBER_DESC_BOOK_2 + INVALID_SERIAL_NUMBER_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // parsing it together with a valid genre results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + GENRE_DESC_FICTION + GENRE_DESC_ACTION + TAG_EMPTY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + GENRE_DESC_FICTION + TAG_EMPTY + GENRE_DESC_ACTION,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + TAG_EMPTY + GENRE_DESC_FICTION + GENRE_DESC_ACTION,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + INVALID_SERIAL_NUMBER_DESC + INVALID_GENRE_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SERIAL_NUMBER_DESC_BOOK_2"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + AUTHOR_DESC_BOOK_1 + TITLE_DESC_BOOK_1 + GENRE_DESC_FICTION;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).withAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_2).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // title"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_BOOK_1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTitle(VALID_TITLE_BOOK_1).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // serial number"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // author"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_BOOK_1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_BOOK_1).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // genre"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENRE_DESC_FICTION;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withGenres(VALID_GENRE_FICTION).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SERIAL_NUMBER_DESC_BOOK_1 + AUTHOR_DESC_BOOK_1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + GENRE_DESC_FICTION + SERIAL_NUMBER_DESC_BOOK_1 + AUTHOR_DESC_BOOK_1 + GENRE_DESC_FICTION"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2 + GENRE_DESC_ACTION;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_2).withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_SERIAL_NUMBER_DESC + SERIAL_NUMBER_DESC_BOOK_2;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_BOOK_2 + INVALID_SERIAL_NUMBER_DESC"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + SERIAL_NUMBER_DESC_BOOK_2;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_2).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withGenres().build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 90,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String SPACES \u003d \"     \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, SPACES,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new FindCommand(new BookPredicate().setTitle(\"Alice Bob\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertParseSuccess(parser, FindCommand.COMMAND_WORD + \" t/Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, FindCommand.COMMAND_WORD + SPACES + \" t/ Alice Bob \", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "-": 27,
      "shiyao821": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InfoCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class InfoCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_INDEX_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_INDEX_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String SPACES \u003d \"     \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InfoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private InfoCommandParser parser \u003d new InfoCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_nullArguments_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, SPACES, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_invalidArguments_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + \" \" + VALID_INDEX_ONE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, VALID_INDEX_ONE + \" \" + VALID_INDEX_TWO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \" some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parse_validArgument_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InfoCommand expectedCommand1 \u003d new InfoCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_ONE, expectedCommand1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        InfoCommand expectedCommand2 \u003d new InfoCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX_TWO, expectedCommand2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoanCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SERIAL_NUMBER_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.LoanCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanCommandParser loanCommandParser \u003d new LoanCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber bookSn \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseSuccess(loanCommandParser, SERIAL_NUMBER_DESC_BOOK_1, new LoanCommand(bookSn));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(loanCommandParser, EMPTY_STRING,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(loanCommandParser, INVALID_SERIAL_NUMBER_DESC, SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"\u0026HarryBotter\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String INVALID_SERIAL_NUMBER \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String INVALID_GENRE \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Harry Botter\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_SERIAL_NUMBER \u003d \"B03456\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String VALID_AUTHOR \u003d \"J K Rowling\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String VALID_GENRE_1 \u003d \"FICTION\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String VALID_GENRE_2 \u003d \"ACTION\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(nameWithWhitespace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseSerialNumber_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSerialNumber((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseSerialNumber_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSerialNumber(INVALID_SERIAL_NUMBER));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseSerialNumber_validValueWithoutWhitespace_returnsSerialNumber() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber expectedSerialNumber \u003d new SerialNumber(VALID_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedSerialNumber, ParserUtil.parseSerialNumber(VALID_SERIAL_NUMBER));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseSerialNumber_validValueWithWhitespace_returnsTrimmedSerialNumber() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String serialNumberWithWhitespace \u003d WHITESPACE + VALID_SERIAL_NUMBER + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber expectedSerialNumber \u003d new SerialNumber(VALID_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedSerialNumber, ParserUtil.parseSerialNumber(serialNumberWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseAuthor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAuthor((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseAuthor_validValueWithoutWhitespace_returnsAuthor() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author expectedAuthor \u003d new Author(VALID_AUTHOR);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedAuthor, ParserUtil.parseAuthor(VALID_AUTHOR));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseAuthor_validValueWithWhitespace_returnsTrimmedAuthor() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String authorWithWhitespace \u003d WHITESPACE + VALID_AUTHOR + WHITESPACE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author expectedAuthor \u003d new Author(VALID_AUTHOR);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedAuthor, ParserUtil.parseAuthor(authorWithWhitespace));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenre_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGenre(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenre_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGenre(INVALID_GENRE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenre_validValueWithoutWhitespace_returnsGenre() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Genre expectedGenre \u003d new Genre(VALID_GENRE_1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedGenre, ParserUtil.parseGenre(VALID_GENRE_1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenre_validValueWithWhitespace_returnsTrimmedGenre() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String genreWithWhitespace \u003d WHITESPACE + VALID_GENRE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Genre expectedGenre \u003d new Genre(VALID_GENRE_1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedGenre, ParserUtil.parseGenre(genreWithWhitespace));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenres_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGenres(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenres_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGenres(Arrays.asList(VALID_GENRE_1, INVALID_GENRE)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenres_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(ParserUtil.parseGenres(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void parseGenres_collectionWithValidTags_returnsGenreSet() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Set\u003cGenre\u003e actualGenreSet \u003d ParserUtil.parseGenres(Arrays.asList(VALID_GENRE_1, VALID_GENRE_2));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Set\u003cGenre\u003e expectedGenreSet \u003d new HashSet\u003cGenre\u003e(Arrays.asList(new Genre(VALID_GENRE_1),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new Genre(VALID_GENRE_2)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedGenreSet, actualGenreSet);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 60,
      "-": 100,
      "shiyao821": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RegisterCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerIdGenerator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class RegisterCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private RegisterCommandParser parser \u003d new RegisterCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(new BorrowerRecords());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower expectedBorrower \u003d new BorrowerBuilder(AMY).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                + EMAIL_DESC_AMY, new RegisterCommand(expectedBorrower));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, EMAIL_DESC_AMY + PHONE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + EMAIL_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + PHONE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 44,
      "seeziyang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ReturnCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class ReturnCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String VALID_INDEX_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private ReturnCommandParser returnCommandParser \u003d new ReturnCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Index index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseSuccess(returnCommandParser, VALID_INDEX_ONE, new ReturnCommand(index));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(returnCommandParser, EMPTY_STRING,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReturnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertParseFailure(returnCommandParser, INVALID_INDEX,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReturnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ServeCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BORROWER_ID_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class ServeCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private ServeCommandParser parser \u003d new ServeCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_allFieldsPresent_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId expectedBorrowerId \u003d new BorrowerId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + BORROWER_ID_DESC_BOB,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                new ServeCommand(expectedBorrowerId));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ServeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FINE_INCREMENT_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOAN_PERIOD_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RENEW_PERIOD_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_1_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_2_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_2_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RENEW_PERIOD_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RENEW_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RENEW_PERIOD_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RENEW_PERIOD_2_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand.SetUserSettingsDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.testutil.SetUserSettingsDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private SetCommandParser parser \u003d new SetCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, \"\", SetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, \" some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, \" i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loan period"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_LOAN_PERIOD_DESC, LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid renew period"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_RENEW_PERIOD_DESC, RenewPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid fine increment"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_FINE_INCREMENT_DESC, FineIncrement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loan period followed by valid renew period"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_LOAN_PERIOD_DESC + VALID_RENEW_PERIOD_1_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid renew period followed by valid loan period"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_RENEW_PERIOD_DESC + VALID_LOAN_PERIOD_1_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                RenewPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // valid loan period followed by invalid renew period"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, VALID_LOAN_PERIOD_1_DESC + INVALID_RENEW_PERIOD_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                RenewPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // Invalid fine increment followed by valid renew period"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_FINE_INCREMENT_DESC + VALID_RENEW_PERIOD_1_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                FineIncrement.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loan period followed by valid fine increment"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_LOAN_PERIOD_DESC + VALID_FINE_INCREMENT_1_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // multiple invalid values, but only the first invalid value that is checked by parser is captured"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseFailure(parser, INVALID_FINE_INCREMENT_DESC"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                        + INVALID_LOAN_PERIOD_DESC + INVALID_RENEW_PERIOD_DESC, LoanPeriod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d VALID_LOAN_PERIOD_1_DESC + VALID_RENEW_PERIOD_1_DESC + VALID_FINE_INCREMENT_1_DESC;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_1)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d VALID_LOAN_PERIOD_1_DESC + VALID_FINE_INCREMENT_1_DESC;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // loan period"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d VALID_LOAN_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // renew period"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        userInput \u003d VALID_RENEW_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_1)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // fine increment"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        userInput \u003d VALID_FINE_INCREMENT_1_DESC;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d VALID_LOAN_PERIOD_1_DESC + VALID_RENEW_PERIOD_1_DESC"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                + VALID_FINE_INCREMENT_1_DESC + VALID_LOAN_PERIOD_2_DESC + VALID_RENEW_PERIOD_2_DESC"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                + VALID_FINE_INCREMENT_2_DESC;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_2)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withFineIncrement(VALID_FINE_INCREMENT_2)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String userInput \u003d INVALID_LOAN_PERIOD_DESC + VALID_LOAN_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetUserSettingsDescriptor descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        SetCommand expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        userInput \u003d VALID_LOAN_PERIOD_1_DESC + INVALID_RENEW_PERIOD_DESC + VALID_RENEW_PERIOD_1_DESC;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetUserSettingsDescriptorBuilder()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .withRenewPeriod(VALID_RENEW_PERIOD_1)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        expectedCommand \u003d new SetCommand(descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BorrowerRecordsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.IDA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.getTypicalBorrowerRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.exceptions.BorrowerNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.exceptions.DuplicateBorrowerException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerRecordsTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void checkIfBorrowerExists() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerRecords borrowers \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower borrower1 \u003d new BorrowerBuilder().actualBuild();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower2 \u003d new BorrowerBuilder().withPhone(\"12341234\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .withEmail(\"hello@yo.com\").actualBuild();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowers.addBorrower(borrower1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //return true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(borrowers.hasBorrower(borrower1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //return false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(borrowers.hasBorrower(borrower2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getBorrowerFromId_borrowerExists_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BorrowerRecords borrowers \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Borrower borrower \u003d borrowers.getBorrowerFromId(ALICE.getBorrowerId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(borrower, ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getBorrowerFromId_borrowerDoesNotExists_assertNullPointerExceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BorrowerRecords borrowers \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e borrowers.getBorrowerFromId(GEORGE.getBorrowerId()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(borrowerRecords.listContains(CARL));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(borrowerRecords.listContains(IDA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setBorrower_validTargetAndEdited_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanAddedCarl \u003d new Borrower(CARL.getName(), CARL.getPhone(), CARL.getEmail(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                CARL.getBorrowerId(), CARL.getAddedCurrentLoanList(LOAN_1), CARL.getReturnedLoanList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerRecords.setBorrower(CARL, loanAddedCarl);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(borrowerRecords.getBorrowerFromId(CARL.getBorrowerId()).hasCurrentLoan(LOAN_1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setBorrower_invalidTarget_throwsBorrowerNotFoundException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower loanAddedIda \u003d new Borrower(IDA.getName(), IDA.getPhone(), IDA.getEmail(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                IDA.getBorrowerId(), IDA.getAddedCurrentLoanList(LOAN_1), IDA.getReturnedLoanList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(BorrowerNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                borrowerRecords.setBorrower(IDA, loanAddedIda));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void setBorrower_invalidEdited_throwsDuplicateBorrowerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(DuplicateBorrowerException.class, () -\u003e borrowerRecords.setBorrower(ALICE, BENSON));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 22,
      "hoholyin": 18,
      "seeziyang": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CatalogTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.commons.core.UserSettings.DEFAULT_LOAN_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_4;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class CatalogTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(Collections.emptyList(), catalog.getBookList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e catalog.resetData(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData_withValidReadOnlyCatalog_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog newData \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(newData, catalog);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData_withDuplicateBookDifferentSerialNumber_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Two books with the same identity fields but different serial number"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook1 \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(BOOK_1, editedBook1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CatalogStub newData \u003d new CatalogStub(newBooks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void resetData_withDuplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Two books with the same identity fields and same serial number"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook1 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(BOOK_1, editedBook1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CatalogStub newData \u003d new CatalogStub(newBooks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e catalog.resetData(newData));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e catalog.hasBook(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookNotInCatalog_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(catalog.hasBook(BOOK_1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookInCatalog_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(BOOK_1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(catalog.hasBook(BOOK_1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookWithSameIdentityFieldsInCatalog_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(BOOK_1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(catalog.hasBook(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e catalog.getBookList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getLoanedBooks_noBooksInCatalog_returnEmptyList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.resetData(new Catalog());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ObservableList\u003cBook\u003e loanedBooks \u003d catalog.getLoanedBooks();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(loanedBooks.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getAvailableBooks_noBooksInCatalog_returnEmptyList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.resetData(new Catalog());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ObservableList\u003cBook\u003e loanedBooks \u003d catalog.getAvailableBooks();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(loanedBooks.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getLoanedBooks_typicalCatalogWithLoanedBooks_returnsListOfLoanedBooks() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog newData \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId \u003d new LoanId(VALID_LOAN_ID);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber currentSerialNumber \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_4);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId currentBorrowerId \u003d new BorrowerId(VALID_BORROWER_ID);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan currentLoan \u003d new Loan(loanId, currentSerialNumber, currentBorrowerId,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(DEFAULT_LOAN_PERIOD));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedBook \u003d new BookBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_4).withLoan(currentLoan).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newData.addBook(loanedBook);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.resetData(newData);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ObservableList\u003cBook\u003e loanedBooks \u003d catalog.getLoanedBooks();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanedBooks.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanedBooks.get(0).equals(loanedBook));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getAvailableBooks_typicalCatalogWithLoanedBooks_returnsListOfAvailableBooks() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Catalog newData \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId \u003d new LoanId(VALID_LOAN_ID);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        SerialNumber currentSerialNumber \u003d new SerialNumber(VALID_SERIAL_NUMBER_BOOK_4);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId currentBorrowerId \u003d new BorrowerId(VALID_BORROWER_ID);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan currentLoan \u003d new Loan(loanId, currentSerialNumber, currentBorrowerId,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(DEFAULT_LOAN_PERIOD));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedBook \u003d new BookBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_4).withLoan(currentLoan).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        newData.addBook(loanedBook);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        catalog.resetData(newData);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ObservableList\u003cBook\u003e availableBooks \u003d catalog.getAvailableBooks();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(availableBooks.size() \u003d\u003d 4);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(getTypicalCatalog().getBookList().equals(availableBooks));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameCatalog_returnsSameHashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog newData \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.resetData(newData);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(newData.hashCode(), catalog.hashCode());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static class CatalogStub implements ReadOnlyCatalog {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        CatalogStub(Collection\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            this.books.setAll(books);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            return books;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 131,
      "seeziyang": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/LoanRecordsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoanRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoans;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanRecordsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_noArgument_emptyLoanRecords() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.getLoanCollection().isEmpty());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.getLoansMap().isEmpty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords.getLoanCount(), 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void contructor_copiedLoanRecords_loanRecordsNotEmpty() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords.getLoanCollection().size(), getTypicalLoans().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords.getLoansMap().size(), getTypicalLoans().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords.getLoanCount(), getTypicalLoans().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanRecords, getTypicalLoanRecords());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getLoanCollection() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(new ArrayList\u003cLoan\u003e().addAll(loanRecords.getLoanCollection()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new ArrayList\u003cLoan\u003e().addAll(getTypicalLoans()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void hasLoan() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.hasLoan(LOAN_1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.hasLoan(LOAN_2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.hasLoan(LOAN_3.getLoanId()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanRecords.hasLoan(LOAN_7));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanRecords.hasLoan(LOAN_7.getLoanId()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void addLoan() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanRecords.addLoan(LOAN_7);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanRecords.hasLoan(LOAN_7));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.getTypicalBorrowerRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoanRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.logic.commands.ServeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.book.BookPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.exceptions.NotInServeModeException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.CatalogBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(new Catalog(), new Catalog(modelManager.getCatalog()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userPrefs.setCatalogFilePath(Paths.get(\"catalog/file/path\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userPrefs.setCatalogFilePath(Paths.get(\"new/catalog/file/path\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings_nullUserSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserSettings(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings_validUserSettings_setsUserSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        UserSettings userSettings \u003d new UserSettings(10, 10, 10);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        modelManager.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertEquals(userSettings, modelManager.getUserSettings());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setCatalogFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCatalogFilePath(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setCatalogFilePath_validPath_setsCatalogFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Path path \u003d Paths.get(\"catalog/file/path\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        modelManager.setCatalogFilePath(path);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(path, modelManager.getCatalogFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setLoanRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLoanRecordsFilePath(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setLoanRecordsFilePath_validPath_setsLoanRecordsFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Path path \u003d Paths.get(\"loan/record/file/path\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.setLoanRecordsFilePath(path);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(path, modelManager.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBorrowerRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setBorrowerRecordsFilePath(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBorrowerRecordsFilePath_validPath_setsBorrowerRecordsFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Path path \u003d Paths.get(\"borrower/record/file/path\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        modelManager.setBorrowerRecordsFilePath(path);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(path, modelManager.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book book \u003d null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBook(book));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookNotInCatalog_returnsFalse() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(modelManager.hasBook(BOOK_1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hasBook_bookInCatalog_returnsTrue() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        modelManager.addBook(BOOK_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(modelManager.hasBook(BOOK_1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getOverdueBooks_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId \u003d new LoanId(VALID_LOAN_ID);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book toBeLoaned \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId currentBorrowerId \u003d new BorrowerId(VALID_BORROWER_ID);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loan \u003d new Loan(loanId, toBeLoaned.getSerialNumber(), currentBorrowerId,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayMinusDays(31), DateUtil.getTodayMinusDays(1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedBook \u003d new BookBuilder(BOOK_1).withLoan(loan).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(loanedBook);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(BOOK_2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cBook\u003e overdueBooks \u003d modelManager.getOverdueBooks();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cBook\u003e expectedBooks \u003d modelManager.getCatalog()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .getBookList()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .filter(book -\u003e book.equals(BOOK_1))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(overdueBooks, expectedBooks);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getOverdueBooks_noOverdueBooks_returnEmptyList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // Book on loan but not overdue"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId \u003d new LoanId(VALID_LOAN_ID);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book toBeLoaned \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        BorrowerId currentBorrowerId \u003d new BorrowerId(VALID_BORROWER_ID);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loan \u003d new Loan(loanId, toBeLoaned.getSerialNumber(), currentBorrowerId,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addLoan(loan);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Book loanedBook \u003d new BookBuilder(BOOK_1).withLoan(loan).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(loanedBook);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(BOOK_2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cBook\u003e overdueBooks \u003d modelManager.getOverdueBooks();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(overdueBooks.isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // No books on loan"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.deleteBook(loanedBook);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.addBook(BOOK_1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        overdueBooks \u003d modelManager.getOverdueBooks();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(overdueBooks.isEmpty());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getServingBorrower_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e modelManager.getServingBorrower());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void getBorrowerBooks_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e modelManager.getBorrowerBooks());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void getBorrowerBooks_noBooksBorrowed_returnEmptyList() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new RegisterCommand(BOB).execute(modelManager);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerId validBorrowerId \u003d new BorrowerId(VALID_ID_BOB);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        new ServeCommand(validBorrowerId).execute(modelManager);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(modelManager.getBorrowerBooks().isEmpty());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerNewLoan_inServeMode_success() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager(getTypicalCatalog(), getTypicalLoanRecords(),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                getTypicalBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.setServingBorrower(ALICE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.servingBorrowerNewLoan(LOAN_1);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(modelManager.getServingBorrower().hasCurrentLoan(LOAN_1));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerNewLoan_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                modelManager.servingBorrowerNewLoan(LOAN_1));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerReturnLoan_inServeMode_success() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager(getTypicalCatalog(), getTypicalLoanRecords(),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                getTypicalBorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.setServingBorrower(ALICE);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.servingBorrowerNewLoan(LOAN_1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        modelManager.servingBorrowerReturnLoan(LOAN_1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(modelManager.getServingBorrower().hasCurrentLoan(LOAN_1));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void servingBorrowerReturnLoan_notInServeMode_throwsNotInServeModeException() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Model modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NotInServeModeException.class, () -\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                modelManager.servingBorrowerReturnLoan(LOAN_1));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalog \u003d new CatalogBuilder().withPerson(BOOK_1).withPerson(BOOK_2).build();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalogCopy \u003d new CatalogBuilder().withPerson(BOOK_1).withPerson(BOOK_2).build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog differentCatalog \u003d new Catalog();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UserPrefs userPrefsCopy \u003d new UserPrefs();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanRecords loanRecordsCopy \u003d new LoanRecords();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BorrowerRecords borrowerRecords \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        BorrowerRecords borrowerRecordsCopy \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        modelManager \u003d new ModelManager(catalog, loanRecords, borrowerRecords, userPrefs);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        ModelManager modelManagerCopy \u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new ModelManager(catalogCopy, loanRecordsCopy, borrowerRecordsCopy, userPrefsCopy);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCatalog, loanRecords, borrowerRecords, userPrefs)));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String keywords \u003d BOOK_1.getTitle().value;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        modelManager.updateFilteredBookList(new BookPredicate().setTitle(keywords));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCatalog, loanRecords, borrowerRecords, userPrefs)));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        modelManager.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        differentUserPrefs.setCatalogFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(catalog, loanRecords, borrowerRecords, differentUserPrefs)));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 16,
      "hoholyin": 51,
      "seeziyang": 110,
      "Cronyxx": 10,
      "-": 109,
      "shiyao821": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setUserSettings_nullUserSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setUserSettings(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setLoanRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setLoanRecordsFilePath(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setCatalogFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setCatalogFilePath(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void setBorrowerRecordsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setBorrowerRecordsFilePath(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 19,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/AuthorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class AuthorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Author(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals_sameAuthor_assertTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(new Author(VALID_AUTHOR_BOOK_1).equals(new Author(\"J K Rowling\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_author() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(new Author(VALID_AUTHOR_BOOK_1).toString().equals(\"J K Rowling\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameAuthor_assertsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author author1 \u003d new Author(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Author author2 \u003d new Author(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(author1.hashCode() \u003d\u003d author2.hashCode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void isValidAuthor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Author.isValidAuthor(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // space only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\"   \")); // spaces only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \u003c- is crazy\")); // space at start"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // starting with non-alphanumeric characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"A\")); // 1 Alphabet"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"0\")); // 1 Number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"3DExpert\")); // numbers only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Maxi+millan-lan*1/1~max`i\")); // +-*/~`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Porter D KG the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Susan Suriana with a load of ;\u003c\u003e|}[]{:\\\"!@#$%)^\u0026*(\u0027\")); // Punctuation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 32,
      "shiyao821": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_FICTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_NONFICTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "public class BookPredicateTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void isValid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has no conditions -\u003e false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.isValid());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has title condition -\u003e true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate.setTitle(VALID_TITLE_BOOK_1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has author condition -\u003e true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setAuthor(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has serialNumber condition -\u003e true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // has genres condition -\u003e true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.isValid());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate1 \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate2 \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same title condition -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate1Copy \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different title condition -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1.setAuthor(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1Copy.setAuthor(VALID_AUTHOR_BOOK_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate2.setAuthor(VALID_AUTHOR_BOOK_2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same author condition -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different author condition -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1.setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1Copy.setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate2.setSerialNumber(VALID_SERIAL_NUMBER_BOOK_2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same serialNumber condition -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different serialNumber condition -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1.setGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate1Copy.setGenres(VALID_GENRE_ACTION, VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate2.setGenres(VALID_GENRE_ACTION, VALID_GENRE_NONFICTION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // same genres condition, different order -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate1.equals(predicate1Copy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // different genres condition -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate1.equals(predicate2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_titleCondition_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(\"Harry\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"Harry Bob\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"haRry bOB\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_titleCondition_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setTitle(\"\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // white space keywords"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setTitle(\"  \"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setTitle(\"Carol\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withTitle(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"Harry Drew\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withTitle(\"Harry Carol\").build()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Keywords match serial number, author and genre, but does not match title"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(\"12345\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(\"Harry\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(b));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_authorCondition_returnsTrue() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setAuthor(\"Harry\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setAuthor(\"Harry Bob\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setAuthor(\"haRry bOB\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_authorCondition_returnsFalse() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setAuthor(\"\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // white space keywords"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setAuthor(\"  \"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setAuthor(\"Carol\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withAuthor(\"Harry Bob\").build()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setAuthor(\"Harry Drew\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withAuthor(\"Harry Carol\").build()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Keywords match title, serial number and genre, but does not match author"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setAuthor(\"Orange\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withAuthor(\"Apple\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(b));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_serialNumberCondition_returnsTrue() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1).build()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_serialNumberCondition_returnsFalse() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setSerialNumber(\"\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // white space keywords"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setSerialNumber(\"  \"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Keywords match title, author and genre, but does not match serial number"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(b));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_genresCondition_returnsTrue() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setGenres(VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Multiple keywords, different order"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(VALID_GENRE_ACTION, VALID_GENRE_FICTION);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void test_genresCondition_returnsFalse() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setGenres(\"\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // white space keywords"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BookPredicate().setGenres(\"  \"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Non-matching keyword will not pass"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BookPredicate predicate \u003d new BookPredicate().setGenres(VALID_GENRE_NONFICTION);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Only one matching keyword will not pass predicate"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(VALID_GENRE_ACTION, VALID_GENRE_NONFICTION);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // Mixed-case keywords allowed"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setGenres(\"ficTion\", \"Action\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withGenres(VALID_GENRE_FICTION, VALID_GENRE_ACTION).build()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // Keywords match title, author and serial number, but does not match genre"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        predicate \u003d new BookPredicate().setTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .setGenres(VALID_GENRE_NONFICTION);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Book b \u003d new BookBuilder().withTitle(VALID_TITLE_BOOK_1)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_1)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_1)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .withGenres(VALID_GENRE_FICTION)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(predicate.test(b));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 46,
      "shiyao821": 216
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOOK_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "//import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "//import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "//import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e book.getGenres().remove(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void noGenres_toString_noTagFieldDisplayed() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder().withGenres().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        boolean containsTag \u003d book.toString().contains(\"Genres\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(containsTag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void haveGenres_toString_haveTagFieldDisplayed() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book \u003d new BookBuilder().withGenres(\"Action\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        boolean containsTag \u003d book.toString().contains(\"Genres\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(containsTag);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void isSameBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // will return true if book is same, regardless of serial number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(BOOK_1.isSameBook(BOOK_1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.isSameBook(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different serial number and author -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook1 \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withAuthor(VALID_AUTHOR_BOOK_2).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.isSameBook(editedBook1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedBook1 \u003d new BookBuilder(BOOK_1).withTitle(VALID_TITLE_BOOK_2)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.isSameBook(editedBook1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same attributes, different serial number -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedBook1 \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(BOOK_1.isSameBook(editedBook1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same title, different serial number, different genre -\u003e isSameBook returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedBook1 \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withGenres(VALID_GENRE_ACTION).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.isSameBook(editedBook1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same attributes, different genres -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedBook1 \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedBook1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // compares all attributes"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book aliceCopy \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(BOOK_1.equals(aliceCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(BOOK_1.equals(BOOK_1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(5));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(BOOK_2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different name and serial number -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedA \u003d new BookBuilder(BOOK_1).withTitle(VALID_TITLE_BOOK_2)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedA));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different serial number -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedA \u003d new BookBuilder(BOOK_1).withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedA));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different author -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedA \u003d new BookBuilder(BOOK_1).withAuthor(VALID_AUTHOR_BOOK_2)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedA));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // different genres -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        editedA \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_BOOK_2).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(BOOK_1.equals(editedA));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameBookSameHashCode_assertTrue() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book1 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book2 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(book1.hashCode(), book2.hashCode());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getSerialNumber_sameBook_assertTrue() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book1 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(book1.getSerialNumber().equals(new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_book() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book book1 \u003d new BookBuilder(BOOK_1).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        StringBuilder genres \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        book1.getGenres().forEach(genre -\u003e genres.append(genre + \" \"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String stringRep \u003d book1.getTitle()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + \" Serial Number: \" + book1.getSerialNumber()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + \" Author: \" + book1.getAuthor()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + \" Genres: \" + genres.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String temp \u003d book1.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(book1.toString().equals(stringRep));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 139,
      "seeziyang": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/SerialNumberGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class SerialNumberGeneratorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void generateSerialNumber_newCatalog_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00001\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00002\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00003\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00004\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00005\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void generateSerialNumber_typicalCatalog_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(getTypicalCatalog());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00005\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void generateSerialNumber_nonConcurrentSerialNumber_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalog \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book newBook \u003d new BookBuilder().withTitle(\"testBook\").withSerialNumber(\"B00006\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(newBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00005\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00007\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    void generateSerialNumber_nullFloorKey_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book newBook \u003d new BookBuilder().withTitle(\"testBook\").withSerialNumber(\"B00006\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(newBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00001\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SerialNumberGenerator.generateSerialNumber(), new SerialNumber(\"B00002\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 47,
      "seeziyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/SerialNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BOOK_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_ACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENRE_DESC_FICTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BOOK_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class SerialNumberTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SerialNumber(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_invalidSerialNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String invalidSerialNumber \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SerialNumber(invalidSerialNumber));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void isValidSerialNumber() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SerialNumber.isValidSerialNumber(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // invalid serial numbers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"B91\")); // less than 5 numbers"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"C00001\")); // different prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // valid serial numbers"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"B00911\")); // exactly 5 numbers"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"B00001\")); // smallest serial number"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"B99099\")); // largest serial number"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addSerialNumber_notUnique_assertCommandExceptionThrown() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalog \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(catalog);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCatalog(), new LoanRecords(), new BorrowerRecords(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Serial number B0002 is already in typical catalog"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book validBook2 \u003d new BookBuilder(BOOK_2).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertCommandExceptionThrown(addCommand, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void addSerialNumber_unique_assertParseSuccess() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(BOOK_2).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        //Serial number B0002 of BOOK_2 is not in empty new catalog"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOOK_2 + SERIAL_NUMBER_DESC_BOOK_2 + AUTHOR_DESC_BOOK_2"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                + GENRE_DESC_ACTION + GENRE_DESC_FICTION, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_correctStringRepresentation_assertTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumberGenerator.setCatalog(new Catalog());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(SerialNumberGenerator.generateSerialNumber().toString().equals(\"B00001\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals_sameSerialNumber_assertTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn1 \u003d new SerialNumber(\"B00001\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn2 \u003d new SerialNumber(\"B00001\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(sn1.equals(sn2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameSerialNumberSameHashCode_assertTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn1 \u003d new SerialNumber(\"B00001\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        SerialNumber sn2 \u003d new SerialNumber(\"B00001\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(sn1.hashCode() \u003d\u003d sn2.hashCode());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Asserts if CommandException is being thrown."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param command command to be executed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @param model model to be tested on."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void assertCommandExceptionThrown(AddCommand command, Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 118,
      "seeziyang": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // space only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(Title.isValidTitle(\"   \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \u003c- is crazy\")); // space at start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // starting with non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"A\")); // 1 Alphabet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"0\")); // 1 Number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Math for computers +-*/~`\")); // +-*/~`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Title.isValidTitle(\"My Tale: A Story of Blah-blah \u0026 \\\"!@#$%)^\u0026*(\u0027\")); // Punctuation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 37,
      "shiyao821": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/UniqueBookListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENRE_ACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class UniqueBookListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private final UniqueBookList uniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void contains_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void contains_bookNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(uniqueBookList.contains(BOOK_1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void contains_bookInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(uniqueBookList.contains(BOOK_1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void contains_bookWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedBook1 \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(uniqueBookList.contains(editedBook1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void add_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void add_duplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.add(BOOK_1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_nullTargetBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(null, BOOK_1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_nullEditedBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(BOOK_1, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_targetBookNotInList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.setBook(BOOK_1, BOOK_1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_editedBookIsSameBook_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBook(BOOK_1, BOOK_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_editedBookHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(BOOK_1).withGenres(VALID_GENRE_ACTION)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBook(BOOK_1, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_editedBookHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBook(BOOK_1, BOOK_2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(BOOK_2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBook_editedBookHasNonUniqueIdentity_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBook(BOOK_1, BOOK_2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void remove_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void remove_bookDoesNotExist_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.remove(BOOK_1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void remove_existingBook_removesBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.remove(BOOK_1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_nullUniqueBookList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((UniqueBookList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_uniqueBookList_replacesOwnListWithProvidedUniqueBookList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(BOOK_2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBooks(expectedUniqueBookList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((List\u003cBook\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.add(BOOK_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e bookList \u003d Collections.singletonList(BOOK_2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        uniqueBookList.setBooks(bookList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        expectedUniqueBookList.add(BOOK_2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void setBooks_listWithDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cBook\u003e listWithDuplicateBooks \u003d Arrays.asList(BOOK_1, BOOK_1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBooks(listWithDuplicateBooks));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            -\u003e uniqueBookList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/BorrowerIdGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerIdGeneratorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void generateBorrowerId_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerRecords borrowers \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(borrowers);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0001\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0002\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0003\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertEquals(BorrowerIdGenerator.generateBorrowerId(), new BorrowerId(\"K0004\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    void checkBorrowerIdExists() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerRecords borrowers \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        BorrowerIdGenerator.setBorrowers(borrowers);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerIdGenerator.borrowerIdExists(new BorrowerId(\"K0001\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        //returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Borrower borrower \u003d new BorrowerBuilder().actualBuild();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowers.addBorrower(borrower);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(BorrowerIdGenerator.borrowerIdExists(new BorrowerId(\"K0001\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 33,
      "seeziyang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/BorrowerIdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BorrowerId(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void constructor_invalidBorrowerId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String invalidBorrowerId \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BorrowerId(invalidBorrowerId));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void isValidBorrowerId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null borrower ID;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BorrowerId.isValidBorrowerId(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // invalid borrower ID"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"K91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"BorrowerId\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(BorrowerId.isValidBorrowerId(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // valid BorrowerId numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(BorrowerId.isValidBorrowerId(\"K0911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(BorrowerId.isValidBorrowerId(\"K0001\")); //smallest Borrower ID"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(BorrowerId.isValidBorrowerId(\"K9999\")); // largest Borrower ID"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/BorrowerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.testutil.BorrowerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(ALICE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.isSameBorrower(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower editedAlice \u003d new BorrowerBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different borrowerId, -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withBorrowerId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.isSameBorrower(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower aliceCopy \u003d new BorrowerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower editedAlice \u003d new BorrowerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        // different BorrowerId -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        editedAlice \u003d new BorrowerBuilder(ALICE).withBorrowerId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public void toString_borrower() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower alice \u003d new BorrowerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String stringRep \u003d alice.getName()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                + \" Phone: \" + alice.getPhone()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                + \" Email: \" + alice.getEmail()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "                + \" Borrower Id: \" + alice.getBorrowerId();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        String temp \u003d alice.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertTrue(temp.equals(stringRep));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashCode_sameBorrowerSameHashCode_assertTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower1 \u003d new BorrowerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        Borrower borrower2 \u003d new BorrowerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(borrower1.hashCode(), borrower2.hashCode());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 99,
      "hoholyin": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/borrower/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.model.borrower;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/genre/GenreTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.genre;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class GenreTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Genre(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void constructor_invalidGenreName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        String invalidGenreName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Genre(invalidGenreName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void constructor_convertsUppercase() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        Genre genre \u003d new Genre(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(genre.genreName.equals(\"TEST\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void isValidGenreName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // null genre name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Genre.isValidGenreName(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\" \")); // space only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"   \")); // spaces only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\" A\")); // space at start"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"^\")); // starting with non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"peteromollie\")); // lowercase"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"CapitalTan\")); // CamelCase"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\";[]{}|\u003c\u003e.,:?\\\"!@#$%)^\u0026*(\u0027\")); // Punctuation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"Operations +-*/~`\")); // +-*/~`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertFalse(Genre.isValidGenreName(\"PETER*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"A\")); // 1 Alphabet"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"0\")); // 1 Number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"FICTION\")); // UPPERCASE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertTrue(Genre.isValidGenreName(\"NON-FICTION\")); // UPPERCASE with hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 4,
      "-": 17,
      "shiyao821": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/loan/LoanIdGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoanRecords;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanIdGeneratorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void generateLoanId_noLoanRecords_firstLoanId() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.setLoanRecords(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LoanIdGenerator.generateLoanId(), new LoanId(\"L000001\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void generateLoanId_emptyLoanRecords_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.setLoanRecords(new LoanRecords());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LoanIdGenerator.generateLoanId(), new LoanId(\"L000001\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void generateLoanId_typicalLoanRecords_autoGenerateSuccess() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanIdGenerator.setLoanRecords(getTypicalLoanRecords());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(LoanIdGenerator.generateLoanId(), new LoanId(\"L000007\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/loan/LoanIdTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanIdTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanId(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void constructor_invalidLoanId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String invalidLoanId \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new LoanId(invalidLoanId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void isValidLoanId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null loan ID"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e LoanId.isValidLoanId(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // invalid loan IDs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"L91\")); // less than 6 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"L1234567\")); // more than 6 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"C000001\")); // different prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"loanId\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"L123a56\")); // alphabets within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"L123 456\")); // spaces within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // valid loan IDs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"L000911\")); // exactly 6 numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"L000001\")); // smallest loan ID"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"L999999\")); // largest loan ID"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void toString_correctStringRepresentation_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String loanIdString \u003d \"L123456\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(new LoanId(loanIdString).toString(), loanIdString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals_sameLoanId_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String loanIdString \u003d \"L123456\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(new LoanId(loanIdString), new LoanId(loanIdString));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void hashCode_sameLoanIdSameHashCode_assertEquals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String loanIdString \u003d \"L123456\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId1 \u003d new LoanId(loanIdString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanId loanId2 \u003d new LoanId(loanIdString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanId1.hashCode(), loanId2.hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/loan/LoanListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoans;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "class LoanListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList \u003d new LoanList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        List\u003cLoan\u003e typicalLoans \u003d getTypicalLoans();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        for (int i \u003d 0; i \u003c typicalLoans.size(); i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            loanList.add(typicalLoans.get(i));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            assertEquals(loanList.size(), i + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void size() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList \u003d new LoanList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList.size(), 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList.add(LOAN_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList.size(), 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList \u003d new LoanList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList.add(LOAN_1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanList.contains(LOAN_1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanList.contains(LOAN_2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void addToNewCopy() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList1 \u003d new LoanList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList2 \u003d loanList1.addToNewCopy(LOAN_2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList1, loanList2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotSame(loanList1, loanList2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void removeFromNewCopy() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList1 \u003d new LoanList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanList1.add(LOAN_2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanList loanList2 \u003d loanList1.removeFromNewCopy(LOAN_2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanList2.size(), 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertNotEquals(loanList1, loanList2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/loan/LoanTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BORROWER_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BOOK_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanA \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanA.equals(loanA));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanB \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanA.equals(loanB));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanA.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanA.equals(123));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different serial number -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanC \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_2),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanA.equals(loanC));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different borrower ID -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanD \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_ID_AMY), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanA.equals(loanD));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanE \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID), DateUtil.getTodayPlusDays(14), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanA.equals(loanE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanF \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(14));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertFalse(loanA.equals(loanF));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void hashCode_sameLoanSameHashCode_assertEquals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanA \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanB \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertEquals(loanA.hashCode(), loanB.hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void toString_correctStringRepresentation_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        Loan loanA \u003d new Loan(new LoanId(\"L123456\"), new SerialNumber(VALID_SERIAL_NUMBER_BOOK_1),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new BorrowerId(VALID_BORROWER_ID), DateUtil.getTodayDate(), DateUtil.getTodayPlusDays(30));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        // TODO CHANGE ALL TO USE LOANBUILDER AND VALID_LOAN_ID"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        String stringRep \u003d \"Loan ID: \" + \"L123456\" + \" Book Serial Number: \" + VALID_SERIAL_NUMBER_BOOK_1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + \" Borrower ID: \" + VALID_BORROWER_ID + \" Loaned from \" + DateUtil.getTodayDate()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                + \" to \" + DateUtil.getTodayPlusDays(30);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        assertTrue(loanA.toString().equals(stringRep));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/usersettings/FineIncrementTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class FineIncrementTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int TEST_FINE_INCREMENT \u003d 500;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FineIncrement(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_invalidFineIncrement_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String invalidFineIncrement \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FineIncrement(invalidFineIncrement));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void isValidFineIncrement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // null fineIncrement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FineIncrement.isValidFineIncrement(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid fineIncrement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"hello*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"hello world\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(FineIncrement.isValidFineIncrement(\"-1\")); // negative integer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // valid fineIncrement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertTrue(FineIncrement.isValidFineIncrement(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(fi.toString(), String.format(\"%d\", TEST_FINE_INCREMENT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi1 \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi2 \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi3 \u003d new FineIncrement(TEST_FINE_INCREMENT + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(fi1, fi2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(fi1, fi3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi1 \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        FineIncrement fi2 \u003d new FineIncrement(TEST_FINE_INCREMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(fi1.hashCode(), fi2.hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 26,
      "Cronyxx": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/usersettings/LoanPeriodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class LoanPeriodTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int TEST_LOAN_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LoanPeriod(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_invalidLoanPeriod_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String invalidLoanPeriod \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new LoanPeriod(invalidLoanPeriod));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void isValidLoanPeriod() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // null loanPeriod"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e LoanPeriod.isValidLoanPeriod(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loanPeriod"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"hello*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"hello world\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(LoanPeriod.isValidLoanPeriod(\"-1\")); // negative integer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // valid loanPeriod"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertTrue(LoanPeriod.isValidLoanPeriod(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(lp.toString(), String.format(\"%d\", TEST_LOAN_PERIOD));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp1 \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp2 \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp3 \u003d new LoanPeriod(TEST_LOAN_PERIOD + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(lp1, lp2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(lp1, lp3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp1 \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        LoanPeriod lp2 \u003d new LoanPeriod(TEST_LOAN_PERIOD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(lp1.hashCode(), lp2.hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 25,
      "Cronyxx": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/usersettings/RenewPeriodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.model.usersettings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class RenewPeriodTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final int TEST_RENEW_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RenewPeriod(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void constructor_invalidRenewPeriod_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        String invalidRenewPeriod \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new LoanPeriod(invalidRenewPeriod));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public void isValidRenewPeriod() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // null renewPeriod"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RenewPeriod.isValidRenewPeriod(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // invalid loanPeriod"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"hello*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"hello world\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertFalse(RenewPeriod.isValidRenewPeriod(\"-1\")); // negative integer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        // valid renewPeriod"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        assertTrue(RenewPeriod.isValidRenewPeriod(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(rp.toString(), String.format(\"%d\", TEST_RENEW_PERIOD));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp1 \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp2 \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp3 \u003d new RenewPeriod(TEST_RENEW_PERIOD + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(rp1, rp2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotEquals(rp1, rp3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp1 \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        RenewPeriod rp2 \u003d new RenewPeriod(TEST_RENEW_PERIOD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(rp1.hashCode(), rp2.hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 25,
      "Cronyxx": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SampleDataUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "class SampleDataUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getSampleCatalog_containsSampleBooks() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog sampleAb \u003d new Catalog();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Arrays.stream(SampleDataUtil.getSampleBooks()).forEach(book -\u003e sampleAb.addBook(book));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(sampleAb, SampleDataUtil.getSampleCatalog());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getSampleLoanRecords_returnLoanRecords() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // update when we have sample loan records"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SampleDataUtil.getSampleLoanRecords(), new LoanRecords());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void getSampleBorrowerRecords_returnBorrowerRecords() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        // update when we have sample loan records"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(SampleDataUtil.getSampleBorrowerRecords(), new BorrowerRecords());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        userPrefs.setCatalogFilePath(Paths.get(\"catalog.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.testutil.TypicalBorrowers.getTypicalBorrowerRecords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.getTypicalLoanRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.model.ReadOnlyBorrowerRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.ReadOnlyLoanRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.borrowerrecords.JsonBorrowerRecordsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.storage.catalog.JsonCatalogStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.storage.loanrecords.JsonLoanRecordsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonCatalogStorage catalogStorage \u003d new JsonCatalogStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonLoanRecordsStorage loanRecordsStorage \u003d new JsonLoanRecordsStorage(getTempFilePath(\"lr\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        JsonBorrowerRecordsStorage borrowerRecordsStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                new JsonBorrowerRecordsStorage(getTempFilePath(\"br\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                userPrefsStorage, loanRecordsStorage, catalogStorage, borrowerRecordsStorage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void catalogReadSave() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * {@link JsonCatalogStorage} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * More extensive testing of Catalog saving/reading is done in {@link JsonCatalogStorageTest} class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog original \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storageManager.saveCatalog(original);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReadOnlyCatalog retrieved \u003d storageManager.readCatalog(new LoanRecords()).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(original, new Catalog(retrieved));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public void loanRecordsReadSave() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * {@link JsonLoanRecordsStorage} class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * More extensive testing of LoanRecords saving/reading is done in {@link JsonLoanRecordsStorageTest} class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        LoanRecords original \u003d getTypicalLoanRecords();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storageManager.saveLoanRecords(original);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        ReadOnlyLoanRecords retrieved \u003d storageManager.readLoanRecords().get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertEquals(original, new LoanRecords(retrieved));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void borrowerRecordsReadSave() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * {@link JsonBorrowerRecordsStorage} class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * More extensive testing of BorrowerRecords saving/reading is done in"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         * {@link JsonBorrowerRecordsStorageTest} class."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecords original \u003d getTypicalBorrowerRecords();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        storageManager.saveBorrowerRecords(original);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReadOnlyBorrowerRecords retrieved \u003d storageManager.readBorrowerRecords(new LoanRecords()).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertEquals(original, new BorrowerRecords(retrieved));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public void getAllFilePaths() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertNotNull(storageManager.getCatalogFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertNotNull(storageManager.getLoanRecordsFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertNotNull(storageManager.getBorrowerRecordsFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        assertNotNull(storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 6,
      "seeziyang": 7,
      "-": 55,
      "shiyao821": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/catalog/JsonAdaptedBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import static seedu.address.storage.catalog.JsonAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class JsonAdaptedBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"\u0026HarryBotter\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String INVALID_SERIAL_NUMBER \u003d \"+651234a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String INVALID_GENRE \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String NO_LOAN \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_TITLE \u003d BOOK_1.getTitle().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_SERIAL_NUMBER \u003d BOOK_1.getSerialNumber().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final String VALID_AUTHOR \u003d BOOK_1.getAuthor().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_GENRES \u003d BOOK_1.getGenres().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_validBookDetails_returnsBook() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(BOOK_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(BOOK_1, book.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonAdaptedBook(INVALID_TITLE, VALID_SERIAL_NUMBER, VALID_AUTHOR, NO_LOAN, VALID_GENRES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(null, VALID_SERIAL_NUMBER, VALID_AUTHOR, NO_LOAN,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                VALID_GENRES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_invalidSerialNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook person \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonAdaptedBook(VALID_TITLE, INVALID_SERIAL_NUMBER, VALID_AUTHOR, NO_LOAN, VALID_GENRES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d SerialNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_nullSerialNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook person \u003d new JsonAdaptedBook(VALID_TITLE, null, VALID_AUTHOR, NO_LOAN,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                VALID_GENRES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, SerialNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_nullAuthor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook person \u003d new JsonAdaptedBook(VALID_TITLE, VALID_SERIAL_NUMBER, null, NO_LOAN,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                VALID_GENRES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_invalidGenres_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_GENRES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_GENRE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonAdaptedBook person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                new JsonAdaptedBook(VALID_TITLE, VALID_SERIAL_NUMBER, VALID_AUTHOR, NO_LOAN, invalidTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 83,
      "shiyao821": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/catalog/JsonCatalogStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOK_6;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalCatalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.ReadOnlyCatalog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class JsonCatalogStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCatalogStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void readCatalog_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCatalog(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCatalog\u003e readCatalog(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new JsonCatalogStorage(Paths.get(filePath)).readCatalog(addToTestDataPathIfNotNull(filePath),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "                new LoanRecords());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertFalse(readCatalog(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCatalog(\"notJsonFormatCatalog.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCatalog(\"invalidBookCatalog.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCatalog(\"invalidAndValidBookCatalog.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCatalog.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog original \u003d getTypicalCatalog();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonCatalogStorage jsonAddressBookStorage \u003d new JsonCatalogStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        jsonAddressBookStorage.saveCatalog(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        ReadOnlyCatalog readBack \u003d jsonAddressBookStorage.readCatalog(filePath, new LoanRecords()).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(original, new Catalog(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        original.addBook(BOOK_5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        original.removeBook(BOOK_2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        jsonAddressBookStorage.saveCatalog(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readCatalog(filePath, new LoanRecords()).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(original, new Catalog(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        original.addBook(BOOK_6);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        jsonAddressBookStorage.saveCatalog(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readCatalog(new LoanRecords()).get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(original, new Catalog(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private void saveAddressBook(ReadOnlyCatalog addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            new JsonCatalogStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                    .saveCatalog(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new Catalog(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 27,
      "seeziyang": 6,
      "-": 73,
      "shiyao821": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/catalog/JsonSerializableCatalogTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "package seedu.address.storage.catalog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class JsonSerializableCatalogTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCatalogTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path TYPICAL_BOOKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBookCatalog.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path INVALID_BOOKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookCatalog.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private static final Path DUPLICATE_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookCatalog.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_typicalBooksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonSerializableCatalog dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                JsonSerializableCatalog.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog catalogFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog typicalPersonsCatalog \u003d TypicalBooks.getTypicalCatalog();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertEquals(catalogFromFile, typicalPersonsCatalog);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_invalidBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonSerializableCatalog dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOKS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                JsonSerializableCatalog.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public void toModelType_duplicateBooks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        JsonSerializableCatalog dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                JsonSerializableCatalog.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCatalog.MESSAGE_DUPLICATE_BOOK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 20,
      "-": 26,
      "shiyao821": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class to help with building Book objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BookBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Harry Botter\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String DEFAULT_SERIAL_NUMBER \u003d \"B00001\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final String DEFAULT_AUTHOR \u003d \"J K Rowling\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Optional\u003cLoan\u003e loan;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Set\u003cGenre\u003e genres;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        serialNumber \u003d new SerialNumber(DEFAULT_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        author \u003d new Author(DEFAULT_AUTHOR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loan \u003d Optional.ofNullable(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        genres \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Initializes the BookBuilder with the data of {@code bookToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder(Book bookToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        title \u003d bookToCopy.getTitle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        serialNumber \u003d bookToCopy.getSerialNumber();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        author \u003d bookToCopy.getAuthor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        loan \u003d bookToCopy.getLoan();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        genres \u003d new HashSet\u003c\u003e(bookToCopy.getGenres());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code Title} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withTitle(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.title \u003d new Title(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses the {@code genres} into a {@code Set\u003cGenre\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withGenres(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        this.genres \u003d SampleDataUtil.getGenreSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.serialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code Loan} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withLoan(Loan loan) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.loan \u003d Optional.of(loan);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code Author} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public BookBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.author \u003d new Author(author);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns a Book object based on specified fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * @return Book object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Book build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Loan loanValue;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (!loan.isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            loanValue \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            loanValue \u003d loan.get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new Book(title, serialNumber, author, loanValue, genres);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 100,
      "Cronyxx": 2,
      "shiyao821": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class for Book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class BookUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static String getAddCommand(Book book) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(book);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns an find command string for finding the {@code person}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static String getFindCommand(Book book) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return FindCommand.COMMAND_WORD + \" \" + getPersonDetails(book);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static String getPersonDetails(Book book) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        sb.append(PREFIX_TITLE + book.getTitle().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        sb.append(PREFIX_SERIAL_NUMBER + book.getSerialNumber().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        sb.append(PREFIX_AUTHOR + book.getAuthor().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        book.getGenres().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            s -\u003e sb.append(PREFIX_GENRE + s.genreName + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditCommand.EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.getSerialNumber().ifPresent(serialNumber -\u003e sb.append(PREFIX_SERIAL_NUMBER)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                .append(serialNumber.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.getAuthor().ifPresent(author -\u003e sb.append(PREFIX_AUTHOR).append(author.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        if (descriptor.getGenres().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            Set\u003cGenre\u003e genres \u003d descriptor.getGenres().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            if (genres.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "                sb.append(PREFIX_GENRE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "                genres.forEach(s -\u003e sb.append(PREFIX_GENRE).append(s.genreName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 57,
      "Cronyxx": 1,
      "shiyao821": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BorrowerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * A utility class to help with building Borrower objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class BorrowerBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Amy Anyhow\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String DEFAULT_BORROWER_ID \u003d \"K0001\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"amyanyhow@api.com\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String DEFAULT_PHONE_NUMBER \u003d \"62226111\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private BorrowerId borrowerId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanList currentLoanList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanList returnedLoanList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE_NUMBER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerId \u003d new BorrowerId(DEFAULT_BORROWER_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        currentLoanList \u003d new LoanList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        returnedLoanList \u003d new LoanList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder(Borrower borrowerToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        name \u003d borrowerToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        phone \u003d borrowerToCopy.getPhone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        email \u003d borrowerToCopy.getEmail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        borrowerId \u003d borrowerToCopy.getBorrowerId();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        currentLoanList \u003d borrowerToCopy.getCurrentLoanList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        returnedLoanList \u003d borrowerToCopy.getReturnedLoanList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Name} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Phone} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code Email} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     * Sets the {@code BorrowerID} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public BorrowerBuilder withBorrowerId(String id) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        this.borrowerId \u003d new BorrowerId(id);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Adds a current Loan to the {@code currentLoanList} of the {@code Borrower} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public BorrowerBuilder withCurrentLoan(Loan loan) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.currentLoanList.add(loan);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public Borrower build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Borrower(name, phone, email, borrowerId, currentLoanList, returnedLoanList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Borrower actualBuild() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "        return new Borrower(name, phone, email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 75,
      "seeziyang": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CatalogBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "// TODO EDIT THIS"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class CatalogBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private Catalog catalog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CatalogBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog \u003d new Catalog();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CatalogBuilder(Catalog catalog) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.catalog \u003d catalog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public CatalogBuilder withPerson(Book book) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        catalog.addBook(book);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public Catalog build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return catalog;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 34,
      "seeziyang": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBookDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.genre.Genre;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class EditBookDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private EditCommand.EditBookDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditBookDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor \u003d new EditCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditBookDescriptorBuilder(EditCommand.EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditBookDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditBookDescriptorBuilder(Book book) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor \u003d new EditCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.setTitle(book.getTitle());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.setSerialNumber(book.getSerialNumber());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.setAuthor(book.getAuthor());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.setGenres(book.getGenres());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditBookDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditBookDescriptorBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.setSerialNumber(new SerialNumber(serialNumber));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Sets the {@code Author} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditBookDescriptorBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.setAuthor(new Author(author));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cGenre\u003e} and set it to the {@code EditBookDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditBookDescriptorBuilder withGenres(String... genres) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Set\u003cGenre\u003e genreSet \u003d Stream.of(genres).map(Genre::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        descriptor.setGenres(genreSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public EditCommand.EditBookDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LoanBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.BookBuilder.DEFAULT_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.BorrowerBuilder.DEFAULT_BORROWER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.book.SerialNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.borrower.BorrowerId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.LoanId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * A utility class to help with building Loan objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class LoanBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DEFAULT_LOAN_ID \u003d \"L000001\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"2019-10-13\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final String DEFAULT_DUE_DATE \u003d \"2019-10-27\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LoanId loanId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private SerialNumber bookSerialNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private BorrowerId borrowerId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private LocalDate dueDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Empty argument constructor to initialise LoanBuilder with default values for the fields."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanId \u003d new LoanId(DEFAULT_LOAN_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        bookSerialNumber \u003d new SerialNumber(DEFAULT_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerId \u003d new BorrowerId(DEFAULT_BORROWER_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        startDate \u003d LocalDate.parse(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        dueDate \u003d LocalDate.parse(DEFAULT_DUE_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Constructor that uses another Loan object to copy its values from."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @param loanToCopy {@code Loan} object to copy values from."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder(Loan loanToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        loanId \u003d loanToCopy.getLoanId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        bookSerialNumber \u003d loanToCopy.getBookSerialNumber();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        borrowerId \u003d loanToCopy.getBorrowerId();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        startDate \u003d loanToCopy.getStartDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        dueDate \u003d loanToCopy.getDueDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the {@code LoanId} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withLoanId(String loanId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.loanId \u003d new LoanId(loanId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code Loan} we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.bookSerialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the {@code BorrowerId} of the {@code Loan} we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withBorrowerId(String borrowerId) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.borrowerId \u003d new BorrowerId(borrowerId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the starting date of the {@code Loan} we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.startDate \u003d LocalDate.parse(startDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Sets the due date of the {@code Loan} we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public LoanBuilder withDueDate(String dueDate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        this.dueDate \u003d LocalDate.parse(dueDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a Loan object based on specified fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * @return {@code Loan} object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public Loan build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new Loan(loanId, bookSerialNumber, borrowerId, startDate, dueDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SetUserSettingsDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class to help with building SetUserSettingsDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class SetUserSettingsDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private SetCommand.SetUserSettingsDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetCommand.SetUserSettingsDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder(SetCommand.SetUserSettingsDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.descriptor \u003d new SetCommand.SetUserSettingsDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns an {@code SetUserSettingsDescriptor} with fields containing {@code UserSettings}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder(UserSettings userSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor \u003d new SetCommand.SetUserSettingsDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setLoanPeriod(new LoanPeriod(userSettings.getLoanPeriod()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setRenewPeriod(new RenewPeriod(userSettings.getRenewPeriod()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setFineIncrement(new FineIncrement(userSettings.getFineIncrement()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code LoanPeriod} of the {@code SetUserSettingsDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder withLoanPeriod(String loanPeriod) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setLoanPeriod(new LoanPeriod(loanPeriod));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code RenewPeriod} of the {@code SetUserSettingsDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder withRenewPeriod(String renewPeriod) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setRenewPeriod(new RenewPeriod(renewPeriod));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code FineIncrement} of the {@code SetUserSettingsDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetUserSettingsDescriptorBuilder withFineIncrement(String fineIncrement) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.setFineIncrement(new FineIncrement(fineIncrement));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public SetCommand.SetUserSettingsDescriptor build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Book getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return model.getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBooks.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.Catalog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoholyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "public class TypicalBooks {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_1 \u003d new BookBuilder().withTitle(\"Harry Botter\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withSerialNumber(\"B00001\").withAuthor(\"J K Rowling\").withGenres(\"FICTION\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_2 \u003d new BookBuilder().withTitle(\"Legend of the Condor Heroes\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withAuthor(\"Jin Yong\").withSerialNumber(\"B00002\").withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_3 \u003d new BookBuilder().withTitle(\"Animal the Farm\").withSerialNumber(\"B00003\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withAuthor(\"George Orwell\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_4 \u003d new BookBuilder().withTitle(\"Harri Botter and the Full Blood Prince\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withSerialNumber(\"B00004\").withAuthor(\"J K Rowling\").withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_5 \u003d new BookBuilder().withTitle(\"The Heavenly Sword and the Dragon Saber\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withSerialNumber(\"B00005\").withAuthor(\"Jin Yong\").withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Book BOOK_6 \u003d new BookBuilder().withTitle(\"My Book\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            .withSerialNumber(\"B00006\").withAuthor(\"Jin Yong\").withGenres(\"FICTION\", \"ACTION\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Book BOOK_7 \u003d new BookBuilder().withTitle(\"The Hunger Games\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withSerialNumber(\"B00007\").withAuthor(\"Suzanne Collins\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withGenres(\"FICTION\", \"ACTION\").withLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    private TypicalBooks() {} // prevents instantiation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a {@code Catalog} with all the typical books."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static Catalog getTypicalCatalog() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        Catalog ab \u003d new Catalog();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            ab.addBook(book);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static List\u003cBook\u003e getTypicalBooks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BOOK_1, BOOK_2, BOOK_3, BOOK_4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 38,
      "seeziyang": 6,
      "shiyao821": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBorrowers.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LOAN_7;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "import seedu.address.model.BorrowerRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "import seedu.address.model.borrower.Borrower;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " * A utility class containing a list of {@code Borrower} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "public class TypicalBorrowers {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower ALICE \u003d new BorrowerBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withBorrowerId(\"K0001\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower BENSON \u003d new BorrowerBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withBorrowerId(\"K0002\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower CARL \u003d new BorrowerBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"heinz@example.com\").withBorrowerId(\"K0003\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower DANIEL \u003d new BorrowerBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withBorrowerId(\"K0004\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower ELLE \u003d new BorrowerBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"werner@example.com\").withBorrowerId(\"K0005\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower FIONA \u003d new BorrowerBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"lydia@example.com\").withBorrowerId(\"K0006\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower GEORGE \u003d new BorrowerBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "            .withEmail(\"anna@example.com\").withBorrowerId(\"K0007\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower HOON \u003d new BorrowerBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower IDA \u003d new BorrowerBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withEmail(\"hans@example.com\").withBorrowerId(\"K0009\").withCurrentLoan(LOAN_7).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower AMY \u003d new BorrowerBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final Borrower BOB \u003d new BorrowerBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withBorrowerId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    private TypicalBorrowers() {} // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     * Returns an {@code BorrowerRecords} with all the typical persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    public static BorrowerRecords getTypicalBorrowerRecords() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        BorrowerRecords br \u003d new BorrowerRecords();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        for (Borrower borrower : getTypicalBorrowers()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "            br.addBorrower(borrower);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "        return br;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shiyao821"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shiyao821"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "    public static List\u003cBorrower\u003e getTypicalBorrowers() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoholyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linyutinglyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linyutinglyt": 49,
      "hoholyin": 11,
      "seeziyang": 2,
      "shiyao821": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Index INDEX_FIRST_BOOK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Index INDEX_SECOND_BOOK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoholyin"
        },
        "content": "    public static final Index INDEX_THIRD_BOOK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoholyin": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLoans.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.LoanRecords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "import seedu.address.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " * A utility class containing a list of {@code Loan} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seeziyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "public class TypicalLoans {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_1 \u003d new LoanBuilder().withLoanId(\"L000001\").withSerialNumber(\"B00001\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0001\").withStartDate(\"2019-10-13\").withDueDate(\"2019-10-27\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_2 \u003d new LoanBuilder().withLoanId(\"L000002\").withSerialNumber(\"B00002\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0002\").withStartDate(\"2019-09-01\").withDueDate(\"2019-10-15\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_3 \u003d new LoanBuilder().withLoanId(\"L000003\").withSerialNumber(\"B00003\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0003\").withStartDate(\"2019-10-20\").withDueDate(\"2019-11-03\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_4 \u003d new LoanBuilder().withLoanId(\"L000004\").withSerialNumber(\"B00004\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0004\").withStartDate(\"2019-11-05\").withDueDate(\"2019-11-19\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_5 \u003d new LoanBuilder().withLoanId(\"L000005\").withSerialNumber(\"B00005\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0005\").withStartDate(\"2019-08-09\").withDueDate(\"2019-08-23\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_6 \u003d new LoanBuilder().withLoanId(\"L000006\").withSerialNumber(\"B00006\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0006\").withStartDate(\"2019-09-20\").withDueDate(\"2019-10-20\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static final Loan LOAN_7 \u003d new LoanBuilder().withLoanId(\"L000007\").withSerialNumber(\"B00007\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "            .withBorrowerId(\"K0009\").withStartDate(\"2019-10-13\").withDueDate(\"2019-10-27\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    private TypicalLoans() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static List\u003cLoan\u003e getTypicalLoans() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LOAN_1, LOAN_2, LOAN_3, LOAN_4, LOAN_5, LOAN_6));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seeziyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     * Returns a {@code LoanRecords} with all the typical Loans."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    public static LoanRecords getTypicalLoanRecords() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        LoanRecords loanRecords \u003d new LoanRecords();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        getTypicalLoans().forEach(loan -\u003e loanRecords.addLoan(loan));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "        return loanRecords;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seeziyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seeziyang": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalUserSettings.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FINE_INCREMENT_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOAN_PERIOD_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class containing a list of {@code UserSettings} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class TypicalUserSettings {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final UserSettings PARTIAL_USER_SETTINGS_1 \u003d new UserSettingsBuilder()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withLoanPeriod(VALID_LOAN_PERIOD_1)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withFineIncrement(VALID_FINE_INCREMENT_1)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final UserSettings USER_SETTINGS_1 \u003d new UserSettingsBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withLoanPeriod(\"7\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withRenewPeriod(\"7\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withFineIncrement(\"50\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final UserSettings USER_SETTINGS_2 \u003d new UserSettingsBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withLoanPeriod(\"14\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withRenewPeriod(\"14\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .withFineIncrement(\"50\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private TypicalUserSettings() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserSettingsBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.FineIncrement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.LoanPeriod;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.model.usersettings.RenewPeriod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class to help with building UserSettings objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UserSettingsBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final int DEFAULT_LOAN_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final int DEFAULT_RENEW_PERIOD \u003d 14;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static final int DEFAULT_FINE_INCREMENT \u003d 10;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private LoanPeriod loanPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private RenewPeriod renewPeriod;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    private FineIncrement fineIncrement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        loanPeriod \u003d new LoanPeriod(DEFAULT_LOAN_PERIOD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        renewPeriod \u003d new RenewPeriod(DEFAULT_RENEW_PERIOD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        fineIncrement \u003d new FineIncrement(DEFAULT_FINE_INCREMENT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Initializes the UserSettingsBuilder with the data of {@code userSettingsToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder(UserSettings userSettingsToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        loanPeriod \u003d new LoanPeriod(userSettingsToCopy.getLoanPeriod());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        renewPeriod \u003d new RenewPeriod(userSettingsToCopy.getRenewPeriod());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        fineIncrement \u003d new FineIncrement((userSettingsToCopy.getFineIncrement()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code loanPeriod} of the {@code UserSettings} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder withLoanPeriod(String loanPeriod) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.loanPeriod \u003d new LoanPeriod(loanPeriod);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code renewPeriod} of the {@code UserSettings} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder withRenewPeriod(String renewPeriod) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.renewPeriod \u003d new RenewPeriod(renewPeriod);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Sets the {@code fineIncrement} of the {@code UserSettings} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettingsBuilder withFineIncrement(String fineIncrement) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        this.fineIncrement \u003d new FineIncrement(fineIncrement);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns a UserSettings object based on specified fields."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * @return UserSettings object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public UserSettings build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return new UserSettings(loanPeriod.getLoanPeriod(), renewPeriod.getRenewPeriod(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                fineIncrement.getFineIncrement());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserSettingsUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINE_INCREMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOAN_PERIOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RENEW_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " * A utility class for UserSettings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "public class UserSettingsUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     * Returns the part of command string for the given {@code SetUserSettingsDescriptor}\u0027s details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    public static String getSetUserSettingsDescriptorDetails(SetCommand.SetUserSettingsDescriptor descriptor) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.getLoanPeriod().ifPresent(loanPeriod -\u003e sb.append(PREFIX_LOAN_PERIOD)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .append(loanPeriod.getLoanPeriod()).append(\" \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.getRenewPeriod().ifPresent(renewPeriod -\u003e sb.append(PREFIX_RENEW_PERIOD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .append(renewPeriod.getRenewPeriod()).append(\" \"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        descriptor.getFineIncrement().ifPresent(fineIncrement -\u003e sb.append(PREFIX_FINE_INCREMENT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "                .append(fineIncrement.getFineIncrement()).append(\" \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cronyxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cronyxx": 30
    }
  }
]
